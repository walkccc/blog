[{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/tags/macos/","section":"Tags","summary":"","title":"MacOS","type":"tags"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/","section":"Peng-Yu's Blog","summary":"","title":"Peng-Yu's Blog","type":"page"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"After completely reinstalling macOS, here\u0026rsquo;s how I like to set up a clean, powerful, and personalized development environment.\n1. Initial macOS Configuration # üßë‚Äçüíª User Account Setup # Create a temporary Admin user Name it Temp Login with Temp, then: Rename your home folder from jay to Jay Open System Settings \u0026gt; Users \u0026amp; Groups Change Account Name: jay ‚Üí Jay Change Home Directory: /Users/jay ‚Üí /Users/Jay Log out and log in as Jay Delete Temp user ‚ö°Ô∏è System \u0026amp; Workflow Enhancements # Install Magnet from the App Store (window manager) Increase keyboard repeat speed: defaults write NSGlobalDomain KeyRepeat -int 1 defaults write NSGlobalDomain InitialKeyRepeat -int 20 (You may need to log out and log back in for these changes to take full effect.) (Optional) Set a password shorter than 4 characters 2. Essential Command-Line Tools # üç∫ Homebrew # /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; (Follow the on-screen instructions, which may include adding Homebrew to your PATH.)\nInstall essential packages:\nbrew install --cask iterm2 brew install --cask visual-studio-code brew install --cask cursor brew install --cask anaconda brew install --cask raycast brew install gh Zsh and Zim Framework # Configure Zsh Environment for Zim: Add the following lines to ~/.zshenv. This tells Zim where to store its configuration files, adhering to the XDG Base Directory specification.\necho \u0026#39;export ZDOTDIR=$HOME/.config/zsh\u0026#39; \u0026gt;\u0026gt; ~/.zshenv echo \u0026#39;export ZIM_HOME=$ZDOTDIR/.zim\u0026#39; \u0026gt;\u0026gt; ~/.zshenv (If ~/.zshenv doesn\u0026rsquo;t exist, these commands will create it.)\nInstall Zim:\ncurl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh 3. Dotfiles \u0026amp; Terminal Customization # Personalize your shell environment with custom configurations.\n‚öôÔ∏è Install Dotfiles # Clone and set up your preferred dotfiles. This example uses walkccc\u0026rsquo;s dotfiles.\ncd ~ curl https://codeload.github.com/walkccc/dotfiles/tar.gz/main | tar -xz --strip=1 dotfiles-main rm README.md LICENSE .gitignore ‚ú® Apply Changes \u0026amp; Theme # Restart your terminal (iTerm2) to apply the new Zsh and Zim configurations. This will also likely trigger the installation of themes like Powerlevel10k if it\u0026rsquo;s part of your dotfiles or Zim setup. Follow any on-screen prompts from Powerlevel10k to configure your prompt.\n4. Development Environment Setup # üêç Python (via Anaconda) # Initialize Conda for Zsh:\n/opt/homebrew/anaconda3/bin/conda init zsh (The path might vary slightly depending on your Homebrew prefix if not default. /opt/homebrew/anaconda3/bin/conda init zsh for Apple Silicon usually)\nRestart Terminal: After restarting, Conda\u0026rsquo;s configuration should be active in $ZDOTDIR/.zshrc.\nüü© Node (via Node Version Switcher - NVS) # Install NVS This method installs NVS following the XDG Base Directory specification for NVS_HOME.\nexport NVS_HOME=\u0026#34;$HOME/.local/share/nvs\u0026#34; git clone https://github.com/jasongin/nvs \u0026#34;$NVS_HOME\u0026#34; . \u0026#34;$NVS_HOME/nvs.sh\u0026#34; install Add NVS to your PATH: To make nvs available in every new shell session, add the following to your Zsh configuration file.\n# The following line should already be present in your Zsh configuration file: # $ bat $ZDOTDIR/init/nvs.sh # export NVS_HOME=\u0026#34;$HOME/.local/share/nvs\u0026#34; # [ -s \u0026#34;$NVS_HOME/nvs.sh\u0026#34; ] \u0026amp;\u0026amp; . \u0026#34;$NVS_HOME/nvs.sh\u0026#34; Install Node.js versions as needed using nvs add \u0026lt;version\u0026gt; and nvs use \u0026lt;version\u0026gt;.\n5. Productivity \u0026amp; Developer Tools # üìù Text Editor: LunarVim # Install the pre-requisites:\nbrew install neovim Install LunarVim by running the command in LunarVim\u0026rsquo;s website.\nüöÄ Launcher \u0026amp; Productivity: Raycast # Configure Raycast to enhance your productivity.\nSet up Quicklinks. Enable Clipboard History. Link any custom Scripts (e.g., those downloaded with your dotfiles) to Raycast\u0026rsquo;s script command directory. A common location for user scripts is ~/.config/raycast/commands. You might need to create this directory and symlink or copy your scripts there. 6. System Customizations # üîç Finder Customization # # Show full path in Finder defaults write com.apple.finder _FXShowPosixPathInTitle -bool true; killall Finder # Hide full path in Finder defaults write com.apple.finder _FXShowPosixPathInTitle -bool false; killall Finder ","date":"19 May 2025","externalUrl":null,"permalink":"/posts/tech/whats-in-my-macos/","section":"Posts","summary":"","title":"What's in my macOS?","type":"posts"},{"content":"These are handy tools and tweaks that aren\u0026rsquo;t required for a clean install, but can improve workflow or handle specific tasks.\nüîß Git Utilities # Revert repo to a previous commit\nRebase without changing timestamps:\ngit rebase -i --root # Change pick ‚Üí edit GIT_COMMITTER_DATE=\u0026#34;YYYY-MM-DDTHH:MM:SS\u0026#34; git commit --amend --date=\u0026#34;YYYY-MM-DDTHH:MM:SS\u0026#34; git rebase --committer-date-is-author-date \u0026lt;NEW_SHA\u0026gt; üõ† Other Custom Tweaks # Remove .DS_Store files:\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE sudo find / -name .DS_Store -exec rm {} + Make Dock appear instantly:\ndefaults write com.apple.Dock autohide-delay -float 0.0001; killall Dock # To reset: defaults delete com.apple.Dock autohide-delay; killall Dock üêç Python Environment (Anaconda) # Create and use an environment:\nconda create --name MKDOCS python=3.9 conda activate MKDOCS pip install mkdocs mkdocs-material Remove environment:\nconda remove --name MKDOCS --all conda deactivate ","date":"17 May 2025","externalUrl":null,"permalink":"/posts/tech/macos-dev-tips/","section":"Posts","summary":"","title":"macOS Developer Tips","type":"posts"},{"content":"","date":"2 April 2023","externalUrl":null,"permalink":"/tags/aws/","section":"Tags","summary":"","title":"AWS","type":"tags"},{"content":" Learn how to set up AWS CLI for your AWS account in a few easy steps! This comprehensive guide walks you through enabling IAM Identity Center, adding a user to your AWS account, installing and configuring AWS CLI V2, and setting AWS environment variables. You\u0026rsquo;ll even get to test your AWS CLI skills by creating a role using AWS CLI V2. Follow along and become an AWS CLI pro!\nEnable IAM identity center # Sign in as root user Go to IAM Identity Center console. Under Enable IAM Identity Center, click Enable. Click Create AWS organization in the popup window. Add User in IAM Identity Center # Click Add user in \u0026ldquo;IAM Identity Center \u0026gt; Users\u0026rdquo;. Fill the required information. Review the information and click Add user in the bottom right. You can also create a group for this user if you like. Hooray! The user \u0026ldquo;buildwebapp2023\u0026rdquo; was successfully added! Finally, navigate to your mail and click Accept invitation. Add User to an AWS account # In \u0026ldquo;IAM Identity Center \u0026gt; AWS Organizations: AWS accounts\u0026rdquo;, click one of the organization then click Assign users or groups. Select the newly added user and \u0026ldquo;AdministratorAccess\u0026rdquo; permission sets (We\u0026rsquo;ll need to create a role programmatically it later). Review and click Submit. Wait a second\u0026hellip; The user with selected permission sets is assigned to this AWS account! Install and Configure AWS CLI V2 # Install AWS CLI via Homebrew\nbrew install awscli Specify an alternate location to store AWS config and credentials following the XDG Base Directory. I use zsh, so I\u0026rsquo;ll do\necho \u0026#39;export AWS_CONFIG_FILE=$HOME/.config/aws/config export AWS_SHARED_CREDENTIALS_FILE=$HOME/.config/aws/credentials\u0026#39; \u0026gt; ~/.config/zsh/init/aws.zshrc Generate the config file for sso-session and profile by grabbing the information in \u0026ldquo;IAM Identity Center \u0026gt; Dashboard\u0026rdquo;, clicking the AWS access portal URL under Settings summary, and copying and pasting the SSO Start URL and SSO Region to proper fields. Alternatively, use the aws configure sso wizard.\nAWS_ACCOUNT_ID=123456789012 echo \u0026#39;[sso-session my-sso] sso_start_url = https://d-9067911059.awsapps.com/start# sso_region = us-east-1 sso_registration_scopes = sso:account:access [profile admin-access] sso_session = my-sso sso_account_id = \u0026#39;${AWS_ACCOUNT_ID}\u0026#39; sso_role_name = AdministratorAccess region = us-east-1 output = yaml\u0026#39; \u0026gt; ~/.config/aws/config Set AWS environment variables # To set AWS environment variables, copy the export statements from the same place as above.\necho \u0026#39;export AWS_ACCESS_KEY_ID=\u0026#34;XXX\u0026#34; export AWS_SECRET_ACCESS_KEY=\u0026#34;YYY\u0026#34; export AWS_SESSION_TOKEN=\u0026#34;ZZZ\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.config/zsh/init/aws.zshrc Test your AWS CLI # To test your AWS CLI, you can create a role and attach a policy for it programmatically. The command is:\nAWS_ACCOUNT_ID=123456789012 echo \u0026#39;{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;arn:aws:iam::\u0026#39;${AWS_ACCOUNT_ID}\u0026#39;:oidc-provider/token.actions.githubusercontent.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;token.actions.githubusercontent.com:aud\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34; }, \u0026#34;StringLike\u0026#34;: { \u0026#34;token.actions.githubusercontent.com:sub\u0026#34;: \u0026#34;repo:walkccc/go-boilerplate:*\u0026#34; } } } ] }\u0026#39; \u0026gt; GitHubActionsRole.json aws iam create-role --role-name GitHubActionsRole --assume-role-policy-document file://GitHubActionsRole.json aws iam attach-role-policy --role-name GitHubActionsRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser rm GitHubActionsRole.json Congrats, you\u0026rsquo;ve succesfully created a role via AWS CLI V2! üôÇ\nFinally, when you\u0026rsquo;re done, clean up the resources you created:\naws iam detach-role-policy --role-name GitHubActionsRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser aws iam delete-role --role-name GitHubActionsRole References # Step 1: Enable IAM Identity Center - AWS IAM Identity Center (successor to AWS Single Sign-On) Token provider configuration with automatic authentication refresh for AWS IAM Identity Center (successor to AWS Single Sign-On) ","date":"2 April 2023","externalUrl":null,"permalink":"/posts/tech/aws-cli/","section":"Posts","summary":"","title":"AWS CLI","type":"posts"},{"content":"","date":"18 September 2022","externalUrl":null,"permalink":"/tags/algorithms/","section":"Tags","summary":"","title":"Algorithms","type":"tags"},{"content":"","date":"18 September 2022","externalUrl":null,"permalink":"/tags/leetcode/","section":"Tags","summary":"","title":"LeetCode","type":"tags"},{"content":" Ê≠£Âú®Êää‰πãÂâçÊ≤íÂÅöÁöÑ‰∏Ä‰∫õÈ°åÂÅö‰∏ÄÂÅöÔºåÂâõÂ•ΩÁúãÂà∞‰∫ÜÈÄôÈ°åÊªøÊúâË∂£ÁöÑÔºåÂõ†Ê≠§Ê±∫ÂÆöÂØ´ÁØáÊñáÁ´†„ÄÇ\nÈ°åÁõÆÈÄ£Áµê„ÄÇ\n\\(O(n^3)\\) Êï∏Â≠∏Ëß£ # ÈÄôÈ°åÂ∞±‰∏çË®éË´ñÊö¥ÂäõËß£‰∫ÜÔºåÈÄôÈ°åÁî®Âà∞‰∫Ü‰∏Ä‰∫õÂúã‰∏≠ÊïôÁöÑÊï∏Â≠∏Áü•Ë≠òÔºåÂÅöËµ∑‰æÜÈÇÑÊòØÊªøÊúâË∂£ÁöÑ„ÄÇ\n‰ª•‰∏ãÊèê‰æõÁöÑËß£Ê≥ïÔºö\nÊûöËàâÊâÄÊúâÈªûÂ∞ç \\((P, Q)\\)ÔºåÊâæÂá∫Ëàá \\(P\\)„ÄÅ\\(Q\\) Áõ∏ÂàáÁöÑÂÖ©ÂÄãÂúì \\(C_1\\) Âíå \\(C_2\\)Ôºö\\(O(n^2)\\) Ê™¢Êü•ÂÖ∂ÂÆÉÊâÄÊúâÈªûÊòØÂê¶Âú® \\(C_1\\) Âíå \\(C_2\\) ÈñìÔºö\\(O(n)\\) Á∏ΩÊôÇÈñìÔºö\\(O(n^3)\\) ÊâÄ‰ª•Ê≠§È°åÁöÑÈáçÈªûÂú®ÊñºÊ±ÇÂá∫ÂúìÂøÉ \\(C_1\\) Âíå \\(C_2\\)„ÄÇ\nÁ§∫ÊÑèÂúñ # Áî±Âúñ‰∏≠ÂèØÂæóÔºö\n$$ \\begin{aligned} \\alpha_1 + \\theta \u0026amp;= \\alpha_2 + \\theta = 90^{\\circ} \\\\ \\alpha_1 \u0026amp;= \\alpha_2 \\\\ \\vartriangle AMC_1 \u0026amp; \\cong \\vartriangle BQP \\end{aligned} $$\nÂèàÁü•Ôºö\n$$ \\begin{aligned} \\tan\\alpha_1 \u0026amp;= \\tan\\alpha_2 = \\frac{P_y - Q_y}{Q_x - P_x} \\\\ \\alpha_1 \u0026amp;= \\alpha_2 = \\arctan (\\frac{P_y - Q_y}{Q_x - P_x}) \\end{aligned} $$\nÂèàÁî±‰∏âËßíÂΩ¢ÁöÑÁâπÊÄßÂèØÂæóÔºö\n$$ \\begin{aligned} C_1.x \u0026amp;= M.x - d \\cdot \\sin\\alpha_1 \\\\ C_1.y \u0026amp;= M.y - d \\cdot \\cos\\alpha_1 \\\\ C_2.x \u0026amp;= M.x + d \\cdot \\sin\\alpha_1 \\\\ C_2.y \u0026amp;= M.x + d \\cdot \\sin\\alpha_1 \\end{aligned} $$\nÂâ©‰∏ãÁöÑÂ∞±ÊòØÂÖ∑È´î‰ª£Á¢ºÂØ¶ÁèæÂï¶ÔºÅ\n","date":"18 September 2022","externalUrl":null,"permalink":"/posts/algo/lc-1453/","section":"Posts","summary":"","title":"LeetCode 1453. Maximum Number of Darts Inside of a Circular Dartboard","type":"posts"},{"content":" Á¨¨‰∏ÄÁØáË®òÈåÑÁÆóÊ≥ïÁöÑÊñáÁ´†Ôºå‰æÜ‰ªãÁ¥π‰∏ãÊñ∞Â≠∏Âà∞ÁöÑÁÆóÊ≥ïÔºöDigit DP„ÄÇ\nÊö¥ÂäõËß£ # È°åÁõÆÊ®°Áâà‰∏ÄËà¨ÊúÉÈï∑ÁöÑÂÉèÈÄôÊ®£ÔºöÁµ¶ÂÆöÂçÄÈñì \\([L, R]\\) Âíå‰∏ÄÂÄãÂáΩÊï∏ \\(f(x) \\to \\{\\texttt{True}, \\texttt{False}\\}\\)ÔºåÂïèÂú® \\([L, R]\\) ‰πãÈñìÁöÑÊ≠£Êï¥Êï∏ÔºåÊªøË∂≥ \\(f(x)\\) ÁöÑÊï∏ÈáèÊúâÂ§öÂ∞ëÔºü\nÁèæÂú®ÊàëÂÄëÂèØ‰ª•Â∏∂ÂÖ•‰∏ÄÂÄãÁúüÂØ¶ÁöÑ‰æãÂ≠êÔºåÂú® \\([L = 19, R = 9999]\\) ÂçÄÈñìÔºåÊØè‰∏Ä‰ΩçÊï∏ÁöÑÁ∏ΩÂêà ÁÇ∫ \\(k = 23\\) ÁöÑÊï∏Â≠óÂÖ±ÊúâÂπæÂÄãÔºü\nÊö¥ÂäõËß£Áî® C++ ‰ª£Á¢ºÊºîÁ§∫Â¶Ç‰∏ãÔºö\nbool DigitSum(int num) { int sum = 0; while (num \u0026gt; 0) { sum += num % 10; num /= 10; } return sum; } int GetSatisfiedCount(int l, int r, int k) { int satisfied_count = 0; for (int num = l; num \u0026lt;= r; ++num) if (DigitSum(num) == k) ++satisfied_count; return satisfied_count; } constexpr int start = 19; constexpr int end = 9\u0026#39;999; constexpr int k = 23; std::cout \u0026lt;\u0026lt; GetSatisfiedCount(start, end, k); ËÄåÈÄôÊ®£ÁöÑÊôÇÈñìË§áÈõúÂ∫¶ÁÇ∫Ôºö\n$$ O(r - l) \\cdot O(|\\texttt{f}|) = O(r - l) \\cdot \\log(\\texttt{num}), $$\nËã•ÂçÄÈñìÂ§ßÂ∞èÈùûÂ∏∏Â§ßÔºå‰æãÂ¶Ç \\([0, 10^9]\\)ÔºåÊö¥ÂäõËß£‰∏çÂ§™ÁèæÂØ¶„ÄÇ\nÈáçÊñ∞ÊÄùËÄÉ # ÈÇ£È∫ºÔºåË©≤Â¶Ç‰ΩïÂÑ™ÂåñÂë¢ÔºüÈ¶ñÂÖàÂÆöÁæ©Ôºö\n\\(S(R, k)\\)ÔºöÂú® \\([0, R]\\) ÊªøË∂≥ \\(f(x) = k\\) ÁöÑÊï∏ÈáèÔºåÂÖ∂‰∏≠ \\(f(x)\\) ÁÇ∫ \\(x\\) ÁöÑÊï∏Â≠óÁ∏ΩÂêà„ÄÇ\nÂèØ‰ª•Êé®Âá∫Ôºå\\(S(R) - S(L - 1)\\) ÁÇ∫Âú® \\([L, R]\\) ÊªøË∂≥ \\(f(x) \\to \\texttt{True}\\) ÁöÑÊï∏Èáè„ÄÇ‰∏¶‰∏îËßÄÂØüÂõ†ÁÇ∫ \\(R = 9999\\)Ôºå‰ªª‰ΩïÊªøË∂≥Ê¢ù‰ª∂ÁöÑÂÄºÊúÄÂ§öÂè™ÊúÉÊúâ \\(n = 4\\) ‰ΩçÊï∏„ÄÇÁèæÂú®ÊàëÂÄëË©¶ËëóÂ∞áÈ°åÁõÆËÆäÊàêÂ≠êÂïèÈ°åÔºöËã•Âú®Á¨¨‰∏Ä‰ΩçÂ°´‰∏ä i _ _ _ÔºåÊúÉÁôºÁèæ Âú®Ââ©‰∏ãÁöÑ \\(n - 1 = 3\\) ‰ΩçÊï∏‰∏≠ÔºåÂâ©‰∏ã \\(k - i\\) ÁöÑÈ§òÈ°ç„ÄÇ\nÁèæÂú®ÊàëÂÄëÂÆöÁæ© \\(dp(n, k)\\)ÔºöÂú® \\(n\\) ‰ΩçÊï∏Áï∂‰∏≠ÔºåÊªøË∂≥ \\(f\\) ÁöÑÊï∏ÈáèÔºåÂèØÂæóÔºö\n$$ dp(n, k) = \\sum_{i = 0}^9 dp(n - 1, k - i). $$\n‰∏¶‰∏îÂÆöÁæ©ÁµÇÊ≠¢Ê¢ù‰ª∂Ôºö\\(dp(0, 0) = 1\\)„ÄÇ\n‰ΩÜÈÄôÂá∫Áèæ‰∫Ü‰∏ÄÂÄãÂïèÈ°åÔºåËã• \\(R\\) ‰∏çÁ≠âÊñº \\(10^n - 1\\) ÁöÑÂÄºÔºåÈÇ£È∫º‰∏çËÉΩËÄÉÊÖÆÊâÄÊúâ \\(n\\) ÁÇ∫Êï∏ÁöÑÊï∏Â≠óÔºåËàâ‰æã‰æÜË™™ÔºåËã• \\(R = 3456\\)ÔºåÂâáÊàëÂÄë‰∏çËÉΩËÄÉÊÖÆÊâÄÊúâ 4 ‰ΩçÊï∏ÁöÑÂ≠óÔºå Êõ¥ÂÖ∑È´îÁöÑË™™Ôºå‰ªª‰ΩïÂú® \\([3457, 9999]\\) ÂçÄÈñìÊªøË∂≥Ê¢ù‰ª∂ÁöÑÊï∏Â≠óÈÉΩ‰∏çÊáâË¢´Ë®àÁÆóÈÄ≤ÂéªÔºåÂøÖÈúÄÂä† ÂÖ•ÈÅ©Áï∂ÁöÑÊ¢ù‰ª∂Âà§Êñ∑„ÄÇ\nÊàëÂÄëÂèØ‰ª•Âä†ÂÖ•‰∏ÄÂÄã isTight ÁöÑÂ∏ÉÊûóÂÄºÔºåÂà§Êñ∑Áï∂ÂâçÈÄô‰∏Ä‰ΩçÊï∏Êáâ‰∏çÊáâË©≤ÈÅµÂÆàÈñãÂçÄÈñìÁöÑÈÇäÁïåË¶è ÁØÑÔºåÈáçÊñ∞ÂÆöÁæ© \\(dp(n, k, \\texttt{isTight})\\)ÔºåÂ∞çÊñºÈ°åÁõÆ \\(S(R, k) = S(3456, k)\\)ÔºåÊàëÂÄëÂèØ‰ª•ÈáùÂ∞çÂú®È¶ñ‰ΩçÊï∏Â°´‰∏ä‰∏çÂêåÊï∏Â≠óÂàÜÊàê‰ª•‰∏ã‰∏âÁ®ÆÊÉÖÂΩ¢Ë®éË´ñÔºö\nÂ°´‰∏ä \\(\u0026lt; 3\\) ÁöÑÊï∏Â≠óÔºåÈÇ£È∫ºÂâ©‰∏ãÁöÑ 3 ‰ΩçÊï∏‰∏çÂÜçÈúÄË¶ÅÈÅµÂÆàÈÇäÁïåË¶èÁØÑÔºåÂèØ‰ª•Ëá™Áî±ÁöÑÂ°´‰∏ä \\([0, 999]\\) ËÄå‰∏çÊúÉË∂ÖÈÅé \\(3456\\)„ÄÇ Â°´‰∏ä \\(3\\)ÔºåÈÇ£È∫ºÂâ©‰∏ãÁöÑ‰∏â‰ΩçÊï∏ÈÇÑÊòØÂøÖÈúÄÈÅµÂÆàÈÇäÁïåË¶èÁØÑ \\([0, 456]\\)„ÄÇ È°ØÁÑ∂Âú∞ÔºåÊàëÂÄë‰∏çËÉΩÂú®Á¨¨‰∏Ä‰ΩçÊï∏Â°´‰∏ä \\(\u0026gt; 3\\) ÁöÑ‰ªª‰ΩïÊï∏Â≠ó„ÄÇ $$ \\begin{aligned} S(R, k) \u0026amp;= S(3456, k) \\\\ \u0026amp;= dp(4, k, \\texttt{isTight = True}) \\\\ \u0026amp;= \\sum_{i = 0}^2 dp(4 - 1, k - i, \\texttt{isTight = False}) \\\\ \u0026amp;+ dp(4 - 1, k - 3, \\texttt{isTight = True}). \\end{aligned} $$\n","date":"27 August 2022","externalUrl":null,"permalink":"/posts/algo/digit-dp/","section":"Posts","summary":"","title":"Digit DP","type":"posts"},{"content":"","date":"24 August 2022","externalUrl":null,"permalink":"/tags/tech/","section":"Tags","summary":"","title":"Tech","type":"tags"},{"content":"ÂêÑË°åÂêÑÊ•≠ÈÉΩÊúâË®±Â§öÂ±¨Êñº‰ªñÂÄëËá™Â∑±ÁöÑË°åË©±ÔºåÁßëÊäÄÊ•≠Áï∂ÁÑ∂‰πü‰∏ç‰æãÂ§ñÔºåÈÇÑË®òÂæóÂàù‰æÜÁæéÂúãÊôÇÔºåËÅΩÂà∞ÂêÑ Á®Æ‰∫îËä±ÂÖ´ÈñÄÁöÑÁ∏ÆÂØ´ÔºåÁ∏ΩÊòØË¶∫ÂæóÂøÉÂ•ΩÁ¥ØÔºåÁÑ°Ê≥ïË∑ü‰∏äÂ§ßÂÆ∂ÔºåÊú¨ÊñáÂ∞±ËÆìÁ≠ÜËÄÖ‰æÜÂàóËàâÂπæÂÄãÊâìÂ≠óÂ∏∏Áî®ÁöÑ Á∏ÆÂØ´ÂêßÔºÅ\nËÅ∑‰Ωç # DSÔºàData ScientistÔºâÔºöË≥áÊñôÁßëÂ≠∏ÂÆ∂ EMÔºàEngineering ManagerÔºâÔºöÂ∑•Á®ã‰∏ªÁÆ° PE (Principle EngineerÔºâÔºöÈ¶ñÂ∏≠Â∑•Á®ãÂ∏´ PM (Product Manager or Program ManagerÔºâÔºöÁî¢ÂìÅÁ∂ìÁêÜÊàñÂ∞àÊ°àÁ∂ìÁêÜ SA (Solutions ArchitectÔºâÔºöÊñπÊ°àÊû∂ÊßãÂ∏´ SWE (Software EngineerÔºâÔºöËªüÈ´îÂ∑•Á®ãÂ∏´ TPMÔºàTechnical Program ManagerÔºâÔºöÊäÄË°ìÂ∞àÊ°àÁ∂ìÁêÜ ÁßëÊäÄÊ•≠Â∏∏Áî® # NGÔºàNew GradÔºâÔºöÁï¢Ê•≠Áîü PIPÔºàPerformance Improvement PlanÔºâÔºöÁ©çÊïàÊîπÂñÑË®àÁï´ TC (Total Compensation)ÔºöËñ™Ê∞¥Á∏ΩÂåÖÔºåÈÄöÂ∏∏ÊåáÁöÑÂåÖÊã¨Êú¨Ëñ™ÔºàbaseÔºâ„ÄÅËÇ°Á•®ÔºàRSUÔºâ„ÄÅÁ∞ΩÂ≠ó Ë≤ªÔºàsign-on bonusÔºâÂíåÂπ¥ÁµÇÁçéÈáëÔºàbonusÔºâ TMÔºàTeam MatchÔºâ YOEÔºàYears of ExperienceÔºâ Â∑•‰ΩúÂ∏∏Áî® # LGTM (Looks Good to Me) SG (Sounds Good) ÁæéÂúã # NRAÔºàNonresident AlienÔºâ RAÔºàResident AlienÔºâ Â∞àÊ•≠ # CEÔºàComputer EngineeringÔºâÔºöÈõªËÖ¶Â∑•Á®ã CSÔºàComputer ScienceÔºâÔºöÈõªËÖ¶ÁßëÂ≠∏ ECEÔºàElectrical Computing EngineeringÔºâÔºöÈõªÊ©üÈõªËÖ¶Â∑•Á®ã EEÔºàElectrical EngineeringÔºâÔºöÈõªÊ©üÂ∑•Á®ã ","date":"24 August 2022","externalUrl":null,"permalink":"/posts/tech/tech-terms/","section":"Posts","summary":"","title":"ÁßëÊäÄ‰∫∫ÁöÑÂêÑÁ®ÆÁ∏ÆÂØ´","type":"posts"},{"content":"","date":"17 August 2022","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":" ÂâçË®Ä # Git ËÉΩÂ§†ÊúâÊïàÂú∞Âπ´Âä©‰Ω†ÁÇ∫‰∏Ä‰ªΩÂ∞àÊ°àÂØ´‰∏ãÂ∞çÊáâÁöÑÊó•Ë™å„ÄÇËâØÂ•Ω„ÄÅÊòéÁ¢∫ÁöÑÊèê‰∫§Ê≠∑Âè≤ÔºàCommit HistoryÔºâËÉΩËÆìÊó•ÂæåÂõû‰æÜËøΩËπ§‰ª£Á¢ºÊôÇÔºå‰∫ãÂçäÂäüÂÄçÔºåÂõ†Ê≠§Á≠ÜËÄÖË™çÁÇ∫Â≠∏ÁøíÊúâÊïàÂú∞‰ΩøÁî® GitÔºåÂ∞§ÂÖ∂ ÊòØ rebase ÈÄôÂÄãÂäüËÉΩÊòØÂ∞§ÁÇ∫ÈáçË¶ÅÁöÑ„ÄÇ\nÂú®ÁµÇÁ´ØÊ©ü‰∏≠Ëº∏ÂÖ•Ôºö\ngit rebase --help Â∞±ËÉΩÁúãÂà∞Ë®±Â§ö git rebase ÁöÑÁî®Ê≥ïÔºåÊú¨ÊñáÂ∞áÊúÉÂ∞àÊ≥®Âú®Á≠ÜËÄÖÊúÄÂ∏∏‰ΩøÁî®ÁöÑÂπæÂÄãÊåá‰ª§‰∏≠Ôºå‰∏¶Ë´áË´á Â¶Ç‰ΩïÈ´òÊïàÂú∞Êï¥ÁêÜÊèê‰∫§Ê≠∑Âè≤„ÄÇ\nÊâãÊääÊâãÁØÑ‰æã # ÁØÑ‰æãÊúÉÂ∏∂ËÆÄËÄÖÂØ¶ÈöõÁöÑÊìç‰Ωú git rebase ÁöÑÁî®Ê≥ïÔºå‰∏¶‰∏îÊâÄÊúâÊåá‰ª§Ë®≠ÁöÜËÉΩË§áË£ΩË≤º‰∏ä„ÄÇ Êú¨ÁØÑ‰æãÂÅáË®≠ËÆÄËÄÖÊúâ‰∏ÄÂÆöÁöÑ git Âü∫Á§é„ÄÇ Ê≠£ÊñáÈñãÂßã # È¶ñÂÖàÔºåÂª∫Á´ãÊàëÂÄëÁöÑÊ∏¨Ë©¶Â∑•‰ΩúÁí∞Â¢É git-rebase-demoÔºå‰ª•‰∏ãÊâÄÊúâÊìç‰ΩúÈÉΩÊúÉÂú®Ê≠§Ë∑ØÂæë‰∏ãÂÆåÊàêÔºö\nmkdir ~/git-rebase-demo \u0026amp;\u0026amp; cd $_ git init Êñ∞Â¢ûÂ∏∂ÊúâÈåØÂà•Â≠óÁöÑ A.txt ‰∏¶Êèê‰∫§ÔºàcommitÔºâA.txtÔºö\necho \u0026#39;I am fil A.\u0026#39; \u0026gt; A.txt git add A.txt git commit -m \u0026#39;Create A.txt\u0026#39; Êñ∞Â¢ûÊ™îÊ°à B.txt ‰∏¶Êèê‰∫§ B.txtÔºö\necho \u0026#39;I am file B.\u0026#39; \u0026gt; B.txt git add B.txt git commit -m \u0026#39;Create B.txt\u0026#39; Êü•ÁúãÊ≠∑Âè≤Ë®òÈåÑÔºö\ngit log --oneline def4567 (HEAD -\u0026gt; main) Create B.txt abc1234 Create A.txt ‰ª•‰∏ãÊúÉÁî® def4567 Âíå abc1234 Êåá‰ª£ÔºåËÆÄËÄÖË´ãËá™Ë°åÂ∏∂Êèõ„ÄÇ\nÁèæÂú®ÊàëÂÄëÂ∏åÊúõËÉΩ‰øÆÊîπ A.txt ‰∏≠ÁöÑÈåØÂà•Â≠óÔºåÂèà‰∏çÂ∏åÊúõÂõ†Ê≠§Â¢ûÂä†‰∏ÄÂÄãÁØÄÈªûÔºåÂ∞±Âè™ÊòØÂõ†ÁÇ∫‰∏ÄÊôÇ ÁñèÂøΩ„ÄÇÂÖ∂‰∏≠‰∏ÄÂÄãÊñπÊ≥ïÊòØÈÄèÈÅé git checkout abc1234 ‰øÆÊîπÔºåËÄåÁ≠ÜËÄÖÂ∞á‰ªãÁ¥π‰∏ÄÁ®ÆÊõ¥Á∞°ÂñÆÁöÑÊñπ Âºè„ÄÇ\nÊ≥®ÊÑèÔºöÊ≠§ÊñπÊ≥ïÂè™ÈÅ©Áî®Êñ∞ÁöÑÊèê‰∫§ÁØÄÈªûÔºàdef4567Ôºâ‰∏ç‰æùË≥¥ËàäÁöÑÊèê‰∫§ÁØÄÈªûÔºàabc1234ÔºâÁöÑÊÉÖ Ê≥Å„ÄÇ\nÈ¶ñÂÖàÔºå‰øÆÊ≠£ÈåØÂà•Â≠óÔºö\nsed -i \u0026#39;s/fil/file/\u0026#39; A.txt # Linux sed -i \u0026#39;\u0026#39; \u0026#39;s/fil/file/\u0026#39; A.txt # macOS ÈóúÈçµ‰∏ÄÊ≠•ÔºåÂÖà‰∏çÁÆ°È†ÜÂ∫èÂ∞çÈåØÔºåÂú®Ê≠§Êèê‰∫§‰øÆÊîπÔºö\ngit add A.txt git commit -m \u0026#39;Put anything here\u0026#39; ÈáçÈ†≠Êà≤ÔºåÈÄ≤Ê≠• git rebase ‰ªãÈù¢Ôºö\ngit rebase -i --root ‰Ω†ÊúÉÁúãÂà∞\npick abc1234 Create A.txt pick def4567 Create B.txt pick xyz0001 Put anything here Âú® vim Â∫ï‰∏ãÔºåÈáçÊñ∞Ë™øÊï¥Êèê‰∫§È†ÜÂ∫èÔºå‰∏¶Â∞á xyz0001 ÁöÑ pick ÊîπÁÇ∫ fixupÔºà‰πüÂèØÁ∏ÆÂØ´Êàê fÔºâÔºåÈÄôÈ∫º‰∏Ä‰æÜ xyz0001 Â∞±ÊúÉÂíå abc1234 Âêà‰ΩµÁî¢Áîü‰∏ÄÂÄã Êñ∞ÁöÑÁØÄÈªûÁî¢ÁîüÊñ∞ÁöÑÂìàÂ∏åÂÄºÔºåÂõ†ÁÇ∫‰øÆÊîπ‰∫ÜËàäÁöÑÁØÄÈªûÔºådef4567 ÁöÑÁØÄÈªû‰πüÊúÉËá™ÂãïÁîüÊàê‰∏Ä‰ªΩÊñ∞ÁöÑ ÂìàÂ∏åÂÄº„ÄÇ\npick abc1234 Create A.txt fixup xyz0001 Put anything here pick def4567 Create B.txt ZZ ÈÄÄÂá∫ vimÔºå‰∏¶ÂÜçÊ¨°Êü•ÁúãÊèê‰∫§Ê≠∑Âè≤Ôºö\ngit log --oneline 6a674ea (HEAD -\u0026gt; main) Create B.txt 5a584af Create A.txt ÂèØ‰ª•ÁúãÂà∞ÊàëÂÄëÂÑ™ÈõÖÂú∞Â∞áÊèê‰∫§Ê≠∑Âè≤ËÆä‰πæÊ∑®‰∫ÜÔºÅ\nÁµêË™û # git rebase ÁöÑÂäüËÉΩÈùûÂ∏∏Âº∑Â§ßÔºåÂ∑≤Á∂ìÊòØÁ≠ÜËÄÖÁîüÊ¥ªËàáÂ∑•‰Ωú‰∏≠‰∏çÂèØÊàñÁº∫ÁöÑÈáçË¶ÅÂ∑•ÂÖ∑ÔºåÊú¨ÊñáÊºîÁ§∫ ‰∫Ü‰∏ÄÂÄãÁ∞°ÂñÆÁöÑ‰æãÂ≠êÔºåÈô§‰∫Ü fixup Â§ñÔºåÂÖ∂ÂÆÉÈÇÑÊúâÂÉè reword, edit Á≠âÁ≠âÊñπ‰æøÁöÑÂäüËÉΩÔºå Â∞±Êö´ÊôÇ‰∏çÂú®ÈÄôÁØáÊñáÁ´†‰∏≠ÊèêÂèä‰∫ÜÔºÅ\n","date":"17 August 2022","externalUrl":null,"permalink":"/posts/tech/git-rebase-tips/","section":"Posts","summary":"","title":"Git Rebase Â¶ôÁî®","type":"posts"},{"content":"","date":"16 August 2022","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" ÈÅáË¶ã Hugo # ‰ªäÂ§©‰æÜË´áË´á Hugo Áí∞Â¢ÉË®≠ÂÆöÊôÇÊâÄÈÅáÂà∞ÁöÑ‰∏Ä‰∫õÂïèÈ°åÂèäËß£Ê±∫Ëæ¶Ê≥ï„ÄÇ\nÈ†êÂÇôÁí∞Â¢É # Ë¶ÅÈñãÂßã‰ΩøÁî® HugoÔºåËã•ÊÇ®ÁöÑÁí∞Â¢ÉË∑üÊàë‰∏ÄÊ®£ÊòØ macOS ÁöÑË©±ÔºåÂèØ‰ª•‰ΩøÁî® Â•ó‰ª∂ÁÆ°ÁêÜÂ∑•ÂÖ∑ HomebrewÔºöÂú®ÁµÇÁ´ØÊ©üËº∏ÂÖ•‰ª•‰∏ãÊåá‰ª§ ÂæåÔºå‰æøÊúÉÈñãÂßã‰∏ãËºâÈúÄË¶ÅÁöÑÂ•ó‰ª∂„ÄÇ\nbrew install hugo Ë®≠ÂÆöÊú¨Âú∞Á´Ø # ÂàùÂßãÂåñ‰∏¶ÂâµÂª∫ Git ÂÄâÂ∫´ # REPO_NAME=blog hugo new site $REPO_NAME -f yaml cd $REPO_NAME git init git add . git commit -m \u0026#34;$ hugo new site blog -f yaml\u0026#34; ‰ΩøÁî® Git submodules Êñ∞Â¢û‰∏ªÈ°å # git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive git add . git commit -m \u0026#34;Add PaperMod submodule\u0026#34; ‰øÆÊîπÈ†êË®≠ config.yaml Ê™î # Ë§áË£ΩË≤º‰∏ä config.yaml„ÄÇ\ngit add . git commit -m \u0026#34;Update default config.yaml\u0026#34; Êñ∞Â¢ûÂΩôÁ∏ΩÔºàArchivesÔºâ # echo \u0026#34;--- title: ÂΩôÁ∏Ω layout: archives url: /archives/ summary: archives ---\u0026#34; \u0026gt; content/archives.md Ë®≠ÂÆö GitHub Actions # Ë§áË£ΩË≤º‰∏ä .github/workflows/main.yaml\ngit add . git commit -m \u0026#34;Add GitHub Actions\u0026#34; Ë®≠ÂÆö GitHub # Êñ∞Âª∫‰∏ÄÂÄã repository ÂêçÁÇ∫ blog„ÄÇ\nÊé®ÈÄÅ‰ª£Á¢ºÂà∞ GitHub ‰∏ä„ÄÇ\ngit remote add origin https://github.com/\u0026lt;GITHUB_USERNAME\u0026gt;/blog.git git push -u origin main ÈÄôÊôÇÁ®çÁ≠âÁâáÂàªÔºåÂ∞±ËÉΩÂú®‰Ω†ÁöÑÂüüÂêçÁúãÂà∞‰Ω†ÁöÑÁ∂≤Á´ô‰∫ÜÔºÅ\n","date":"16 August 2022","externalUrl":null,"permalink":"/posts/tech/hugo/","section":"Posts","summary":"","title":"Áî® Hugo Êê≠Âª∫Ôºå‰∏¶Áî® GitHub Actions ‰ΩàÁΩ≤‰Ω†ÁöÑÂÄã‰∫∫ÂçöÂÆ¢ÔºÅ","type":"posts"},{"content":"","date":"14 July 2021","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"14 July 2021","externalUrl":null,"permalink":"/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":" Example # C++ # lower_bound: iterator that points to the first (minimum) number \u0026gt;= target. upper_bound: iterator that points to the first (minimum) number \u0026gt; target. map\u0026lt;int, string\u0026gt; map; map[1] = \u0026#34;one\u0026#34;; map[2] = \u0026#34;two\u0026#34;; map[3] = \u0026#34;three\u0026#34;; map[5] = \u0026#34;five\u0026#34;; map[6] = \u0026#34;six\u0026#34;; // 1 2 3 5 6 map.lower_bound(0); // ^ map.upper_bound(0); // ^ // 1 2 3 5 6 map.lower_bound(4); // ^ map.upper_bound(4); // ^ // 1 2 3 5 6 map.lower_bound(5); // ^ map.upper_bound(5); // ^ // 1 2 3 5 6 map.lower_bound(6); // ^ map.upper_bound(6); // ^ // 1 2 3 5 6 map.lower_bound(7); // ^ (null) map.upper_bound(7); // ^ Java # ceilingEntry: return a (key, value), where key is the minimum number \u0026gt;= target.\nSimilar to lower_bound in C++.\nfloorEntry: return a (key, value), where key is the maximum number \u0026lt;= target.\nSimilar to prev(map.upper_bound(val)) in C++.\nMap\u0026lt;Integer, String\u0026gt; map = new TreeMap\u0026lt;\u0026gt;(); map.put(1, \u0026#34;one\u0026#34;); map.put(2, \u0026#34;two\u0026#34;); map.put(3, \u0026#34;three\u0026#34;); map.put(5, \u0026#34;five\u0026#34;); map.put(6, \u0026#34;six\u0026#34;); // 1 2 3 5 6 map.ceilingEntry(0); // ^ map.floorEntry(0); //^ (null) // 1 2 3 5 6 map.ceilingEntry(4); // ^ map.floorEntry(4); // ^ // 1 2 3 5 6 map.ceilingEntry(5); // ^ map.floorEntry(5); // ^ // 1 2 3 5 6 map.ceilingEntry(6); // ^ map.floorEntry(6); // ^ // 1 2 3 5 6 map.ceilingEntry(7); // ^ (null) map.floorEntry(7); // ^ ","date":"14 July 2021","externalUrl":null,"permalink":"/posts/tech/ordered-set/","section":"Posts","summary":"","title":"lower_bound and upper_bound vs floorEntry and ceilingEntry","type":"posts"},{"content":"","date":"26 May 2019","externalUrl":null,"permalink":"/tags/swift/","section":"Tags","summary":"","title":"Swift","type":"tags"},{"content":" Swift Style Guide # Updated for Swift 5.0\nThe goals are clarity, consistency and brevity, in that order.\nClarity at the point of use. Codes should always be consistent within one data set. Pay attention to spelling and case; most frequent problems are with abbreviations. Clarity is more important than brevity. Write a documentation comment. References # This guide mainly follows:\nSwift.org - API Design Guidelines raywenderlich/swift-style-guide Swift Style Guide Formatting # Column Limit # Swift code has a column limit of 100 characters. Except as noted below, any line that would exceed this limit must be line-wrapped as described in Line-Wrapping.\nExceptions:\nLines where obeying the column limit is not possible without breaking a meaningful unit of text that should not be broken (for example, a long URL in a comment). import statements. Code generated by another tool. Braces # In general, braces follow Kernighan and Ritchie (K\u0026amp;R) style for non-empty blocks with exceptions for Swift-specific constructs and rules:\nThere is no line break before the opening brace ({). There is a line break after the opening brace ({). There is a line break before the closing brace (}). There is a line break after the closing brace (}) iff that brace terminated a statement. Exceptions: } else { Semicolons # Semicolons (;) are not used. The only location where a semicolon may appear is inside a string literal or a comment.\nOne Statement Per Line # Line-Wrapping # Google gives clear picture here. The key point is to be careful to judge breakable or unbreakable units.\nIf the entire declaration, statement, or expression fits on one line, then do that. Comma-delimited lists are only laid out in one direction: horizontally or vertically. In other words, all elements must fit on the same line, or each element must be on its own line. A horizontally-oriented list does not contain any line breaks, even before the first element or after the last element. Except in control flow statements, a vertically-oriented list contains a line break before the first element and after each element. A continuation line starting with an unbreakable token sequence is indented at the same level as the original line. A continuation line that is part of a vertically-oriented comma-delimited list is indented exactly +2 from the original line. When an open curly brace ({) follows a line-wrapped declaration or expression, it is on the same line as the final continuation line unless that line is indented at +2 from the original line. In that case, the brace is placed on its own line, to avoid the continuation lines from blending visually with the body of the subsequent block. Some examples:\npublic func index\u0026lt;Elements: Collection, Element\u0026gt;( of element: Element, in collection: Elements ) -\u0026gt; Elements.Index? where Elements.Element == Element, Element: Equatable { // AVOID. for current in elements { // ... } } public func index\u0026lt;Elements: Collection, Element\u0026gt;( of element: Element, in collection: Elements ) -\u0026gt; Elements.Index? where Elements.Element == Element, Element: Equatable { // GOOD. for current in elements { // ... } } For declarations that contain a where clause followed by generic constraints, additional rules apply:\nIf the generic constraint list exceeds the column limit when placed on the same line as the return type, then a line break is first inserted before the where keyword and the where keyword is indented at the same level as the original line. If the generic constraint list still exceeds the column limit after inserting the line break above, then the constraint list is oriented vertically with a line break after the where keyword and a line break after the final constraint.\nFunctions Calls # The followings are both good, choose one and stick to it consistently.\n// good let index = index( of: veryLongElementVariableName, in: aCollectionOfElementsThatAlsoHappensToHaveALongName) // good let index = index( of: veryLongElementVariableName, in: aCollectionOfElementsThatAlsoHappensToHaveALongName ) Control Flow Statements # // bad if cond1() \u0026amp;\u0026amp; muchlongerCond2() \u0026amp;\u0026amp; shortCond3() { doSomething() } // good if cond1() \u0026amp;\u0026amp; muchlongerCond2() \u0026amp;\u0026amp; shortCond3() { doSomething() } // bad guard let value = returnValue() let value2 = returnValue2() else { doSomething() } // good guard let value = returnValue() let value2 = returnValue2() else { doSomething() } Other Expressions # When there are multiple continuation lines, indentation may be varied in increments of +2 as needed.\n// bad let result = anExpression + thatIsMadeUpOf * aLargeNumber + ofTerms / andTherefore % mustBeWrapped + ( andWeWill - keepMakingItLonger * soThatWeHave / aContrivedExample) // good let result = anExpression + thatIsMadeUpOf * aLargeNumber + ofTerms / andTherefore % mustBeWrapped + ( andWeWill - keepMakingItLonger * soThatWeHave / aContrivedExample) Horizontal Whitespace # Here is common convention in most languages.\n// bad if(x==0 \u0026amp;\u0026amp; y==0) || z==0 { } // good if (x == 0 \u0026amp;\u0026amp; y == 0) || z == 0 { } // bad let nonNegativeCubes = numbers.map { $0 * $0 * $0 }.filter { $0 \u0026gt;= 0 } // good let nonNegativeCubes = numbers.map { $0 * $0 * $0 } .filter { $0 \u0026gt;= 0 } // bad func sum(_ numbers: [Int])-\u0026gt;Int { // ... } // good func sum(_ numbers: [Int]) -\u0026gt; Int { // ... } // bad for number in 1 ... 5 { // ... } let substring = string[index ..\u0026lt; string.endIndex] // good for number in 1...5 { // ... } let substring = string[index..\u0026lt;string.endIndex] // bad let numbers = [1,2,3] let numbers = [1 ,2 ,3] let numbers = [1 , 2 , 3] // good let numbers = [1, 2, 3] // bad struct HashTable : Collection { // ... } struct AnyEquatable\u0026lt;Wrapped : Equatable\u0026gt; : Equatable { // ... } // good struct HashTable: Collection { // ... } struct AnyEquatable\u0026lt;Wrapped: Equatable\u0026gt;: Equatable { // ... } Horizontal Alignment # // bad struct DataPoint { var value: Int var primaryColor: UIColor } // good struct DataPoint { var value: Int var primaryColor: UIColor } Naming # Clarity # Include all the words needed to avoid ambiguity.\nProper labeling can effectively reduce ambiguity.\n// bad extension List { public mutating func remove(position: Index) -\u0026gt; Element } friends.remove(x) // unclear: are we removing x? // good extension List { public mutating func remove(at position: Index) -\u0026gt; Element } friends.remove(at: x) Omit needless words.\n// bad public mutating func removeElement(_ member: Element) -\u0026gt; Element? allViews.removeElement(cancelButton) // good public mutating func remove(_ member: Element) -\u0026gt; Element? allViews.remove(cancelButton) The naming removeElement is bad since the word Element doesn\u0026rsquo;t increase the readibility.\nOccasionally, it is necessary to repeat type information to avoid ambituity. However, in general it is better to use a word that describes a parameter\u0026rsquo;s role rather than its type.\nName variables, parameters, and associated types according to their roles.\n// bad var string = \u0026#34;Hello world\u0026#34; protocol ViewController { associatedtype ViewType: View } class ProductLine { func restock(from widgetFactory: WidetFactory) } // good var greeting = \u0026#34;Hello world\u0026#34; protocol ViewController { associatedtype ContentView: View } class ProductLine { func restock(from supplier: WidetFactory) } Compensate for weak type information.\nTo achieve clarity, precede each weakly typed parameter with a noun describing its role.\n// bad func add(_ observer: NSObject, for keyPath: String) grid.add(self, for: graphics) // vague // good func addObserver(_ observer: NSObject, forKeyPath path: String) grid.addObserver(self, forKeyPath: graphics) // clear Class prefixes are not needed.\n// bad class MAUICollectionViewController: UICollectionViewController { ... } // good class UICollectionViewController { ... } Why? Because what you\u0026rsquo;ve declared is declared in current module, which is your current target. And UICollectionViewController from UIKit is declared in UIKit module.\nHow to use it within current module?\n// good var customController = UICollectionViewController() // your custom class var uikitController = UIKit.UICollectionViewController() // class from UIKit When creating custom delegate methods, an unnamed first parameter should be the delegate source.\n// bad func didSelectName(namePicker: NamePickerViewController, name: String) func namePickerShouldReload() -\u0026gt; Bool // good func namePickerView(_ namePickerView: NamePickerView, didSelectName name: String) func namePickerViewShouldReload(_ namePickerView: NamePickerView) -\u0026gt; Bool Use type infered context to write shorter, clean code.\n// bad let selector = #selector(ViewController.viewDidLoad) view.backgroundColor = UIColor.yellow let toView = context.view(forKey: UITransitionContextViewKey.to) let view = UIView(frame: CGRect.zero) // good let selector = #selector(viewDidLoad) view.backgroundColor = .yellow let toView = context.view(forKey: .to) let view = UIView(frame: .zero) Generic type parameters should be descriptive, UpperCamelCase names.\nWhen a type name doesn\u0026rsquo;t have a meaningful relationship or role, use a traditional single uppercase letter such as T, U, or V.\n// bad struct Stack\u0026lt;T\u0026gt; { ... } func write\u0026lt;target: OutputStream\u0026gt;(to target: inout target) func swap\u0026lt;Thing\u0026gt;(_ a: inout Thing, _ b: inout Thing) // good struct Stack\u0026lt;Element\u0026gt; { ... } func write\u0026lt;Target: OutputStream\u0026gt;(to target: inout Target) func swap\u0026lt;T\u0026gt;(_ a: inout T, _ b: inout T) If a computed property is read-only, omit the get clause.\n// bad var area: Double { get { return width * height } } // good var area: Double { return width * height } Use of final can sometimes clarify your intent and is worth the cost. In the below example, Box has a particular purpose and customization in a derived class is not intended. Marking it final makes that clear.\nfinal class Box\u0026lt;T\u0026gt; { let value: T init(_ value: T) { self.value = value } } Fluency # Prefer grammatical English phrases.\n// bad x.insert(y, position: z) x.subViews(color: y) x.nounCapitalize() // good x.insert(y, at: z) // x, insert y at z x.subViews(havingColor: y) // x\u0026#39;s subviews having color y x.capitalizingNouns() // x, capitalizing nouns Begin names of factory methods with \u0026ldquo;make\u0026rdquo;.\n// bad newIterator() // good makeIterator() The first argument to initializer and factory methods calls should not form a phrase.\n// bad let foreground = Color(havingRGBValuesRed: 32, green: 64, andBlue: 128) let newPart = factory.makeWidget(havingGearCount: 42, andSpindleCount: 14) let ref = Link(to: destination) // good let foreground = Color(red: 32, green: 64, blue: 128) let newPart = factory.makeWidget(gears: 42, spindles: 14) let ref = Link(target: destination) Name Mutating/Nonmutating method pairs consistently.\nPrefer to name the nonmutating variant using the verb\u0026rsquo;s past participle (usually appending \u0026ldquo;ed\u0026rdquo;).\n// good // mutating mutating func reverse() x.reverse() // nonmutating: V-ed func reversed() -\u0026gt; Self let y = x.reversed() Name the nonmutating variant using the verb\u0026rsquo;s present participle, by appending \u0026ldquo;ing.\u0026rdquo;\n// good // mutating mutating func stripNewlines() s.stripNewlines() // nonmutating: V-ing func strippingNewlines() -\u0026gt; String let oneLine = t.strippingNewlines() When the operation is naturally described by a noun, use the noun for the nonmutating method and apply the \u0026ldquo;form\u0026rdquo; prefix to name its mutating counterpart.\n// good // mutating: form + N y.formUnion(z) c.formSuccessor(\u0026amp;i) // nonmutating x = y.union(z) j = c.successor(i) Uses of Boolean methods and properties should read as assertions about the receiver when the use is nonmutating.\n// good x.isEmpty line1.intersects(line2) Protocols that describe what something is should read as nouns (e.g. Collection).\nProtocols that describe a capability should be named using the suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).\nThe names of other types, properties, variables, and constants should read as nouns.\nTerminology # Use US English spelling to match Apple\u0026rsquo;s API.\n// bad let colour = \u0026#34;yellow\u0026#34; // good let color = \u0026#34;yellow\u0026#34; Avoid obscure terms.\nDon\u0026rsquo;t say \u0026ldquo;epidermis\u0026rdquo; if \u0026ldquo;skin\u0026rdquo; will serve your purpose.\nAvoid abbreviations.\nHowever, don\u0026rsquo;t say verticalPositionOnUnitCircleAtOriginOfEndOfRadiusWithAngle(x) since sin(x) has been in common use.\nConventions # General Conventinos # Document the complexity of any computed property that is not O(1).\nPrefer methods and properties to free functions.\n// When there\u0026#39;s no obvious self min(x, y, z) // When the function is an unconstrained generic print(x) // When function syntax is part of the established domain notation sin(x) Follow case convention.\nNames of types and protocols are UpperCamelCase. Everything else if lowerCamelCase. Acronyms and initialisms that commonly appear as all upper case in American English should be uniformly up- or down-cased according to case conventions:\n// good var utf8Bytes: [UTF8.CodeUnit] var isRepresentableAsASCII = true var userSMTPServer: SecureSMTPServer Methods can share a base name.\nOverloading is good if the methods do essentially the same things.\nThe following three all do the same things:\n// good extension Shape { func contains(_ other: Point) -\u0026gt; Bool { ... } func contains(_ other: Shape) -\u0026gt; Bool { ... } func contains(_ other: LineSegment) -\u0026gt; Bool { ... } } And since geometric types and collections are separate domains, this is also fine in the same program:\n// good extension Collection where Element: Equatable { func contains(_ sought: Element) -\u0026gt; Bool { ... } } However, these index methods have different semantics, and should have been named differently:\n// bad extension Database { // Rebuilds the database\u0026#39;s search index func index() { ... } // Returns the `n`th row in the given table. func index(_ n: Int, inTable: TableID) -\u0026gt; TableRow { ... } } Avoid \u0026ldquo;overloading on return type\u0026rdquo;:\n// bad extension Box { func value() -\u0026gt; Int? { ... } func value() -\u0026gt; String? { ... } } Parameters # Choose parameter names to serve documentation.\n// bad // Return an `Array` containing the elements of `self` // that satisfy `includedInResult`. func filter(_ includedInResult: (Element) -\u0026gt; Bool) -\u0026gt; [Generator.Element] // Replace the range of elements indicated by `r` with // the contents of `with`. mutating func replaceRange(_ r: Range, with: [E]) // good // Return an `Array` containing the elements of `self` // that satisfy `predicate`. func filter(_ predicate: (Element) -\u0026gt; Bool) -\u0026gt; [Generator.Element] // Replace the given `subRange` of elements with `newElements`. mutating func replaceRange(_ subRange: Range, with newElements: [E]) Take advantage of defaulted parameters.\n// bad let order = lastName.compare(royalFamilyName, options: [], range: nil, locale: nil) // good let order = lastName.compare(royalFamilyName) Prefer to locate parameters with defaults toward the end.\nArgument Labels # Omit all labels when arguments can\u0026rsquo;t be usefully distinguished.\n// good min(number1, number2) zip(sequence1, sequence2) In initializers that perform value preserving type conversions, omit the first argument label.\n// good Int64(someUInt32) When the first argument forms part of a prepositional phrase, give it an argument label.\n// good x.removeBoxes(havingLength: 12) An exception arises when the first two arguments represent parts of a single abstraction:\n// bad a.move(toX: b, y: c) a.fade(fromRed: b, green: c, blue: d) // good a.moveTo(x: b, y: c) a.fadeFrom(red: b, green: c, blue: d) Otherwise, if the first argument forms part of a grammatical phrase, omit its label.\n// good x.addSubview(y) // bad view.dismiss(false) // Don\u0026#39;t dismiss? Dismiss a Bool? words.split(12) // Split the number 12? // good view.dismiss(animated: false) let text = words.split(maxSplits: 12) let studentByName = students.sorted(isOrderedBefore: Student.namePrecedes) Label all other argument\nCode Organization # Use extensions to organize your code into logical blocks of functionality. Each extension should be set off with a // MARK: - comment to keep things well-organized.\nProtocol Conformance # In particular, when adding protocol conformance to a model, prefer adding a separate extension for the protocol methods.\nThis keeps the related methods grouped together with the protocol and can simplify instructions to add a protocol to a class with its associated methods.\n// bad class MyViewController: UIViewController, UITableViewDataSource, UIScrollViewDelegate { // all methods } // good class MyViewController: UIViewController { // class stuff here } // MARK: - UITableViewDataSource extension MyViewController: UITableViewDataSource { // table view data source methods } // MARK: - UIScrollViewDelegate extension MyViewController: UIScrollViewDelegate { // scroll view delegate methods } Comments # When they are needed, use comments to explain why a particular piece of code does something. Comments must be kept up-to-date or deleted.\nAvoid block comments inline with code, as the code should be as self-documenting as possible. Exception: This does not apply to those comments used to generate documentation.\nAvoid the use of C-style comments (/* ... */). Prefer the use of double- (//) or triple-slash (///).\nFunction Declarations # Keep short function declarations on one line including the opening brace.\n// good func reticulateSplines(spline: [Double]) -\u0026gt; Bool { // code goes here } For functions with lot\u0026rsquo;s of parameters, put each parameter on a new line and add an extra indent on subsequent lines.\n// good func reticulateSplines( spline: [Double], adjustmentFactor: Double, translateConstant: Int, comment: String ) -\u0026gt; Bool { // code goes here } Don\u0026rsquo;t use (Void) to represent the lack of an input; simply use (). Use Void instead of () for closure and function outputs.\n// bad func updateConstraints() -\u0026gt; () { ... } typealias CompletionHandler = (result) -\u0026gt; () // good func updateConstraints() -\u0026gt; Void { ... } typealias CompletionHandler = (result) -\u0026gt; Void Function Calls # Mirror the style of function declarations at call sites.\n// good let success = reticulateSplines(splines) If the call site must be wrapped, put each parameter on a new line, indented one additional level.\n// good let success = reticulateSplines( spline: splines, adjustmentFactor: 1.3, translateConstant: 2, comment: \u0026#34;normalize the display\u0026#34;) Closure Expressions # For single-expression closures where the context is clear, use implicit returns.\n// good attendeeList.sort { a, b in a \u0026gt; b } Types # Constants are defined using the let keyword and variables with the var keyword. Always use let instead of var if the value of the variable will not change.\nTip: A good technique is to define everything using let and only change it to var if the compiler complains!\nTo declare a type property as a constant simply use static let.\n// bad let e = 2.7182818 // pollutes global namespace let root2 = 1.414 let hypotenuse = side * root2 // what is root2? // good enum Math { static let e = 2.7182818 static let root2 = 1.414 } let hypotenuse = side * Math.root2 Optionals # Declare variables and function return types as optional with ? where a nil value is acceptable.\nUse implicitly unwrapped types declared with ! only for instance variables that you know will be initialized later before use, such as subviews that will be set up in viewDidLoad(). Prefer optional binding to implicitly unwrapped optionals in most other cases.\nWhen accessing an optional value, use optional chaining if the value is only accessed once or if there are many optionals in the chain:\ntextContainer?.textLabel?.setNeedsDisplay() Use optional binding when it\u0026rsquo;s more convenient to unwrap once and perform multiple operations:\nif let textContainer = textContainer { ... } When naming optional variables and properties, avoid naming them like optionalString or maybeView since their optional-ness is already in the type declaration.\nFor optional binding, shadow the original name whenever possible rather than using names like unwrappedView or actualLabel.\n// bad var optionalSubview: UIView? var volume: Double? if let unwrappedSubview = optionalSubview { if let realVolume = volume { // do something with unwrappedSubview and realVolume } } // another example UIView.animate(withDuration: 2.0) { [weak self] in guard let strongSelf = self else { return } strongSelf.alpha = 1.0 } // good var subview: UIView? var volume: Double? // later on... if let subview = subview, let volume = volume { // do something with unwrapped subview and volume } // another example UIView.animate(withDuration: 2.0) { [weak self] in guard let self = self else { return } self.alpha = 1.0 } Lazy Initialization # Consider using lazy initialization for finer grained control over object lifetime. This is especially true for UIViewController that loads views lazily. You can either use a closure that is immediately called { }() or call a private factory method. Example:\nlazy var locationManager = makeLocationManager() private func makeLocationManager() -\u0026gt; CLLocationManager { let manager = CLLocationManager() manager.desiredAccuracy = kCLLocationAccuracyBest manager.delegate = self manager.requestAlwaysAuthorization() return manager } Notes:\n[unowned self] is not required here. A retain cycle is not created. Location manager has a side-effect for popping up UI to ask the user for permission so fine grain control makes sense here. Type Inference # Prefer compact code and let the compiler infer the type for constants or variables of single instances. Type inference is also appropriate for small, non-empty arrays and dictionaries. When required, specify the specific type such as CGFloat or Int16.\n// bad let message: String = \u0026#34;Click the button\u0026#34; let currentBounds: CGRect = computeViewBounds() var names = [String]() // good let message = \u0026#34;Click the button\u0026#34; let currentBounds = computeViewBounds() var names = [\u0026#34;Mic\u0026#34;, \u0026#34;Sam\u0026#34;, \u0026#34;Christine\u0026#34;] let maximumWidth: CGFloat = 106.5 Type Annotation for Empty Arrays and Dictionaries # For empty arrays and dictionaries, use type annotation. (For an array or dictionary assigned to a large, multi-line literal, use type annotation.)\n//bad var names = [String]() var lookup = [String: Int]() // good var names: [String] = [] var lookup: [String: Int] = [:] NOTE: Following this guideline means picking descriptive names is even more important than before.\nSyntactic Sugar # Prefer the shortcut versions of type declarations over the full generics syntax.\n// bad var deviceModels: Array\u0026lt;String\u0026gt; var employees: Dictionary\u0026lt;Int, String\u0026gt; var faxNumber: Optional\u0026lt;Int\u0026gt; // good var deviceModels: [String] var employees: [Int: String] var faxNumber: Int? Functions vs Methods # Free functions, which aren\u0026rsquo;t attached to a class or type, should be used sparingly. When possible, prefer to use a method instead of a free function. This aids in readability and discoverability.\nFree functions are most appropriate when they aren\u0026rsquo;t associated with any particular type or instance.\n// bad let sorted = mergeSort(items) // hard to discover launch(\u0026amp;rocket) // good let sorted = items.mergeSorted() // easily discoverable rocket.launch() // acts on the model Free Function Exceptions\nlet tuples = zip(a, b) // feels natural as a free function (symmetry) let value = max(x, y, z) // another free function that feels natural Memory Management # Code (even non-production, tutorial demo code) should not create reference cycles. Analyze your object graph and prevent strong cycles with weak and unowned references. Alternatively, use value types (struct, enum) to prevent cycles altogether.\nExtending object lifetime # Extend object lifetime using the [weak self] and guard let self = self else { return } idiom. [weak self] is preferred to [unowned self] where it is not immediately obvious that self outlives the closure. Explicitly extending lifetime is preferred to optional chaining.\n// bad // might crash if self is released before response returns resource.request().onComplete { [unowned self] response in let model = self.updateModel(response) self.updateUI(model) } // bad // deallocate could happen between updating the model and updating UI resource.request().onComplete { [weak self] response in let model = self?.updateModel(response) self?.updateUI(model) } // good resource.request().onComplete { [weak self] response in guard let self = self else { return } let model = self.updateModel(response) self.updateUI(model) } Access Control # Full access control annotation in tutorials can distract from the main topic and is not required. Using private and fileprivate appropriately, however, adds clarity and promotes encapsulation. Prefer private to fileprivate; use fileprivate only when the compiler insists.\nOnly explicitly use open, public, and internal when you require a full access control specification.\nUse access control as the leading property specifier. The only things that should come before access control are the static specifier or attributes such as @IBAction, @IBOutlet and @discardableResult.\n// bad fileprivate let message = \u0026#34;Great Scott!\u0026#34; class TimeMachine { lazy dynamic private var fluxCapacitor = FluxCapacitor() } // good private let message = \u0026#34;Great Scott!\u0026#34; class TimeMachine { private dynamic lazy var fluxCapacitor = FluxCapacitor() } Control Flow # Prefer the for-in style of for loop over the while-condition-increment style.\n// bad var i = 0 while i \u0026lt; 3 { print(\u0026#34;Hello three times\u0026#34;) i += 1 } // bad var i = 0 while i \u0026lt; attendeeList.count { let person = attendeeList[i] print(\u0026#34;\\(person) is at position #\\(i)\u0026#34;) i += 1 } // good for _ in 0..\u0026lt;3 { print(\u0026#34;Hello three times\u0026#34;) } for (index, person) in attendeeList.enumerated() { print(\u0026#34;\\(person) is at position #\\(index)\u0026#34;) } for index in stride(from: 0, to: items.count, by: 2) { print(index) } for index in (0...3).reversed() { print(index) } Ternary Operator # The Ternary operator, ?: , should only be used when it increases clarity or code neatness. A single condition is usually all that should be evaluated. Evaluating multiple conditions is usually more understandable as an if statement or refactored into instance variables. In general, the best use of the ternary operator is during assignment of a variable and deciding which value to use.\n// bad result = a \u0026gt; b ? x = c \u0026gt; d ? c : d : y // good let value = 5 result = value != 0 ? x : y let isHorizontal = true result = isHorizontal ? x : y Multi-line String Literals # When building a long string literal, you\u0026rsquo;re encouraged to use the multi-line string literal syntax. Open the literal on the same line as the assignment but do not include text on that line. Indent the text block one additional level.\n// bad let message = \u0026#34;\u0026#34;\u0026#34;You cannot charge the flux \\ capacitor with a 9V battery. You must use a super-charger \\ which costs 10 credits. You currently \\ have \\(credits) credits available. \u0026#34;\u0026#34;\u0026#34; // good let message = \u0026#34;\u0026#34;\u0026#34; You cannot charge the flux \\ capacitor with a 9V battery. You must use a super-charger \\ which costs 10 credits. You currently \\ have \\(credits) credits available. \u0026#34;\u0026#34;\u0026#34; Special Instructions # Label tuple members and name closure parameters\nTake extra care with unconstrained polymorphism\n// bad struct Array { // Inserts `newElement` at `self.endIndex`. public mutating func append(_ newElement: Element) // Inserts the contents of `newElements`, in order, at // `self.endIndex`. public mutating func append(_ newElements: S) where S.Generator.Element == Element } var values: [Any] = [1, \u0026#34;a\u0026#34;] values.append([2, 3, 4]) // [1, \u0026#34;a\u0026#34;, [2, 3, 4]] or [1, \u0026#34;a\u0026#34;, 2, 3, 4]? // good struct Array { // Inserts `newElement` at `self.endIndex`. public mutating func append(_ newElement: Element) // Inserts the contents of `newElements`, in order, at // `self.endIndex`. public mutating func append(contentsOf newElements: S) where S.Generator.Element == Element } var values: [Any] = [1, \u0026#34;a\u0026#34;] values.append([2, 3, 4]) // it\u0026#39;s [1, \u0026#34;a\u0026#34;, [2, 3, 4]]! ","date":"26 May 2019","externalUrl":null,"permalink":"/posts/tech/swift-style-guide/","section":"Posts","summary":"","title":"Swift Style Guide","type":"posts"},{"content":"","date":"1 April 2019","externalUrl":null,"permalink":"/tags/anaconda/","section":"Tags","summary":"","title":"Anaconda","type":"tags"},{"content":" ÂâçË®Ä # Python 3 Â∑≤Á∂ìÈÄêÊº∏Âèñ‰ª£ Python 2ÔºåÊàêÁÇ∫ÊôÆÈÅçÈñãÁôºËÄÖÊâÄ‰ΩøÁî®ÁöÑË™ûË®ÄÔºå‰ΩÜÊúÄÂõßÁöÑÊòØÔºåÂæàÂ§öËÄÅËàäÁöÑÂ∞àÊ°à„ÄÅÁ≥ªÁµ±‰ªçÁÑ∂ÈÅãË°åËëóÁî± Python 2 ÊâÄÁ∑®ÊàêÁöÑÁí∞Â¢É‰∏≠ÔºåÊúâÊôÇÁÇ∫‰∫ÜÂú®ËàäÁâàÊú¨ÔºàPython 2Ôºâ‰∏≠ÈñãÁôºÔºåÂøÖÈúÄË¶ÅÊúâ‰∏ÄÂÄãÂæàÂ•ΩÁöÑ Áí∞Â¢ÉÊéßÂà∂ÊñπÂºè„ÄÇ\nAnaconda # ÂºïÁî®Á∂≠Âü∫ÁôæÁßë‰∏äÊúâÈóú Anaconda ÁöÑÊïò Ëø∞Ôºö\nAnaconda ÊòØ‰∏ÄÁ®Æ Python Ë™ûË®ÄÁöÑÂÖçË≤ªÂ¢ûÂÄºÈñãÊ∫êÁôºË°åÁâàÔºåÁî®ÊñºÈÄ≤Ë°åÂ§ßË¶èÊ®°Êï∏ÊìöËôïÁêÜÔºåÈ†êÊ∏¨ ÂàÜÊûêÔºåÂíåÁßëÂ≠∏Ë®àÁÆóÔºåËá¥ÂäõÊñºÁ∞°ÂåñÂåÖÁöÑÁÆ°ÁêÜÂíåÈÉ®ÁΩ≤„ÄÇAnaconda ‰ΩøÁî®ËªüÈ´îÂåÖÁÆ°ÁêÜÁ≥ªÁµ± Conda ÈÄ≤Ë°åÂåÖÁÆ°ÁêÜ„ÄÇ\n‰ΩøÁî® Anaconda ÂèØ‰ª•Âπ´ÊàëËß£Ê±∫‰ª•‰∏ãÂÖ©ÂÄãÂ§ßÂïèÈ°åÔºö\nÊèê‰æõ package managementÔºöÂäüËÉΩÈ°û‰ºº pip Êèê‰æõ virtual environmentÔºöËß£Ê±∫‰∫Ü Python Â§öÁâàÊú¨‰∏¶Â≠òÂïèÈ°å ‰Ω†ÂèØ‰ª•Âú®ÈÄôË£°‰∏ãËºâ macOS ÁöÑ Anaconda ÊúÄÊñ∞ÁâàÊú¨ÔºåÂÖ∂ÂÆÉ‰ΩúÊ•≠Á≥ªÁµ±‰πüËÉΩÂú®ÂàÜÈ†ÅÁï∂‰∏≠ÊâæÂà∞„ÄÇ\nÊõ¥Êñ∞Â•ó‰ª∂ # conda update --all Âª∫Á´ãÁí∞Â¢É # # Create the environment conda create --name python3 python=3.7 conda create --name python2 python=2.7 # Activate the environment source activate python3 # Linux/macOS activate python3 # Windows Êõ¥Â§öÁöÑÊåá‰ª§ÔºåÂèØ‰ª•Êü•Áúã\nconda -h ÁÆ°ÁêÜ packages # conda ÁöÑ package management ÊòØÂ∞ç pip ÂäüËÉΩÁöÑÊì¥ÂÖÖÔºåÂ¶ÇÊûúÂ∑≤Á∂ìÂïüÂãï‰∫ÜÊüêÂÄã Python Áí∞Â¢É Ôºå‰æøÂèØ‰ª•Âú®Ë©≤Áí∞Â¢ÉÈñãÂßãÂÆâË£ùÁ¨¨‰∏âÊñπÁöÑ packageÔºå‰æãÂ¶ÇÔºö\nconda install numpy # Install numpy package conda list # List all installed packages conda update numpy # Update numpy package conda remove numpy # Remove numpy package Ë®≠ÂÆöÈ†êË®≠ÁâàÊú¨ # macOS High Sierra ÂéüÂª†Â∞±È†êË®≠Ëá™Â∏∂ Python 2 ÁâàÊú¨Ôºå‰ΩçÁΩÆÂú® /System/Library/Frameworks/Python.framework/Versions/2.7ÔºåÊàëÂ∏åÊúõÈ†êË®≠ÁâàÊú¨ÊòØ Python 3\nexport PATH=\u0026#34;/usr/local/bin:$PATH\u0026#34; # Default path setting export PATH=\u0026#34;/Users/Jay/anaconda3/bin:$PATH\u0026#34; # Anaconda 3 Ëã•Â∞á Anaconda ÁöÑË∑ØÂæëÊîæÂú®‰∏ãÈù¢Ôºå‰ª£Ë°® Anaconda ÊúÉË¶ÜËìãÊéâÈ†êË®≠Ë∑ØÂæë Python 2 ÁöÑÁí∞Â¢ÉÔºå‰πü Â∞±ÊòØËã•‰Ω†ÁÅåÁöÑÁâàÊú¨Ôºà‰æãÂ¶ÇÔºö3.7.3)ÔºåÁï∂‰Ω†Âú® Terminal Âü∑Ë°åÔºö\n$ python Â∞±ÊúÉÁõ¥Êé•ÈÄ≤Âà∞ Anaconda Â∫ï‰∏ãÁöÑ Python 3.7.3 ÁöÑÁí∞Â¢É‰∫ÜÔºÅÂÖ∂ÂÆÉÁöÑË®≠ÂÆöÔºöÂ¶Ç pip Á≠â‰πüÈÉΩ ÊòØ„ÄÇ\n","date":"1 April 2019","externalUrl":null,"permalink":"/posts/tech/anaconda-setup/","section":"Posts","summary":"","title":"Anaconda ÂÆåÁæéËß£Ê±∫ Python 2 Âíå Python 3 ‰∏¶Â≠òÂïèÈ°å","type":"posts"},{"content":"","date":"1 April 2019","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"10 March 2019","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript","type":"tags"},{"content":" 7. ËßÄÂøµÂ∞èÂèÆÂöÄÔºöÂêçÁ®±/ÂÄºÈÖçÂ∞çËàáÁâ©‰ª∂ # Conceptual Aside: Name/Value Pairs \u0026amp; Objects\nName/Value Pair: A name which maps to a unique value.\nThe name may be defined more than once, but only can have one value in any given context. That value may be more name/value pairs.\nJS ‰∏≠ÁöÑÁâ©‰ª∂ÔºåÂñÆÁ¥îÁöÑÊòØ Key-Value ÁöÑÈóú‰øÇÔºåËÄåÁâ©‰ª∂‰∏≠‰πüÂèØ‰ª•ÂÜçÂåÖÂê´Áâ©‰ª∂ÔºåÂÉè Address ÂåÖÂê´ Apartment„ÄÇ\nconst Address = { Street: \u0026#34;Main\u0026#34;, Number: 100, Apartment: { Floor: 3, Number: 301, }, }; Object: a collection of name value pairs\n9. ÂÖ®ÂüüÁí∞Â¢ÉËàáÂÖ®ÂüüËÆäÊï∏ # The Global Environment \u0026amp; The Global Object\nJS ÈÉΩÊòØÂú®„ÄåExecution Context„Äç‰∏≠Âü∑Ë°åÁöÑÔºåËÄå global execution context ÊúÉÁÇ∫‰Ω†ÂâµÂª∫ÂÖ© ÂÄãÊù±Ë•øÔºö\nGlobal Object this ÊàëÂÄëÂèØ‰ª•ÈÄèÈÅé‰ª•‰∏ãÁöÑ‰ª£Á¢º‰æÜÂØ¶È©óÔºåÊàñÊòØÁõ¥Êé•Â∞á js ‰ª£Á¢ºÊâìÂú® Google Chrome ÁöÑ Console ‰∏≠ Ôºö\nindex.html\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;app.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; app.js\nÊòØÁöÑÔºåÊàëÂÄëÁöÑ app.js ÊòØÁ©∫ÁöÑÔºå‰ΩÜ JS engine ‰∏ÄÊ®£ÊúÉÂú®Ê≠§ËôïÂâµÂª∫‰∏ÄÂÄã global execution contextÔºåÊâÄ‰ª•Áï∂ÊàëÂÄëÂú® Console Êâì this Êàñ window ÊôÇÊúÉÂ¶Ç‰∏ãÊñπÊâÄÁ§∫Ôºö\n\u0026gt; this \u0026lt; Window {postMessage: f, blur: f, focus: f, close: f, parent: Window, ...} \u0026gt; window \u0026lt; Window {postMessage: f, blur: f, focus: f, close: f, parent: Window, ...} Ëã•ÊàëÂÄëË©¶ËëóÂØ´‰∏Ä‰∫õ‰ª£Á¢ºÂú® app.js ‰∏≠Ôºö\nÊ≥®ÊÑèÔºöËã•Áî® ES6 ‰πãÂæåÁöÑ const Êàñ let Âèñ‰ª£ var ÂÆ£ÂëäÂâá‰∏çÊúÉÊúâÊ≠§ÁèæË±°„ÄÇ\nvar a = \u0026#34;Hello World!\u0026#34;; function b() {} \u0026gt; a \u0026lt; \u0026#34;Hello World!\u0026#34; \u0026gt; window.a \u0026lt; \u0026#34;a\u0026#34; 10. Âü∑Ë°åÁí∞Â¢ÉÔºöÂâµÈÄ†ËàáÊèêÂçá # The Execution Context: Creation \u0026amp; 'Hoisting'\nÂú®Âêå‰∏ÄÂÄãÂü∑Ë°åÁí∞Â¢É‰∏≠ÔºåÊúÉÂÑ™ÂÖàÂ∞á‰ΩøÁî®Âà∞ÁöÑËÆäÊï∏Â≠òÂà∞Ë®òÊÜ∂È´î‰∏≠„ÄÇ\nb(); // Called b! console.log(a); // undefined var a = \u0026#34;Hello World!\u0026#34;; function b() { console.log(\u0026#34;Called b!\u0026#34;); } b() ÁöÑÂÖßÂÆπÊúÉÂÖàÂÑ™ÂÖàÂ≠òÈÄ≤Ë®òÊÜ∂È´îÂÖßÔºåÊâÄ‰ª•ÊàëÂÄëÂèØ‰ª•Âú®Á¨¨ 1 Ë°åÂÑ™ÂÖàÂëºÂè´Á¨¨ 5 Ë°åÁöÑ b()\nËÄåÂú®‰ΩøÁî®Á≠âËôüË≥¶ÂÄºÊôÇÔºåÂè™ÊúÉÂÖàÂ∞áËÆäÊï∏ÊîæËá≥Ë®òÊÜ∂È´îÔºåvar a = 'Hello World!; Âú®ÈÄôË£°Âè™ÊúÉ ÂÖàÂ∞á a ÊîæÂÖ•Ë®òÊÜ∂È´î‰∏≠ÔºåÂÜç‰æùÂü∑Ë°åÈ†ÜÂ∫èÂ∞áÁ≠âËôüÁöÑÂÄºÂ°´ÂÖ•„ÄÇ\nÂèØÊÉ≥ÂÉè‰ª£Á¢ºËÆäÊàêÈÄôÊ®£Ôºö\nvar a; function b() { console.log(\u0026#34;Called b!\u0026#34;); } b(); // Called b! console.log(a); // undefined a = \u0026#34;Hello World!\u0026#34;; var a Ë¢´ÁßªÂà∞ÊúÄÂâçÈù¢Ôºå‰ΩÜÈÇÑÊú™Ë≥¶ÂÄºÔºåÊâÄ‰ª• JS engine ÊúÉÂú®‰∏ÄÈñãÂßãË≥¶Êñº a = undefinedÔºàÊâÄÊúâÂÄº‰∏ÄÈñãÂßãÈÉΩÊòØ undefinedÔºâÔºåb() ÂâáÊòØÈÄ£ÂÖßÂÆπÈÉΩÁßªÂà∞ÂâçÈù¢Âéª‰∫Ü „ÄÇ\nÁ∏ΩÁµê‰∏Ä‰∏ãÈÄôÁØÄÔºö\nÂü∑Ë°åÁí∞Â¢ÉÊúÉÂàÜÊàêÂÖ©ÂÄãÈöéÊÆµË¢´ÂâµÈÄ†Ôºö\nCreation Phase Âú®Ë®òÊÜ∂È´î‰∏≠ÔºåË®≠ÂÆö Global Object Âú®Ë®òÊÜ∂È´î‰∏≠ÔºåË®≠ÂÆö this Ë®≠ÂÆö Outer Environment Ë®≠ÂÆöÂ•ΩËÆäÊï∏ÂíåÂáΩÊï∏ÁöÑË®òÊÜ∂È´îÁ©∫ÈñìÔºàHoistingÔºâ Execution Phase Line by line Âü∑Ë°å‰ª£Á¢º Ë®ªÔºöHoisting ‰∏ç‰ª£Ë°® JS engine ÁúüÁöÑÊè∂Âãï‰∫Ü‰Ω†ÁöÑ‰ª£Á¢ºÔºåËÄåÊòØÂÖàÂú® Creation Phase ÊôÇÔºåÂÖà Ë®≠ÂÆöÂ•ΩËÆäÊï∏ÂíåÂáΩÊï∏ÁöÑË®òÊÜ∂È´îÁ©∫Èñì„ÄÇ\n11. ËßÄÂøµÂ∞èÂèÆÂöÄÔºöJavaScript Ëàá \u0026lsquo;undefined\u0026rsquo; # Conceptual Aside: JavaScript \u0026amp; undefined\nundefined ÊòØ JS ÁöÑÁâπÊÆäÂÄºÔºåË°®Ë©≤ÂÄºÊúâË¢´Â≠òÂú®Ë®òÊÜ∂È´î‰∏≠Ôºå‰ΩÜÁï∂Êú™Ë≥¶ÂÄº\nnot defined ‰ª£Ë°®Ë©≤ÂÄº‰∏çÂ≠òÂú®Ë®òÊÜ∂È´î‰∏≠\nvar a; if (a === undefined) { console.log(\u0026#34;a is undefined\u0026#34;); // a is undefined } else { console.log(\u0026#34;a is defined\u0026#34;); } ÊàëÂÄëÂèØ‰ª•ÂàªÊÑèËÆì a = undefinedÔºå‰ΩÜÈÄôÊòØ‰∏ÄÂÄã bad practiceÔºåÊáâË©≤ËÆì undefined Â∞±‰ª£ Ë°®ÈÇÑÊ≤íË≥¶ÂÄºÁöÑËÆäÊï∏„ÄÇ\n12. Âü∑Ë°åÁí∞Â¢ÉÔºöÁ®ãÂºèÂü∑Ë°å # The Execution Context: Code Execution\nÂú® 10. ÊàëÂÄëÊèêÂà∞‰∫ÜÂü∑Ë°åÁí∞Â¢ÉÁöÑÁ¨¨‰∏ÄÊ≠•È©üÊòØ creationÔºåÁ¨¨‰∫åÊ≠•È©üÂæàÁ∞°ÂñÆÔºåJS engine Â∞±‰∏ÄË°å ‰∏ÄË°åÁöÑÂü∑Ë°å‰Ω†ÁöÑ‰ª£Á¢º„ÄÇ\n13. ËßÄÂøµÂ∞èÂèÆÂöÄÔºöÂñÆÂü∑Ë°åÁ∑í„ÄÅÂêåÊ≠•Âü∑Ë°å # Conceptual Aside: Single Threaded, Synchronous Execution\nSingle Threaded: one command at a time.\nUnder the hood of the browser, maybe not.\nSynchronous: one at a time and in order.\n14. ÂáΩÊï∏ÂëºÂè´ËàáÂü∑Ë°åÂ†Ü # Function Invocation \u0026amp; The Execution Stack\nÈÄôÁ®ãÂºèÁöÑÊôÆ‰∏ñÂÉπÂÄºÔºåÂ∞±‰∏çÂ§öÂÅöË¥ÖËø∞„ÄÇ\n15. ÂáΩÊï∏„ÄÅÁí∞Â¢ÉËàáËÆäÊï∏Áí∞Â¢É # Functions, Context, \u0026amp; Variable Environments\nVariable Environment: where the variables live.\nand how they related to each other in memory.\nfunction b() { var myVar; console.log(myVar); } function a() { var myVar = 2; console.log(myVar); b(); } var myVar = 1; console.log(myVar); // 1 a(); // 2 \\n undefined console.log(myVar); // 1 Ê≠§‰æãÂ≠êÂíåÂ§ßÂ§öÊï∏ÁöÑÁ®ãÂºèË™ûË®Ä‰∏ÄÊ®£ÔºåÊØèÂÄãËÆäÊï∏ÊúÉÊúâ‰ªñÁöÑ„ÄåÂüü„Äç„ÄÇ\n16. ÁØÑÂúçÈèà # The Scope Chain\nÊé•‰∏ã‰æÜÈÄôÂÄã‰æãÂ≠êÔºåÊàëÂÄëÂ∞á b() Ë£°Èù¢ÁöÑ var myVar Ë®ªËß£ÊéâÔºåÈÄôÊôÇÁ¨¨ 2 Ë°åÊúÉÊòØ not defined ÂóéÔºü\nfunction b() { // lexically (phsically) sits at the global level console.log(myVar); } function a() { var myVar = 2; b(); } var myVar = 1; a(); // 1 ‰∏çÊòØÁöÑÔºåÁî±Êñº lexical environment ÁöÑÈóú‰øÇÔºåËÄå b() „Äålexically sits at the global level„ÄçÔºåÂõ†Ê≠§ b() ÁöÑ \u000freference to outer environment ÊúÉÊåáÂêë Global Execution ContextÔºåÊâÄ‰ª•Âú®Âü∑Ë°å b() ÊôÇÔºåÁï∂ÊàëÂÄëÂú® b() ÁöÑÂü∑Ë°åÁí∞Â¢É‰∏≠Êâæ‰∏çÂà∞ myVar ÂÆöÁæ©ÊôÇÔºå Â∞±ÊúÉÂà∞Â§ñÈÉ®Áí∞Â¢ÉÊâæÔºàb() ÁöÑÂ§ñÈÉ®Áí∞Â¢ÉÊòØ globalÔºâÔºåÈÄôÂ∞±ÊòØ Scope Chain ÁöÑÊ¶ÇÂøµ„ÄÇ\nfunction a() { function b() { console.log(myVar); } var myVar = 2; b(); } var myVar = 1; a(); // 2 17. ÁØÑÂúç„ÄÅES6 Ëàá let # Scope, ES6, \u0026amp; let\nScope: where a variable is available in your code.\nand if it\u0026rsquo;s truly the same variable, or a new copy.\n18. ÈóúÊñºÁï∞Ê≠•ÂõûÂëº # What About Asynchronous Callbacks?\nAsynchronous: more than one at a time.\nJS engine ÊòØÂñÆÂü∑Ë°åÁ∑í„ÄÅÂêåÊ≠•ÁöÑÔºåÈÇ£ÊòØÂ¶Ç‰ΩïÈÅîÂà∞Áï∞Ê≠•Âü∑Ë°åÁöÑÊïàÊûúÂë¢Ôºü\nÂú®ÁÄèË¶ΩÂô®‰∏≠Èô§‰∫ÜÂü∑Ë°å JS engine Â§ñÔºåÈÇÑÊúÉÂü∑Ë°å rendering enginer„ÄÅHTTP request Á≠â„ÄÇ\nÈõñÁÑ∂ JS engine Êú¨Ë∫´ÊòØÂêåÊ≠•ÁöÑÔºå‰ΩÜÂÖ∂‰ªñ‰∫ã‰ª∂ÊòØÂèØ‰ª•Áï∞Ê≠•Âü∑Ë°åÁöÑÔºàÈÄô‰∏¶‰∏çÊòØÁúüÁöÑÁï∞Ê≠•ÔºåËÄåÊòØ ÁÄèË¶ΩÂô®Áï∞Ê≠•ÁöÑÊääÊù±Ë•øÊîæÂà∞‰∫ã‰ª∂‰ΩáÂàóÔºàEvent QueueÔºâÔºå‰ΩÜÂéüÊú¨ÁöÑÁ®ãÂºè‰ªçÁÑ∂ÁπºÁ∫å‰∏ÄË°å‰∏ÄË°åÂü∑Ë°å „ÄÇ\nÁï∂Âü∑Ë°åÂÆåÂæåÔºåÂü∑Ë°åÂ†ÜÁ©∫‰∫ÜÔºåÊâçÊúÉËôïÁêÜ‰∫ã‰ª∂„ÄÇ\n‰æÜÁúãÁúã‰ª•‰∏ãÁöÑ‰æãÂ≠êÔºö\nfunction waitThreeSeconds() { const ms = 3000 + new Date().getTime(); while (new Date() \u0026lt; ms) {} console.log(\u0026#34;finished function\u0026#34;); } function clickHandler() { console.log(\u0026#34;click event!\u0026#34;); } document.addEventListener(\u0026#34;click\u0026#34;, clickHandler); waitThreeSeconds(); console.log(\u0026#34;finished execution\u0026#34;); Áï∂Âú®Âü∑Ë°å waitThreeSeconds() ÊôÇÔºåÁÑ∂ÂæåÈªûÈ†ÅÈù¢ÔºàdocumentÔºâÔºåË©¶ËëóÂéªËß∏Áôº clickHandler() ÊúÉÁôºÁîü‰ªÄÈ∫º‰∫ãÔºü\n\u0026gt; fninished function \u0026gt; finished execution \u0026gt; click event! ÊàëÁúãÁôºÁèæ click event! Âú®ÊúÄÂæåÊâçÊúÉÂç∞Âá∫‰æÜÔºåÂõ†ÁÇ∫ JS engine Áõ¥Âà∞Âü∑Ë°åÂ†ÜÊòØÁ©∫ÁöÑÊâçÊúÉÁúã‰∫ã ‰ª∂‰ΩáÂàóÔºåÈÄôË°®Á§∫Èï∑ÊôÇÈñìÂáΩÊï∏ÂèØ‰ª•Âπ≤Êìæ‰∫ã‰ª∂ÔºåÈÄôÂ∞±ÊòØ JS Â¶Ç‰ΩïÂêåÊ≠•ËôïÁêÜÂú®ÁÄèË¶ΩÂô®Âà•ËôïÁï∞Ê≠•ÁöÑ‰∫ã ‰ª∂ÁôºÁîü„ÄÇ\nJS ‰∏çÊñ∑Âü∑Ë°åÂéüÂÖàÁöÑÁ®ãÂºèÔºåÁï∂ÂÖ®ÈÉ®ÂÆåÊàêÂæåÔºåÂÆÉÊúÉÂà∞‰∫ã‰ª∂‰ΩáÂàóÁúãÁúãÔºå‰∏¶‰∏çÂÅúÁöÑÊ™¢Êü•Ôºàcontinous checkÔºâ„ÄÇ\n","date":"10 March 2019","externalUrl":null,"permalink":"/posts/js/js-weird/","section":"Posts","summary":"","title":"ÂÖãÊúç JS ÁöÑÂ•áÊÄ™ÈÉ®ÂàÜ - 2. Âü∑Ë°åÁí∞Â¢ÉËàáË©ûÂΩôÁí∞Â¢É","type":"posts"},{"content":"","date":"13 December 2018","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"13 December 2018","externalUrl":null,"permalink":"/categories/chinese/","section":"Categories","summary":"","title":"Chinese","type":"categories"},{"content":"","date":"13 December 2018","externalUrl":null,"permalink":"/tags/iclr/","section":"Tags","summary":"","title":"ICLR","type":"tags"},{"content":"","date":"13 December 2018","externalUrl":null,"permalink":"/categories/paper/","section":"Categories","summary":"","title":"Paper","type":"categories"},{"content":"","date":"13 December 2018","externalUrl":null,"permalink":"/tags/paper/","section":"Tags","summary":"","title":"Paper","type":"tags"},{"content":" Paper Link\nExperience replay ‰ΩøÂæó RL agents ËÉΩÂ§†Ë®ò‰Ωè‰∏¶ÈáçÁî®ÈÅéÂéªÁöÑÁ∂ìÈ©ó„ÄÇ\n‰ª•ÂâçÁöÑÂÅöÊ≥ïÊòØÔºåÂæû replay memory ‰∏≠ÂùáÂãªÁöÑ sample experience transition„ÄÇ‰ΩÜÈÄôÁ®ÆÊñπÊ≥ï Âè™Ê†πÊìö‰ªñÂÄëÊúÄÂàùË¢´È´îÈ©óÂà∞ÁöÑÈ†ªÁéáÔºåËÄå‰∏çÁÆ°ÂÆÉÂÄëÁöÑÈáçË¶ÅÊÄß„ÄÇ\nÂú®Êú¨Êñá‰∏≠ÔºåÈñãÁôº‰∫Ü‰∏ÄÂÄãÂÑ™ÂÖàÈ©óÈ´îÁöÑÊ°ÜÊû∂Ôºå‰ª•‰æøÊõ¥È†ªÁπÅÂú∞ÈáçÊîæÈáçË¶ÅÁöÑ transitionÔºåÂæûËÄåÊõ¥Êúâ ÊïàÂú∞Â≠∏Áøí„ÄÇ\nÊú¨ÊñáË°®Á§∫ÔºåÊé°Áî®Ê≠§Á®ÆÁ∂ìÈ©óÂõûÊîæÁöÑÁÆóÊ≥ïÔºåËÉΩÂ§†Âú® 49 Á®ÆÈÅäÊà≤‰∏≠ÔºåÊâìË¥èÂÇ≥Áµ±ÁÆóÊ≥ï 41 Ê¨°„ÄÇ\n1 Introduction # RL agents Âú®ËßÄÂØüÂà∞‰∏ÄÈÄ£‰∏≤ÁöÑÁ∂ìÈ©óÊôÇÔºåÂ¢ûÈáèÂú∞Êõ¥Êñ∞ÂÖ∂ÂèÉÊï∏„ÄÇÊúÄÁ∞°ÂñÆÁöÑÂÅöÊ≥ïÔºåÂç≥ÔºöÂú®Êõ¥Êñ∞ÂæåÔºå Á´ãÂàªÊâîÊéâÂà∞‰æÜÁöÑÊï∏ÊìöÔºå‰ΩÜÈÄôÊúâÂπæ‰∏ãÂÖ©Á®ÆÂïèÈ°åÔºö\nÂº∑ÁÉàÁöÑÁõ∏ÈóúÊÄßÊõ¥ÊÄßÁ†¥Â£û‰∫ÜË®±Â§öÈö®Ê©üÊ¢ØÂ∫¶‰∏ãÈôçÁÇ∫Âü∫Á§éÁöÑÊºîÁÆóÊ≥ïÊâÄÂÅáË®≠ÁöÑ i.i.d.„ÄÇ Âø´ÈÄüÁöÑÂøòË®òÁΩïË¶ãÔºå‰ΩÜÂèØËÉΩÊúÉÂÜçÁî®Âà∞ÁöÑÁ∂ìÈ©ó„ÄÇ Experience replay Ëß£Ê±∫‰∫Ü‰∏äËø∞ÂïèÈ°åÔºöÂú®‰∏ÄÂÄã replay memory ‰∏≠ÂÑ≤Â≠ò experienceÔºåÈÄöÈÅéÊ∑∑ ÂêàÊàñÂ§öÊàñÂ∞ëÁöÑÊúÄËøëÁ∂ìÈ©ó‰æÜÊõ¥Êñ∞Â∞±ÊúâÂèØËÉΩÁ†¥Â£û temporal correlationÔºårare experience Â∞á ÊúÉË¢´Áî®‰æÜ‰∏çÊ≠¢‰∏ÄÊ¨°Êõ¥Êñ∞ÔºåÈÄôÂ∞±Ë¢´Áî®Âú® NeurIPS 2013 Âíå Nature 2015 ÁöÑË´ñÊñá‰∏≠„ÄÇ\nDQN Âà©Áî®‰∏ÄÂÄãÂ§ßÁöÑÊªëÂãïÁ™óÂè£ replay memoryÔºåÈö®Ê©üÁöÑÂæû‰∏≠ÂùáÂãªÊé°Ê®£ÔºåÂπ≥ÂùáÈáçË§áË®™Âïè‰∏ÄÂÄã transition 8 Ê¨°„ÄÇ\nExperience replay ÂèØ‰ª•Â§ßÈáèÁöÑÈôç‰ΩéÈúÄË¶ÅÂéªÂ≠∏ÁøíÁöÑÁ∂ìÈ©óÔºåËÄåÊòØÁî®Êõ¥Â§öÁöÑË®àÁÆóÂíåÊõ¥Â§öÁöÑ memory ‰æÜÊõøÊèõÔºåÈÄôÊ®£Âú®Ë®àÁÆóË≥áÊ∫ê‰∏äÊòØÊØîË©≤ RL agents ÂíåÁí∞Â¢É‰∫íÂãïÈÇÑ‰æøÂÆúÁöÑ„ÄÇ\nË®ªÔºöÂú®ÈÄôË£°ÁöÑ‰∏ÄÊ¨° transition ÊåáÁöÑÊòØÔºöagent Âú®Áí∞Â¢É‰∏≠‰∏ÄÊ¨°ÊÄßÁöÑÊìç‰ΩúÔºåÂç≥ tupleÔºö\n$$ (\\text{state} S_{t - 1}, \\text{action} A_{t - 1}, \\text{reward} R_t, \\text{discount} \\gamma_t, \\text{next state} S_t). $$\n2 Background # 3 Prioritized Replay # Ë®≠Ë®à‰∏ÄÂÄã prioritized replay memoryÔºåÊ∂âÂèäÂà∞ÂÖ©ÂÄãÂ±§Ê¨°ÔºåÂç≥Ôºö\nÈÅ∏ÊìáÂì™‰∫õÂÑ≤Â≠ò ÈÅ∏ÊìáÂì™‰∫õÂõûÊîæ Êú¨Êñá‰∏ªË¶ÅÁ†îÁ©∂ÂæåËÄÖÔºåÂ¶Ç‰ΩïÊúÄÊúâÊïàÁöÑÂà©Áî® replay memory ‰æÜÂ≠∏Áøí„ÄÇ\n3.1. A Motivating Example # Êú¨ÊñáÁµ¶Âá∫‰∫Ü‰∏ÄÂÄã‰æãÂ≠ê‰æÜÂÖÖÂàÜÁöÑË™™ÊòéÂÑ™ÂÖàÁöÑÊΩõÂú®Â•ΩËôï„ÄÇÂºïÂÖ•‰∫ÜÁ®±ÁÇ∫ \u0026lsquo;Blind Cliffwalk\u0026rsquo; ÁöÑÁí∞ Â¢ÉÔºå‰æÜË™™ÊòéÔºöÁï∂ reward ÈùûÂ∏∏ÁΩïË¶ãÊôÇÔºåÊé¢Á¥¢ÊâÄÈÅáÂà∞ÁöÑÊåëÊà∞„ÄÇÂÅáË®≠ÂÉÖÊúâ \\(n\\) ÂÄãÁãÄÊÖãÔºåÈÄô ÂÄãÁí∞Â¢ÉÂ∞±Ë¶ÅÊ±ÇË∂≥Â§†ÁöÑÈö®Ê©üÊ≠•È©üÁü•ÈÅìÂæóÂà∞Á¨¨‰∏ÄÂÄãÈùûÈõ∂ rewardÔºõÁ¢∫ÂàáÁöÑË™™ÔºåÈö®Ê©üÁöÑÈÅ∏ÊìáÂãï‰ΩúÊÉÖ Ê≥Å‰∏ã reward = \\(2^{-n}\\)„ÄÇÊ≠§Â§ñÔºåÊúÄÁõ∏ÈóúÁöÑ transitions ÂçªËóèÂú®Â§ßÈáèÁöÑÂ§±ÊïóËàáÂòóË©¶‰∏≠ „ÄÇ\nÊú¨ÊñáÂà©Áî®ÈÄôÂÄã‰æãÂ≠ê‰æÜ highlight ÂÖ©ÂÄã agents ÁöÑÂ≠∏ÁøíÊ¨°Êï∏ÁöÑ‰∏çÂêå„ÄÇÂèØ‰ª•ÁúãÂà∞ÈÄôÂÖ©ÂÄã agent ÈÉΩÂæûÂêå‰∏ÄÂÄã replay memory ‰∏≠ÂéªÁç≤Âèñ Q-learning ÁöÑÊõ¥Êñ∞„ÄÇ\nÁ¨¨‰∏ÄÂÄã agent Èö®Ê©üÂùáÂãªÁöÑÂõûÊîæ transitionsÔºåÁ¨¨‰∫åÂÄãÂñöÈÜí‰∏ÄÂÄã oracleÔºàÁ•ûÂñªÔºâ‰æÜÈÄ≤Ë°åÂÑ™ÂÖà ËΩâÁßª„ÄÇÈÄôÂÄã oracle Ë≤™Â©™ÁöÑÈÅ∏Êìá‰ΩøÂæóÂú®Áï∂ÂâçÁãÄÊÖã‰∏ãÊúÄÂ§ßÂåñÁöÑÈôç‰ΩéÂÖ®Â±ÄÊêçÂ§±ÁöÑ transitions„ÄÇ\nÂæû Figure 1. Âè≥ÂÅ¥ÁöÑÂúñÂèØ‰ª•ÁúãÂá∫ÔºåÊåâÁÖß‰∏ÄÂÆöÂÑ™ÂåñÂ∫èÂàóÂæóÂà∞ÁöÑËΩâÁßªÊØîÈö®Ê©üÂùáÂãªÊé°Ê®£ÔºåÂ∞ëËä±Ë≤ª ÂæàÂ§öÂòóË©¶ÔºåÈÄôÊòéÈ°ØÁöÑÊèêÂçá‰∫ÜË®ìÁ∑¥ÁöÑÈÄüÂ∫¶„ÄÇ\nFigure 1: Left: Illustration of the \u0026lsquo;Blind Cliffwalk\u0026rsquo; example domain: there are two actions, a \u0026lsquo;right\u0026rsquo; and a \u0026lsquo;wrong\u0026rsquo; one, and the episode is terminated whenever the agent takes the \u0026lsquo;wrong\u0026rsquo; action (dashed red arrows). Taking the \u0026lsquo;right\u0026rsquo; action progresses through a sequence of \\(n\\) states (black arrows), at the end of which lies a final reward of 1 (green arrow); reward is 0 elsewhere. We chose a representation such that generalizing over what action is \u0026lsquo;right\u0026rsquo; is not possible. Right: Median number of learning steps required to learn the value function as a function of the size of the total number of transitions in the replay memory. Note the log-log scale, which highlights the exponential speed-up from replaying with an oracle (bright blue), compared to uniform replay (black); faint lines are min/max values from 10 independent runs. 3.2 Prioritizing with TD-Error # Prioritized replay Ë©ïÂà§ÂÑ™ÂÖàÁöÑÊ∫ñÂâáÊòØÔºöË°°ÈáèÊØè‰∏Ä transitions ÁöÑÈáçË¶ÅÊÄß„ÄÇ‰∏ÄÂÄãÁêÜÊÉ≥ÁöÑÊ®ô Ê∫ñÊòØÁï∂ÂâçÁãÄÊÖã‰∏ãÔºåRL agent ËÉΩÂ§†Â≠∏ÁøíÂà∞ÁöÑÈáèÔºå‰πüÂ∞±ÊòØÊúüÊúõÁöÑÂ≠∏ÁøíÈÅéÁ®ã„ÄÇ‰ΩÜÊòØÈÄôÂÄãÊ®ôÊ∫ñ‰∏¶‰∏ç ËÉΩÁõ¥Êé•Ë®™ÂïèÂà∞Ôºå‰∏ÄÂÄãÊØîËºÉÂêàÁêÜÁöÑ‰∏îËÉΩÂ§†Ë°®Á§∫ÈáçË¶ÅÊÄßÁöÑÂè¶‰∏ÄÂÄãË°°ÈáèÊñπÁ§∫ÊòØÔºö‰∏ÄÂÄã transition ÁöÑ TD error \\(\\delta\\) ÁöÑË¶èÊ®°Ôºå‰æÜË°®Á§∫Ë©≤ transition Âá∫‰πéÊÑèÊñôÁöÑÁ®ãÂ∫¶ÔºöÈÄôÈùûÂ∏∏ÈÅ©Âêà Â¢ûÈáèÁöÑÂú®Á∑ö RL ÁÆóÊ≥ïÔºåÊØîÂ¶ÇÔºöSARSA ÊàñËÄÖ Q-learningÔºåÂ∑≤Á∂ìË®àÁÆó TD-error ‰∏¶‰∏î Êõ¥Êñ∞Âíå \\(\\delta\\) ÊàêÊØî‰æãÁöÑÂèÉÊï∏„ÄÇ‰ΩÜÊòØÊúâ‰∫õÊÉÖÊ≥Å‰∏ãÔºåTD-error ‰ªçÁÑ∂ÊòØÈùûÂ∏∏Â∑ÆÁöÑÈ†êÊ∏¨Ôºå‰æãÂ¶ÇÔºö Áï∂ reward ÂÖÖÊªøÂô™Èü≥ÊôÇ„ÄÇ\nÁÇ∫‰∫ÜË™™ÊòéÈÄöÈÅé TD-error prioritized replay ÁöÑÊúâÊïàÊÄßÔºåÊàëÂÄëÂ∞çÊØî‰∫Ü uniform Âíå oracle baselines Âú® Blind Cliffwalk ‰∏äÁöÑ \u0026lsquo;greedy TD-error prioritization\u0026rsquo; ÁÆóÊ≥ï„ÄÇË©≤ÁÆóÊ≥ï Â≠òÂÑ≤‰∫ÜÂú® replay memory ‰∏≠ÊØèÊ¨° transition ÂæåÔºåÊúÄÂæåÈÅáÂà∞ÁöÑ TD error„ÄÇÂ∞áÊúÄÂ§ßÁµïÂ∞çÂÄº TD-error ÁöÑ transition Âæû memory ‰∏≠ replay„ÄÇ transition ÁöÑ Q-learning Êõ¥Êñ∞Âíå TD-error Áõ∏ÊØîÁöÑ Ê¨äÈáç„ÄÇÊñ∞ÁöÑ transition Âà∞‰æÜ‰πãÂæåÔºåÊ≤íÊúâÂ∑≤Áü•ÁöÑ TD-errorÔºåÊâÄ‰ª•ÊàëÂÄëÂ∞á ÂÖ∂ÊîæÂà∞ÊúÄÂ§ßÂÑ™ÂÖàÁ¥öÁöÑË°åÂàóÔºåÁ¢∫‰øùÊâÄÊúâÁöÑ experience Ëá≥Â∞ë replay ‰∏ÄÊ¨°„ÄÇ\nÈóúÊñºÈÄôÊ®£ÂÅöÁöÑÂ•ΩËôïÔºåÂæû Figure 2. ÂèØ‰ª•ÁúãÂá∫Ôºåoracle ÁöÑÂÅöÊ≥ïÂèØ‰ª•Ê•µÂ§ßÁöÑÈôç‰ΩéÁÑ°Áî®ÁöÑÂòóË©¶Ôºå Âä†ÈÄü‰∫ÜÁÆóÊ≥ïÁöÑÂü∑Ë°åÈÄüÂ∫¶„ÄÇ\nFigure 2: Median number of updates required for Q-learning to learn the value function on the Blind Cliffwalk example, as a function of the total number of transitions (only a single one of which was successful and saw the non-zero reward). Faint lines are min/max values from 10 random initializations. Black is uniform random replay, cyan uses the hindsight-oracle to select transitions, red and blue use prioritized replay (rank-based and proportional respectively). The results differ by multiple orders of magnitude, thus the need for a log-log plot. In both subplots it is evident that replaying experience in the right order makes an enormous difference to the number of updates required. See Appendix B.1 for details. Left: Tabular representation, greedy prioritization. Right: Linear function approximation, both variants of stochastic prioritization. 3.2. Stochastic Priorization # ÁÑ∂ËÄåÔºågreedy TD-error prioritization ÊúâÂπæÂÄãÂïèÈ°åÔºö\nÁÇ∫‰∫ÜÈÅøÂÖçÂú®Êï¥ÂÄã replay memory ‰∏≠ÊéÉÁûÑËÄåÂ∏∂‰æÜÁöÑË®àÁÆó‰ª£ÂÉπÔºåTD-error ÂÉÖÂÉÖÊõ¥Êñ∞Ë¢´ replay ÁöÑ transition„ÄÇÈÄôÂÄãÂ∏∂‰æÜÁöÑ‰∏ÄÂÄãÂæåÊûúÂ∞±ÊòØÔºöÂ∏∂Êúâ‰Ωé TD-error ÁöÑ transition Âú®Á¨¨‰∏ÄÊ¨°Ë®™ÂïèÊôÇÂèØËÉΩÂæàÈï∑ÊôÇÈñì‰∏çÊúÉË¢´ replay„ÄÇ Â∞ç noise spikes ÈùûÂ∏∏ÊïèÊÑüÔºåbootstrapping ÊúÉÂä†ÂäáË©≤ÁèæË±°Ôºå‰º∞Ë®àË™§Â∑ÆÂèàÊúÉÊàêÁÇ∫Âè¶‰∏ÄÂÄã noise ÁöÑ‰æÜÊ∫ê„ÄÇ Ë≤™Â©™ÂÑ™ÂÖàÈõÜ‰∏≠Êñº‰∏ÄÂÄãÂ∞èÁöÑÁ∂ìÈ©óÂ≠êÈõÜÔºåË™§Â∑ÆÊî∂Á∏ÆÁöÑÂæàÊÖ¢ÔºåÁâπÂà•ÊòØ‰ΩøÁî®ÂáΩÊï∏‰º∞Ë®àÁöÑÊôÇÂÄôÔºåÊÑè Âë≥ËëóÂàùÂßãÈ´òË™§Â∑ÆÁöÑ transition Ë¢´Á∂ìÂ∏∏ replayÔºåÁº∫‰πèÂ§öÊ®£ÊÄß‰ΩøÂæóË©≤Á≥ªÁµ±ÂÇæÂêëÊñº over-fitting„ÄÇ ÁÇ∫Áû≠Ëß£Ê±∫‰∏äËø∞ÂïèÈ°åÔºåÊàëÂÄëÂºïÂÖ•‰∫Ü‰∏ÄÂÄãÈö®Ê©üÊé°Ê®£ÁöÑÊñπÊ≥ïÔºåË©≤ÊñπÊ≥ïÁµêÂêà‰∫Ü\nÁ¥îÁ≤πÁöÑË≤™Â©™ÂÑ™ÂÖà ÂùáÂãªÈö®Ê©üÊé°Ê®£ ÊàëÂÄëÁ¢∫‰øùË¢´Êé°Ê®£ÁöÑÊ©üÁéáÂú® transition ÂÑ™ÂÖàÁ¥ö‰∏äÊòØÂñÆË™øÁöÑÔºåËàáÊ≠§ÂêåÊôÇÔºåÁ¢∫‰øùÊúÄ‰ΩéÂÑ™ÂÖàÁ¥öÁöÑ transition ÁöÑÊ©üÁéá‰πüÊòØÈùûÈõ∂„ÄÇÊàëÂÄëÂÆöÁæ©Êé°Ê®£ transition \\(i\\) ÁöÑÊ©üÁéáÁÇ∫Ôºö\n$$ P(i) = \\frac{p_i^\\alpha}{\\Sigma_k p_k^\\alpha} \\tag{1} $$\nÂÖ∂‰∏≠Ôºå\n\\(p_i\\) ÊòØ transition \\(i\\) ÁöÑÂÑ™ÂÖàÁ¥ö„ÄÇÊåáÊï∏ \\(\\alpha\\) Ê±∫ÂÆö‰∫Ü‰ΩøÁî®Â§öÂ∞ëÁöÑ ÂÑ™ÂÖàÁ¥öÔºåÁï∂ \\(\\alpha = 0\\) ÊôÇÊòØÂùáÂãªÁöÑÊÉÖÊ≥Å„ÄÇ Á¨¨‰∏ÄÁ®ÆËÆäÂΩ¢ÊòØÁõ¥Êé•ÁöÑÔºåÁ≠âÊØî‰æãÁöÑËÄÉÊÖÆÂÑ™ÂÖàÁ¥öÂà•Ôºå\\(p_i = |\\delta_i| + \\epsilon\\)Ôºå\\(\\epsilon\\) ÊòØÁÇ∫‰∫ÜÈÅøÂÖçÂú® edge-case ÊôÇÔºåÂ¶ÇÊûú TD-error ÁÇ∫Èõ∂Â∞±‰∏çÊúÉ ÂÜçË¢´Ë®™Âïè„ÄÇ\nÁ¨¨‰∫åÁ®ÆËÆäÂΩ¢ÊòØÈùûÁõ¥Êé•ÁöÑÔºåÂü∫ÊñºÊéíË°åÁöÑÂÑ™ÂÖàÁ¥öÔºå\\(p_i = \\frac{1}{\\text{rank}(i)}\\)ÔºåÂÖ∂ ‰∏≠ \\(\\text{rank}(i)\\) ÊòØ replay memory Ê†πÊìö TD-error ÊâÄÊéíË°åÁöÑ„ÄÇ\nÂÖ©ÂÄãËÆäÂΩ¢ÈÉΩÊòØË™§Â∑ÆÂñÆË™øÔºå‰ΩÜÊòØÂæåËÄÖÊõ¥Á©©ÂÅ•ÔºåÂõ†ÁÇ∫ÂÖ∂Â∞çÈõ¢Áæ§Èªû‰∏çÊïèÊÑü„ÄÇÂÖ©ÂÄãËÆäÂΩ¢Áõ∏Â∞çÂùáÂãªÁöÑ baseline ÈÉΩÊúâÂæàÂ§ßÂÑ™Âã¢ÔºåÂ¶Ç Figure 2. Âè≥ÂÅ¥ÊâÄÁ§∫„ÄÇ\n3.4 Annealing the Bias # Áî®Èö®Ê©üÊõ¥Êñ∞Âæó‰æÜÁöÑÊúüÊúõÂÄºÈ†êÊ∏¨Ôºå‰æùË≥¥ÊñºÈÄô‰∫õÊõ¥Êñ∞„ÄÇPrioritized replay ‰∫ÜË™§Â∑ÆÔºåÂõ†ÁÇ∫ÂÆÉ‰ª• ‰∏ÄÁ®Æ‰∏çÂèóÊéßÁöÑÂΩ¢ÂºèÊîπËÆä‰∫ÜÂàÜ‰ΩàÔºåÂæûËÄåÊîπËÆä‰∫ÜÈ†êÊ∏¨ÊúÉÊî∂ÊñÇÂà∞ÁöÑ solutionÔºàÂç≥‰Ωø policy ÂíåÁãÄ ÊÖãÂàÜ‰ΩàÈÉΩÂõ∫ÂÆöÔºâ„ÄÇÊàëÂÄëÂèØ‰ª•Áî®‰∏ãÈù¢ÁöÑÈáçË¶ÅÊÄßÊé°Ê®£Ê¨äÈáç‰æÜ‰øÆÊ≠£Ë©≤Ë™§Â∑ÆÔºö\n$$ w_i = \\Bigg(\\frac 1 N \\cdot \\frac{1}{P(i)} \\Bigg)^\\beta $$\n","date":"13 December 2018","externalUrl":null,"permalink":"/posts/paper/paper-exp-replay/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Prioritized Experience Reply","type":"posts"},{"content":"","date":"6 December 2018","externalUrl":null,"permalink":"/tags/reinforcement-learning/","section":"Tags","summary":"","title":"Reinforcement Learning","type":"tags"},{"content":" Reinforcement Learning: OpenAI Gym # Âº∑ÂåñÂ≠∏ÁøíÔºàReinforcement LearningÔºå‰ª•‰∏ãÁ∞°Á®± RLÔºâÊúâÂà•Ëàá‰∏ÄËà¨Áõ£Áù£ÂºèÂ≠∏ÁøíÔºàSupervised LearningÔºâËàáË¶Å end-to-end ÁöÑË≥áÊñôË®ìÁ∑¥„ÄÇ\nReinforcement Learning ‰ªãÁ¥π # Agent Âú®ÊüêÂÄã state ÂÅö‰∫Ü‰∏ÄÂÄã actionÔºåËÄåÁßªÂà∞‰∏ã‰∏ÄÂÄã stateÔºåÁí∞Â¢ÉÊ≠§ÊôÇÁµ¶‰∫Ü agent ‰∏Ä ÂÄã rewardÔºåËÄå agent ÂâáÊ†πÊìöÈÄôÂÄã reward Ë™øÊï¥‰ªñÁöÑËÖ≥Ê≠•„ÄÇ\nËÅΩËµ∑‰æÜÊúâÈªûÊäΩË±°ÔºüÊØîÂñª‰æÜË™™Ôºö\n‰Ω†ÊòØ agentÔºåËÄåÁí∞Â¢ÉÊòØÂÆ∂ÔºàÂåÖÊã¨ÔºöÁà∏Áà∏„ÄÅÂ™ΩÂ™ΩÁ≠âÔºâÔºåaction ÊòØ‰Ω†ÁöÑË°åÁÇ∫ËàâÊ≠¢Ôºåstate ÊòØ‰Ω† ÊâÄÂú®ÁöÑÂú∞ÈªûÔºåreward ÊòØÂ™ΩÂ™ΩÁµ¶‰Ω†ÁöÑÁçéÂãµÔºàÂèØËÉΩÊòØË≤†ÁöÑÔºåÂç≥ÔºöË≤†ÂõûÈ•ãÔºâ„ÄÇ\nËã•‰Ω†ÔºàagentÔºâÂú®ÂÆ¢Âª≥ÔºàstateÔºâÔºåÊâìÁ†¥‰∫Ü‰∏ÄÂÄãÊùØÂ≠êÔºàactionÔºâÔºåËÄåÂ™ΩÂ™ΩÊñ•Ë≤¨‰Ω†ÔºàrewardÔºâ Ôºå‰Ω†Â∞±ÊúÉÈÄèÈÅéÈÄôÊ¨°ÁöÑ‰∏çÂ∞èÂøÉÔºåÂéªÈÅøÂÖç‰∏ãÊ¨°Âú®ÂÆ¢Âª≥ÊôÇ‰∏çË¶ÅÂÜçÊâìÁ†¥ÊùØÂ≠ê„ÄÇ Áõ∏ÂèçÂú∞ÔºåËã•‰Ω†ÔºàagentÔºâÂú®ÂªöÊàøÔºàstateÔºâÔºåÊ¥ó‰∫ÜÁ¢óÁ≠∑ÔºàactionÔºâÔºåËÄåÂ™ΩÂ™ΩË™™‰Ω†ÂæàÊ£í ÔºàrewardÔºâÔºå‰Ω†Â∞±ÊúÉÁü•ÈÅìÔºåÊ¥óÁ¢óÂèØ‰ª•Âπ´ÂøôÂàÜÊìîÂÆ∂‰∫ã‰∏¶ÂæóÂà∞Ê≠£ÂõûÈ•ãÔºåÊâÄ‰ª•‰ª•Âæå‰∏ÄÊ®£Âà∞‰∫ÜÂªöÊàø ÁúãÂà∞ÊúâÁ¢óÁ≠∑ÊôÇÔºåÂ∞±ÊúÉÂ¢ûÂä†ÊÉ≥Ê¥óÁ¢óÁöÑÊ©üÁéá„ÄÇ Áî±‰∏äÂèØÁü•ÔºåRL ÊòØ ML ÂÆ∂Êóè‰∏≠ÁöÑ‰∏ÄÂì°ÔºåËÄåÊàëÂÄã‰∫∫Ë¶∫Âæó‰ªñÊõ¥Êúâ AI ÁöÑÊÑüË¶∫Ôºå‰ªñÊòØ‰∏ÄÁ®ÆÁõÆÊ®ôÂ∞éÂêë Ôºàgoal-orientedÔºâÁöÑÂ≠∏ÁøíÊñπÊ≥ïÔºåÈÄèÈÅé agent ËàáÁí∞Â¢ÉÈñìÁöÑ‰∫íÂãïÁç≤ÂæóÊõ¥Á®ÆÁçéÂãµÊàñÊá≤ÁΩ∞ÔºåÂ≠∏ÊúÉÂ¶Ç ‰ΩïÂÅö„ÄåÊúÄÂ•ΩÁöÑ„ÄçÊ±∫Á≠ñÔºàpolicyÔºâ„ÄÇ\nÊï¥ÂÄãÊ±∫Á≠ñÊ±∫ÂÆöÈÅéÁ®ãÂèØÁî±‰ª•‰∏ã 5 ÂÄãË¶ÅÁ¥†ÁµÑÊàêÔºö\nAgentÔºöËàá environment ‰∫íÂãïÔºàactionÔºâ„ÄÇ ActionÔºöagent ËóâÁî±Ëá™Â∑±ÁöÑ policy ÊâÄÂÅöÁöÑÂãï‰Ωú„ÄÇ EnvironmentÔºöagent ÁöÑË°åÂãïÁØÑÂúçÔºåÊ†πÊìö agent ÁöÑ action Áµ¶‰∫à‰∏çÂêåÁöÑ reward„ÄÇ StateÔºöagent Âú®ÁâπÂÆöÊôÇÈñìËôïÁöÑÁãÄÊÖã„ÄÇ RewardÔºöenvironment Ê†πÊìö agent ÁöÑ action Áµ¶ÁöÑÁçéÂãµÊàñÊá≤ÁΩ∞„ÄÇ Algorithm Implementation # ÊàëÂÄë‰ΩøÁî® OpenAI Gym Áï∂‰∏≠ÁöÑ CartPole-v0 ‰æÜÂØ¶‰Ωú RL ÊºîÁÆóÊ≥ïÔºåOpenAL Gym Êèê‰æõ‰∫ÜÂêÑÁ®Æ ‰∏çÂêåÁöÑ environment ‰æÜÂÅö RL ÁöÑË®ìÁ∑¥„ÄÇ\nÁÇ∫‰∫ÜÈÅøÂÖçË∑®Âπ≥Âè∞‰∏äÂÆâË£ùÁöÑÂïèÈ°åÔºåÊàë‰ΩøÁî® Google Colab ÁöÑÈõ≤Á´ØÂπ≥Âè∞‰æÜ demo„ÄÇ\nCartPole source code\nRandom Action # ÂÖàÂæûÊúÄÁ∞°ÂñÆÁöÑ‰æãÂ≠ê‰æÜ‰∫ÜËß£Áõ∏ÈóúËÆäÊï∏ÔºåÁÑ°Ë´ñ environment Â¶Ç‰ΩïÔºåÈö®Ê©üÊåëÈÅ∏‰∏ÄÂÄãÂèØË°åÁöÑ actionÔºåÂç≥ÔºöÈö®Ê©üÊ±∫ÂÆöÂ∑¶ÁßªÊàñÂè≥Áßª„ÄÇ\n\u0026#34;\u0026#34;\u0026#34; Random Action \u0026#34;\u0026#34;\u0026#34; env = gym.make(\u0026#39;CartPole-v0\u0026#39;) env.reset() # try 30 episodes for i in range(30): obs = env.reset() rewards = 0 # try 50 actions for each episode for t in range(50): action = env.action_space.sample() # randomly choose 0 (left) or 1 (right) obs, reward, done, info = env.step(action) rewards += reward if done: print(\u0026#39;episode {}: Episode finished after {} timesteps, total rewards {}\u0026#39;.format( i, t + 1, rewards)) break ipythondisplay.clear_output(wait=True) env.close() Âõ†ÁÇ∫ agent Âú®ÈÄôÂÄã random choosing action ÊôÇÔºå‰∏¶Ê≤íÊúâ‰ªª‰ΩïÂ≠∏ÁøíÔºåÊâÄ‰ª• reward ÊôÆÈÅç‰∏ç È´ò„ÄÇ\nHand-Made Policy # ÂÜç‰æÜÊàëÂÄëÂºïÈÄ≤‰∏ÄÂÄãÁ∞°ÂñÆÁöÑ policyÔºö\nÂ¶ÇÊûúÊü±Â≠êÂêëÂ∑¶ÂÇæÔºàËßíÂ∫¶ \\(\u0026lt; 0\\)ÔºâÔºåÂâáÂ∞èËªäÂ∑¶Áßª‰ª•Á∂≠ÊåÅÂπ≥Ë°°„ÄÇ Â¶ÇÊûúÊü±Â≠êÂêëÂ∑¶ÂÇæÔºàËßíÂ∫¶ \\(\\ge 0\\)ÔºâÔºåÂâáÂ∞èËªäÂè≥Áßª‰ª•Á∂≠ÊåÅÂπ≥Ë°°„ÄÇ \u0026#34;\u0026#34;\u0026#34; Hand-Made Policy \u0026#34;\u0026#34;\u0026#34; # Define policy def choose_action(obs): pos, v, ang, rot = obs return 0 if ang \u0026lt; 0 else 1 # 0: left, 1: right env = gym.make(\u0026#39;CartPole-v0\u0026#39;) env.reset() for i in range(50): obs = env.reset() rewards = 0 for t in range(250): action = choose_action(obs) obs, reward, done, info = env.step(action) rewards += reward if done: print(\u0026#39;episode {}: Episode finished after {} timesteps, total rewards {}\u0026#39;.format( i, t + 1, rewards)) break env.close() Q-Learning with Q Table # $$Q ^ { * } ( s , a ) = \\sum _ { s ^ { \\prime } } T \\left( s , a , s ^ { \\prime } \\right) \\left( R \\left( s , a , s ^ { \\prime } \\right) + \\gamma \\max _ { a ^ { \\prime } } Q ^ { * } \\left( s ^ { \\prime } , a ^ { \\prime } \\right) \\right)$$\nÂÖ∂‰∏≠Ôºö\n\\(T\\)Ôºötransition functionÔºå\\(0 \\le T \\le 1\\) Ë°®ÁôºÁîüÊ©üÁéá \\(R\\)Ôºöreward function \\(\\gamma\\)Ôºödiscount factorÔºåÈÄöÂ∏∏ÊúÉÊòØ‰∏ÄÂÄã \\(\u0026lt; 1\\) ÁöÑÂÄºÔºåÂèØËÉΩÊòØ \\(0.9\\)„ÄÅ\\(0.8\\) ‰πãÈ°ûÔºå‰ª£Ë°®ÁöÑÊòØÂ∞çÊú™‰æÜ reward ÁöÑÈáçË¶ñÁ®ãÂ∫¶„ÄÇ ÊâÄ‰ª•ÊàëÂÄëÁöÑÁõÆÁöÑÊòØÔºö\n$$\\arg\\max_a Q^*(s, a).$$\nagent ÈÄèÈÅé‰∏ÄÊ¨°Ê¨°Ë∑ü environment ‰∫íÂãïÔºàaÔºâÁç≤ÂæóÁöÑ reward ‰æÜÂ≠∏Áøí Q functionÔºö\n$$ Q(s_t, a_t) = (1 - \\alpha) \\cdot Q(s_{t - 1}, a_{t - 1}) + \\alpha \\cdot (r_t + \\gamma \\max Q(s_{t + 1}, a)) $$\nÂÖ∂‰∏≠Ôºå\n\\(t\\)Ôºö‰∏çÂêåÁöÑÊôÇÈñìÈªû \\(\\alpha\\)Ôºölearning rate pseudo code Â¶Ç‰∏ãÔºö\nInitialize Q(s, a) randomly for each episode Initialize s for each step of episode Choose a from s using policy derived from Q (e.g., Œµ-greedy) Take action a, observe r, s\u0026#39; Q(s, a) ‚Üê Q(s, a) + Œ±[r + Œ≥ max_a\u0026#39; Q(s\u0026#39;, a\u0026#39;) - Q(s, a)] s ‚Üê s\u0026#39; until s is terminal \\(\\epsilon\\)-greedy ÊòØ‰∏ÄÁ®ÆÂú® exploration Âíå exploitation ÈñìÂèñÂæóÂπ≥Ë°°ÁöÑÊñπÊ≥ï„ÄÇ\nexploration ÂòóË©¶‰∏çÂêå action exploitation Ê≤øÁî®ÁèæÊúâ policy ÊñπÊ≥ïÂæàÁ∞°ÂñÆÔºö\n\\(\\epsilon\\) ÊôÇÈñìÔºåagent ÂòóË©¶Êñ∞ action \\((1 - \\epsilon)\\) ÊôÇÈñìÔºåagent Ê≤øÁî®ÁèæÊúâ policy \u0026#34;\u0026#34;\u0026#34; Q-Learning \u0026#34;\u0026#34;\u0026#34; import math def choose_action(state, QTable, action_space, epsilon): if np.random.random_sample() \u0026lt; epsilon: # P(randomly choose action) = Œµ return action_space.sample() # choose the action that maximize QTable[state] return np.argmax(QTable[state]) def get_state(obs, n_buckets, bds): state = [0] * len(obs) # state = [0, 0, 0, 0] for i, s in enumerate(obs): # each feature has different distribution l, u = bds[i][0], bds[i][1] # each feature\u0026#39;s lowerbound \u0026amp; upperbound if s \u0026lt;= bds[i][0]: # lower than lowerbound state[i] = 0 elif s \u0026gt;= bds[i][1]: # higher than upperbound state[i] = n_buckets[i] - 1 else: state[i] = int(((s - l) / (u - l)) * n_buckets[i]) return tuple(state) env = gym.make(\u0026#39;CartPole-v0\u0026#39;) # Prepare Q table # Each feature\u0026#39;s n_bucket # \u0026#39;1\u0026#39; represents that any value belongs to the same state, i.e., the feature is not important n_buckets = (1, 1, 6, 3) n_actions = env.action_space.n # bounds of state bds = list(zip(env.observation_space.low, env.observation_space.high)) bds[1] = [-0.5, 0.5] bds[3] = [-math.radians(50), math.radians(50)] # Q Table, each (s, a) pair stores one value QTable = np.zeros(n_buckets + (n_actions,)) # epsilon-greedy, decrease by time def epsilons(i): return max(0.01, min(1, 1.0 - math.log10((i + 1) / 25))) # learning rate, decrease by time def lrs(i): return max(0.01, min(0.5, 1.0 - math.log10((i + 1) / 25))) gamma = 0.99 # reward discount factor # Q-Learning for i in range(200): obs = env.reset() rewards = 0 # convert continuous value -\u0026gt; discrete value state = get_state(obs, n_buckets, bds) epsilon = epsilons(i) lr = lrs(i) for t in range(250): action = choose_action(state, QTable, env.action_space, epsilon) obs, reward, done, info = env.step(action) rewards += reward next_state = get_state(obs, n_buckets, bds) # update Q Table q_next_max = np.amax(QTable[next_state]) QTable[state + (action,)] += lr * (reward + gamma * q_next_max - QTable[state + (action,)]) # Formula print(QTable) # step to next state state = next_state if done: print(\u0026#39;Episode finished after {} timesteps, total rewards {}\u0026#39;.format(t+1, rewards)) break env.close() Deep Q-Learning # Âú® CartPole ÁöÑ task ‰∏≠Ôºåstate Âè™Êúâ 4 ÂÄã featuresÔºåaction Âè™Êúâ 0 Âíå 1 ÂÖ©ÂÄãÂÄº„ÄÇ\n‰ΩÜËã• state ‰ªäÂ§©ÊòØ‰æÜËá™Êï¥ÂÄãÁí∞Â¢ÉÔºà‰æãÂ¶ÇÔºöÊï¥ÂÄãËû¢Âπï„ÄÅAlpha Go ÂúçÊ£ãÊ£ãÁõ§ÔºâÔºåÂõ†ÁÇ∫ states ÈÅéÂ§öÔºåÈÄôÊôÇÁî® table ‰æÜË°®Á§∫Â∞±‰∏çÂ§™Â¶•Áï∂„ÄÇ\nDeep Q-LeanringÔºà‰ª•‰∏ãÁ∞°Á®± DQNÔºâÔºöÊàëÂÄëÂèØ‰ª•Áî® deep neural network Âπ´ÊàëÂÄëÊèêÂèñ features ‰∏¶ÈÄºËøë Q function„ÄÇ\nNN ËóâÁî±Â§ßÈáèÁöÑ input-output end-to-end Ë®ìÁ∑¥ÔºåÊâæÂá∫Ôºö\n$$f(input) = output.$$\nÊääÂÆÉËΩâÊàê policyÔºö\n$$\\pi(state) = action.$$\nDeep Q-Learning Implementation # Âú® Human-level control through deep reinforcement learning ‰∏≠ÔºåÊèê‰æõ‰∫Ü‰∏âÁ®ÆË®ìÁ∑¥ DQN ÁöÑ tipsÔºö\nUse experience replayÔºöÊää experience Â≠òÂú® memoryÔºåË®ìÁ∑¥ÊôÇÈö®Ê©üÊäΩÊ®£„ÄÇÂÑ™ÈªûÊòØÂèØ‰ª• Êâì‰∫Ç‰∏çÂêå experience ‰πãÈñì‰∏çÂ≠òÂú®ÁöÑÊôÇÈñìÈóú‰øÇ„ÄÇ Freeze target Q-networkÔºöÂç≥Âª∫Á´ãÂÖ©Á®Æ Q-networkÔºå ÂØ¶ÈöõÈÄ≤Ë°åË®ìÁ∑¥ÁöÑ evaluation network Ë®ìÁ∑¥ÁõÆÊ®ô target network Ëã•Âè™Ë®ìÁ∑¥‰∏ÄÂÄã nnÔºåÊØèÊõ¥Êñ∞‰∏ÄÊ¨°ÊôÇÔºå‰∏ç‰ΩÜÊ≠£Âú®Ë®ìÁ∑¥ÁöÑ $Q(s, a)$ Âú®ËÆäÔºåÁõÆÊ®ô $Q(s\u0026rsquo;, a\u0026rsquo;)$ ‰πüÂú®ËÆäÔºåÈÄôÊ®£ÊòØÁÑ°Ê≥ïÊî∂ÊñÇÁöÑÔºÅ Clip rewardsÔºöÈôêÁ∏Æ reward ÁöÑÂÄºÔºå‰ª•Âà© backpropagation ‰∏≠ËÉΩÁ©©ÂÆöÂú∞Ë®àÁÆó gradient„ÄÇ Step 1: Âª∫Á´ã Network # ÂÖàÂª∫Á´ã‰∏ÄÂ±§ hidden layerÔºåÊää state ÂÇ≥ÂÖ•ÂæåÔºåÂæóÂá∫ÊØèÂÄã action ÁöÑÂàÜÊï∏ÔºåÂàÜÊï∏Ë∂äÈ´òÁöÑ action Ë∂äÂÆπÊòìË¢´ÊåëÈÅ∏„ÄÇ\nÁõÆÊ®ôÔºöÂ∞çÊú™‰æÜË∂äÊúâÂà©ÁöÑ action ÂàÜÊï∏Ë∂äÈ´ò„ÄÇ\nclass Net(nn.Module): def __init__(self, n_states, n_actions, n_hidden): super(Net, self).__init__() self.fc1 = nn.Linear(n_states, n_hidden) self.out = nn.Linear(n_hidden, n_actions) def forward(self, x): x = self.fc1(x) x = F.relu(x) return self.out(x) Step 2: Âª∫Á´ã Deep Q-Network # Tips ‰∏≠ÊèêÂà∞ÔºåÁ∏ΩÂÖ±ÈúÄË¶ÅÂÖ©ÂÄã networkÔºö\nevaluation networkÔºàeval_netÔºâ target networkÔºàtarg_netÔºâ Âíå\nmemory ÂÑ≤Â≠ò experience # Deep Q-Network, composed of one eval network, one target network class DQN(object): def __init__(self, n_states, n_actions, n_hidden, batch_size, lr, epsilon, gamma, target_replace_iter, memory_capacity): self.eval_net = Net(n_states, n_actions, n_hidden) self.target_net = Net(n_states, n_actions, n_hidden) # initialize memory, each memory slot is of size (state + next state + reward + action) self.memory = np.zeros((memory_capacity, n_states * 2 + 2)) self.optimizer = torch.optim.Adam(self.eval_net.parameters(), lr=lr) self.loss_func = nn.MSELoss() self.memory_counter = 0 self.learn_step_counter = 0 # for target network update self.n_states = n_states self.n_actions = n_actions self.n_hidden = n_hidden self.batch_size = batch_size self.lr = lr self.epsilon = epsilon self.gamma = gamma self.target_replace_iter = target_replace_iter self.memory_capacity = memory_capacity def choose_action(self, state): x = torch.unsqueeze(torch.FloatTensor(state), 0) # epsilon-greedy if np.random.uniform() \u0026lt; self.epsilon: # random action = np.random.randint(0, self.n_actions) # greedy else: # feed into eval net, get scores for each action actions_value = self.eval_net(x) # choose the one with the largest score action = torch.max(actions_value, 1)[1].data.numpy()[0] return action def store_transition(self, state, action, reward, next_state): # Pack the experience transition = np.hstack((state, [action, reward], next_state)) # Replace the old memory with new memory index = self.memory_counter % self.memory_capacity self.memory[index, :] = transition self.memory_counter += 1 def learn(self): # Randomly select a batch of memory to learn from sample_index = np.random.choice(self.memory_capacity, self.batch_size) b_memory = self.memory[sample_index, :] b_state = torch.FloatTensor(b_memory[:, :self.n_states]) b_action = torch.LongTensor( b_memory[:, self.n_states:self.n_states+1].astype(int)) b_reward = torch.FloatTensor(b_memory[:, self.n_states+1:self.n_states+2]) b_next_state = torch.FloatTensor(b_memory[:, -self.n_states:]) # Compute loss between Q values of eval net \u0026amp; target net # evaluate the Q values of the experiences, given the states \u0026amp; actions taken at that time q_eval = self.eval_net(b_state).gather(1, b_action) # detach from graph, don\u0026#39;t backpropagate q_next = self.target_net(b_next_state).detach() q_target = b_reward + self.gamma * \\ q_next.max(1)[0].view(self.batch_size, 1) # compute the target Q values loss = self.loss_func(q_eval, q_target) # Backpropagation self.optimizer.zero_grad() loss.backward() self.optimizer.step() # Update target network every few iterations (target_replace_iter), # i.e. replace target net with eval net self.learn_step_counter += 1 if self.learn_step_counter % self.target_replace_iter == 0: self.target_net.load_state_dict(self.eval_net.state_dict()) Step 3: Ë®ìÁ∑¥ # Ê≠•È©üÂ¶Ç‰∏ãÔºö\nÈÅ∏Êìá action ÂÑ≤Â≠ò experience train if __name__ == \u0026#39;__main__\u0026#39;: env = gym.make(\u0026#39;CartPole-v0\u0026#39;) env = env.unwrapped # For cheating mode to access values hidden in the environment # Environment parameters n_actions = env.action_space.n n_states = env.observation_space.shape[0] # Hyper parameters n_hidden = 50 batch_size = 32 lr = 0.01 # learning rate epsilon = 0.1 # epsilon-greedy, factor to explore randomly gamma = 0.9 # reward discount factor target_replace_iter = 100 # target network update frequency memory_capacity = 2000 n_episodes = 400 if CHEAT else 4000 # Create DQN dqn = DQN(n_states, n_actions, n_hidden, batch_size, lr, epsilon, gamma, target_replace_iter, memory_capacity) # Collect experience for i_episode in range(n_episodes): t = 0 # timestep rewards = 0 # accumulate rewards for each episode state = env.reset() # reset environment to initial state for each episode while True: # Agent takes action action = dqn.choose_action(state) # choose an action based on DQN next_state, reward, done, info = env.step( action) # do the action, get the reward # Cheating part: modify the reward to speed up training process if CHEAT: x, v, theta, omega = next_state # reward 1: the closer the cart is to the center, the better r1 = (env.x_threshold - abs(x)) / env.x_threshold - 0.8 # reward 2: the closer the pole is to the center, the better r2 = (env.theta_threshold_radians - abs(theta)) / \\ env.theta_threshold_radians - 0.5 reward = r1 + r2 # Keep the experience in memory dqn.store_transition(state, action, reward, next_state) # Accumulate reward rewards += reward # If enough memory stored, agent learns from them via Q-learning if dqn.memory_counter \u0026gt; memory_capacity: dqn.learn() # Transition to next state state = next_state if done: print(\u0026#39;Episode finished after {} timesteps, total rewards {}\u0026#39;.format(t+1, rewards)) break t += 1 env.close() ","date":"6 December 2018","externalUrl":null,"permalink":"/posts/tech/rl-on-openai-gym/","section":"Posts","summary":"","title":"Reinforcement Learning on OpenAI Gym","type":"posts"},{"content":"","date":"26 November 2018","externalUrl":null,"permalink":"/tags/nips/","section":"Tags","summary":"","title":"NIPS","type":"tags"},{"content":"Paper Link\nÁèæÂú® image to image ÁöÑ tasks Â∑≤Á∂ìÊòØÁï∂Á¥ÖÁÇ∏Â≠êÈõûÔºåNVIDIA ÈÄôÂõûÂíå MIT CSAIL Áõ¥Êé•Êõ¥‰∏ä ‰∏ÄÂ±§Ê®ìÔºåÈñãÁôºÂá∫‰∫Ü video to video ÁöÑËΩâÊèõÁ≥ªÁµ±Ôºå‰∏¶‰∏îËÉΩÂ§†ÊîØÊè¥Âà∞ 2K ÁöÑËß£ÊûêÂ∫¶ÔºåÂ∞±ËÆìÊàëÂÄë ‰æÜÁúãÁúãÈÄôÁØá vid2vid ÂêßÔºÅ\n1 Introduction # Âª∫Ê®°ÂíåÂãïÊÖãÂú∞ÈáçÂª∫Ë¶ñË¶∫‰∏ñÁïåÁöÑËÉΩÂäõÂ∞çÊñºÊßãÂª∫ intelligent agents ÊòØËá≥ÈóúÈáçË¶ÅÁöÑ„ÄÇÈô§‰∫ÜÁßëÂ≠∏ ËààË∂£Â∞éÂêëÂ§ñÔºåÂ≠∏ÁøíÈÄ£Á∫åË¶ñË¶∫Á∂ìÈ©óÂú®Ë®àÁÆóÊ©üË¶ñË¶∫„ÄÅÊ©üÂô®‰∫∫ÂíåË®àÁÆóÊ©üÂúñÂΩ¢Â≠∏‰∏≠ÊúâÂª£Ê≥õÁöÑÊáâÁî®„ÄÇ\nFigure 1: Generating a photorealistic video from an input segmentation map video on Cityscapes. Top left: input. Top right: pix2pixHD. Bottom left: COVST. Bottom right: vid2vid (ours). 2 Related Work # Generative Adversarial Networks (GANs) # Generator Âíå discriminator Ë¶ÅÂÑòÈáèÈÅîÊàê zero-sum„ÄÇÊú¨ÁØá paper ‰ΩøÁî®ÁöÑ‰∏ªË¶ÅÊñπÊ≥ïÁÇ∫ conditional GAN„ÄÇÊ≠§ÁØá paper ÁöÑÊñπÊ≥ï‰∏çÂè™ÊòØÈ†êÊ∏¨Êú™‰æÜÂΩ±ÁâáÂ∞çÁï∂ÂâçËßÄÂØüÂà∞ÂúñÁâáÔºå‰∏¶‰∏îÂú®ÂèØÊìç ‰ΩúÁöÑË™ûÁæ©Ë°®Á§∫‰∏äÂêàÊàêÁÖßÁâáËà¨ÈÄºÁúüÁöÑÂΩ±ÁâáÔºå‰æãÂ¶Ç segmentation masks„ÄÅËçâÂúñ„ÄÅÂßøÂã¢„ÄÇ\nImage-to-image translation # ‰∏ç‰ΩÜÂ∏åÊúõÂúñÁâáÊì¨ÁúüÔºåÈÇÑÂ∏åÊúõËÉΩË£ΩÁÖßÂá∫ temporally coherant frames„ÄÇÈÄôÂú®Èï∑ÊôÇÈñìÁöÑÂΩ±ÁâáÊòØ ÈùûÂ∏∏ÂÖ∑ÊúâÊåëÊà∞ÊÄßÁöÑ„ÄÇ\nUnconditional video synthesis # Âõ†ÁÇ∫ unconditional ÁöÑË®≠ÂÆöÔºåVGAN„ÄÅTGAN Âíå MoCoGAN ÈÉΩÂæóÂà∞ÈÄôËß£ÊûêÂ∫¶ËºÉÂ∑Æ„ÄÅÊôÇÈñìËºÉÁü≠ÁöÑ ÂΩ±Áâá„ÄÇ\nFuture video prediction # ‰ΩúËÄÖÂú®ÁîüÊàêÊú™‰æÜÂΩ±ÁâáÊôÇÔºåÊòØÊ†π„Ø´„ÄåÁï∂ÂâçÂ∑≤Á∂ìÂ≠òÂú®ÁöÑÂΩ±Áâá„ÄçÔºåÊâÄ‰ª•ÊúâÂà•ÊñºÂÇ≥Áµ±ÁöÑÁîüÊàêÊñπÂºèÔºåÊúÉ ÈÅáÂà∞ regress-to-the-mean ÁöÑÂïèÈ°åÔºåÊú¨ÁØáÂÅöÂá∫‰æÜÁöÑÁµêÊûúÂæÄÂæÄÊúÉÂ•ΩÂæàÂ§öÔºåËß£ÊûêÂ∫¶‰πüËºÉÈ´ò„ÄÇ\nVideo-to-video synthesis # 3 Video-to-Video Synthesis # ‰ª§ \\(\\textbf s_1^T \\equiv \\{\\textbf s_1, \\textbf s_2, \\dots, \\textbf s_T\\}\\)Ôºö‰∏ÄÁ≥ªÂàóÁî®ÊñºË¶ñÈ†ªÂêàÊàêÁöÑÊ∫êÂúñÂÉè„ÄÇ‰æãÂ¶ÇÔºösemantic segmentation masks„ÄÇ\n‰ª§ \\(\\textbf x_1^T \\equiv \\{\\textbf x_1, \\textbf x_2, \\dots, \\textbf x_T\\}\\)ÔºöÂ∞çÊáâÁöÑÁúüÂØ¶ÂúñÁâá„ÄÇ\nVideo-to-video synthesis ÁöÑÁõÆÊ®ôÊòØÂ≠∏Áøí‰∏ÄÂÄãÔºöÂæû \\(\\text s_1^T\\) mapping Âà∞ \\(\\tilde{\\textbf x}_1^T \\equiv \\{\\tilde{\\textbf x}_1, \\tilde{\\textbf x}_2, \\dots, \\tilde{\\textbf x}_T\\}\\) ÁöÑ functionÔºåÂõ†Ê≠§Áµ¶ÂÆö \\(\\textbf s_1^T\\) ÊâÄÁî¢ÁîüÁöÑÊ¢ù‰ª∂ÂàÜ‰ΩàÔºå\\(\\tilde{\\textbf x}_1^T\\) Ë¶ÅÂíåÁµ¶ÂÆö \\(\\textbf s_1^T\\) ÊâÄÁî¢ÁîüÁöÑÊ¢ù‰ª∂ÂàÜ‰Ωà \\(\\textbf x_1^T\\) Áõ∏Âêå„ÄÇ\n$$ p(\\tilde{\\textbf x}_1^T \\mid \\textbf s_1^T) = p(\\textbf x_1^T \\mid \\textbf s_1^T). \\tag{1} $$\nÊú¨ÁØá paper ‰ΩøÁî®ÁöÑÊû∂ÊßãÁÇ∫ conditional GAN„ÄÇ\n‰ª§ \\(G\\)ÔºàgeneratorÔºâÔºöÂ∞á input source sequence Êò†Â∞ÑÂà∞Â∞çÊáâÁöÑ output image sequenceÔºåÂç≥ \\(\\textbf x_1^T = G(\\textbf s_1^T)\\)ÔºåÊàëÂÄëËóâÁî±Â∫ï‰∏ãÁöÑ minimax optimization problem ‰æÜË®ìÁ∑¥ generatorÔºö\n$$ \\max_D \\min_G E_{(\\textbf x_1^T, \\textbf s_1^T)} [\\log D(\\textbf x_1^T, \\textbf s_1^T)] + E_{\\textbf s_1^T} [\\log(1 - D(G(\\textbf s_1^T), \\textbf s_1^T))], \\tag{2} $$\nSequential generator # ÂúñÁâá‰æÜÊ∫ê\nÁÇ∫‰∫ÜÁ∞°Âåñ video-to-video ÂêàÊàêÂïèÈ°åÔºåÊàëÂÄëÂÅö‰∫Ü Markov ÂÅáË®≠ÔºåÂ∞áÊ¢ù‰ª∂ÂàÜ‰Ωà \\(p \\left( \\tilde { \\mathbf { x } } _ { 1 } ^ { T } | \\mathbf { s } _ { 1 } ^ { T } \\right)\\) ÂàÜËß£ÁÇ∫‰ª•‰∏ãÁöÑ‰πòÁ©çÂΩ¢ÂºèÔºö\n$$ p(\\tilde{\\textbf x}_1^T \\mid \\textbf s_1^T) = \\prod_{t = 1}^T p(\\tilde{\\textbf x}_t \\mid \\tilde{\\textbf x}_{t - L}^{t - 1}, \\textbf s_{t - L}^t). \\tag{3} $$\n‰πüÂ∞±ÊòØË™™ÔºåÊàëÂÄëÂÅáÂÆöÈÄô‰∫õÂΩ±ÁâáÁöÑÁöÑÊØè‰∏ÄÂπÄÂèØ‰ª•ÊåâÈ†ÜÂ∫èÁîüÊàêÔºåËÄå \\(t\\)-th frame \\(\\tilde{\\textbf x}_t\\) Âè™Ë¢´‰ª•‰∏ã‰∏â‰ª∂‰∫ãÊâÄÊ±∫ÂÆöÔºö\nÁõÆÂâçÁöÑ source image \\(\\textbf s_t\\) ÈÅéÂéª \\(t - L\\) Âà∞ \\(t - 1\\) ÂÖ± \\(L\\) ÂÄã source image \\(\\textbf s_{t - L}^{t - 1}\\) ÈÅéÂéª \\(t - L\\) Âà∞ \\(t - 1\\) ÂÖ± \\(L\\) ÂÄãÁîüÊàêÁöÑÂúñÁâá \\(\\tilde{\\textbf x}_{t - L}^{t - 1}\\) ÈÄôÁØáË´ñÊñáÈÄèÈÅéÂØ¶È©óÊ±∫ÂÆö‰∫Ü \\(L = 2\\)„ÄÇ\nË¶ñÈ†ªË®äËôüÂú®ÈÄ£Á∫åÂπÄ‰∏≠ÂåÖÂê´Â§ßÈáèÂÜóÈ§òË®äÊÅØ„ÄÇÂ¶ÇÊûúÂæûÁï∂ÂâçÂπÄÂà∞‰∏ã‰∏ÄÂπÄÁöÑÂÖâÊµÅÊòØÂ∑≤Áü•ÁöÑÔºåÊàëÂÄëÂèØ‰ª• Áî®ÂÆÉ‰æÜÊâ≠Êõ≤Áï∂ÂâçÂπÄ‰ª•‰º∞Ë®à‰∏ã‰∏ÄÂπÄ„ÄÇÈô§‰∫ÜÈÅÆÊìãÂçÄÂüüÂ§ñÔºåÈÄôÁ®Æ‰º∞Ë®àÂú®ÂæàÂ§ßÁ®ãÂ∫¶‰∏äÊòØÊ≠£Á¢∫ÁöÑ„ÄÇÂü∫Êñº ÈÄôÁ®ÆËßÄÂØüÔºåÊàëÂÄëÂ∞á \\(F\\) Ê®°ÂûãÂåñÁÇ∫\n$$ \\tilde{\\textbf x}_t = F(\\tilde{\\textbf x}_{t - L}^{t - 1}, \\tilde{\\textbf s}_{t - L}^t) = (\\textbf 1 - \\tilde{\\textbf m}_t) \\odot \\tilde{\\textbf w}_{t - 1} (\\tilde{\\textbf x}_{t - 1}) + \\tilde{\\textbf m}_t \\odot \\tilde{\\textbf h}_t, \\tag{4} $$\nÂÖ∂‰∏≠Ôºö\n\\(\\odot\\)Ôºöelement-wise Áõ∏‰πò operator \\(\\textbf 1\\)ÔºöÂÖ®ÁÇ∫ \\(1\\) ÁöÑ image Á¨¨‰∏ÄÈ†ÖÔºöÂâç‰∏ÄÂπÄÊâ≠Êõ≤ÁöÑÂÉèÁ¥†Ôºà‰º∞Ë®àÁî± \\(t - 1\\)th frame Âà∞ \\(t\\)th frame ÈÄèÈÅé warping ÁöÑÊîπËÆäÔºâ Á¨¨‰∫åÈ†ÖÔºöÊ®°Á≥äÊñ∞ÁöÑÂÉèÁ¥†ÔºàÊúÉÊúâÊØîËºÉÂ§ßÁöÑËÆäÂãïÔºâ \\(\\tilde{\\textbf w}_{t - 1} = W(\\tilde{\\textbf x}_{t - L}^{t - 1}, \\tilde{\\textbf s}_{t - L}^t)\\)ÔºöÁî± \\(\\tilde{\\textbf x}_{t - 1}\\) Âà∞ \\(\\tilde{\\textbf x}_t\\) ÁöÑ‰º∞Ë®àÂÖâÊµÅ \\(W\\)Ôºöoptical flow prediction function \\(\\tilde{\\textbf h}_t = H(\\tilde{\\textbf x}_{t - L}^{t - 1}, \\textbf s_{t - L}^t)\\)ÔºöÊ®°Á≥äÂæåÁöÑÂúñÁâáÔºàgenerated from scratchÔºâ„ÄÇ \\(\\tilde{\\textbf m}_t = M(\\tilde{\\textbf x}_{t - L}^{t - 1}, \\tilde{\\textbf s}_{t - L}^t)\\)ÔºöÈÅÆÊìã maskÔºåÂÖ∂‰∏≠ÂÄºÁÇ∫ \\(0\\) Âà∞ \\(1\\) ‰πã Èñì \\(M\\)Ôºömask prediction function Conditional image discriminator # $D_I$ output\n$1$ for a true pair $(\\textbf x_t, \\textbf s_t)$ $0$ for a fake pair $(\\tilde{\\textbf x}_t, \\textbf s_t)$ Conditional video discriminator # ‰ª§ $\\textbf w_{t - K}^{t - 2}$Ôºö$K$ ÂÄãÈÄ£Á∫åÂúñÁâá $\\textbf x_{t - K}^{t - 1}$ ÁöÑ $K - 1$ ÂÄãÂÖâÊµÅ\n$D_V$ output\n$1$ for a true pair $(\\textbf x_{t - K}^{t - 1}, \\textbf w_{t - K}^{t - 2})$ $0$ for a fake pair $(\\tilde{\\textbf x}_{t - K}^{t - 1}, \\textbf w_{t - K}^{t - 2})$ Âè¶Â§ñÔºåÊàëÂÄë‰ªãÁ¥πÂÖ©ÂÄã sampling operators\n$\\phi_I$Ôºàrandom image sampling operatorÔºâ Ôºö$\\phi_I(\\textbf x_1^T, \\textbf s_1^T) = (\\textbf x_i, \\textbf s_i)$\nÂÖ∂‰∏≠Ôºö$i$ ÁÇ∫ $1$ Âà∞ $T$ ÁöÑÊï¥Êï∏\n$\\phi_V$Ôºàrandomly retrieve $K$ consecutive framesÔºâ Ôºö$\\phi_V(\\textbf w_1^{T - 1}, \\textbf x_1^T, \\textbf s_1^T) = (\\textbf w_{i - K}^{i - 2}, \\textbf x_{i - K}^{i - 1}, \\textbf s_{i - K}^{i - 1})$\nÂÖ∂‰∏≠Ôºö$i$ ÁÇ∫ $K + 1$ Âà∞ $T + 1$ ÁöÑÊï¥Êï∏\nLearning objective function # $$\\min_F (\\max_{D_I} \\mathcal L_I(F, D_I) + \\max_{D_V} \\mathcal L_V(F, D_V)) + \\lambda_W \\mathcal L_W(F), \\tag{5}$$\nÂÖ∂‰∏≠Ôºö\n$\\mathcal L_I$ÔºöGAN loss for $D_I$ $\\mathcal L_V$ÔºöGAN loss on $K$ consecutive frames for $D_V$ $\\mathcal L_W(F)$Ôºöflow estimation loss $\\lambda_W$ÔºöÂØ¶È©óÂæåÔºåË®≠ÁÇ∫ $10$ GAN loss $\\mathcal L_I$Ôºö\n$$ E _ { \\phi _ { I } \\left( \\mathbf { x } _ { 1 } ^ { T } , \\mathbf { s } _ { 1 } ^ { T } \\right) } \\left[ \\log D _ { I } \\left( \\mathbf { x } _ { i } , \\mathbf { s } _ { i } \\right) \\right] + E _ { \\phi _ { I } \\left( \\tilde { \\mathbf { x } } _ { 1 } ^ { T } , \\mathbf { s } _ { 1 } ^ { T } \\right) } \\left[ \\log \\left( 1 - D _ { I } \\left( \\tilde { \\mathbf { x } } _ { i } , \\mathbf { s } _ { i } \\right) \\right) \\right]. \\tag{6} $$\nGAN loss $\\mathcal L_V$Ôºö\n$$ E _ { \\phi _ { V } \\left( \\mathbf { w } _ { 1 } ^ { T - 1 } , \\mathbf { x } _ { 1 } ^ { T } , \\mathbf { s } _ { 1 } ^ { T } \\right) } \\left[ \\log D _ { V } \\left( \\mathbf { x } _ { i - K } ^ { i - 1 } , \\mathbf { w } _ { i - K } ^ { i - 2 } \\right) \\right] + E _ { \\phi _ { V } \\left( \\mathbf { w } _ { 1 } ^ { T - 1 } , \\tilde { \\mathbf { x } } _ { 1 } ^ { T } , \\mathbf { s } _ { 1 } ^ { T } \\right) } \\left[ \\log \\left( 1 - D _ { V } \\left( \\tilde { \\mathbf { x } } _ { i - K } ^ { i - 1 } , \\mathbf { w } _ { i - K } ^ { i - 2 } \\right) \\right) \\right]. \\tag{7} $$\nÊàëÂÄëÈÄèÈÅéÈÅûËø¥ÁöÑÂëºÂè´ $F$ ‰æÜÂèñÂæó $\\tilde{\\textbf x}_1^T$\nThe flow loss $\\mathcal L_W$ ÊìÅÊúâÂÖ©È†ÖÔºåÁ¨¨‰∏ÄÈ†ÖÊòØ ground truth Âíå‰º∞Ë®àÊµÅÈáè‰πãÈñìÈªûÂ∞ç ÈªûË™§Â∑ÆÔºåÁ¨¨‰∫åÈ†ÖÂâáÊòØÂ∞áÂâç‰∏ÄÂπÄÊâ≠Êõ≤Âà∞‰∏ã‰∏ÄÂπÄÊôÇÁöÑ warping lossÔºö\n$$ \\mathcal { L } _ { W } = \\frac { 1 } { T - 1 } \\sum _ { t = 1 } ^ { T - 1 } \\left( \\left| \\tilde { \\mathbf { w } } _ { t } - \\mathbf { w } _ { t } \\right| _ { 1 } + \\left| \\tilde { \\mathbf { w } } _ { t } \\left( \\mathbf { x } _ { t } \\right) - \\mathbf { x } _ { t + 1 } \\right| _ { 1 } \\right). \\tag{8} $$\nForeground-background prior # $$ F \\left( \\tilde { \\mathbf { x } } _ { t - L } ^ { t - 1 } , \\mathbf { s } _ { t - L } ^ { t } \\right) = \\left( \\mathbf { 1 } - \\tilde { \\mathbf { m } } _ { t } \\right) \\odot \\tilde { \\mathbf { w } } _ { t - 1 } \\left( \\tilde { \\mathbf { x } } _ { t - 1 } \\right) + \\tilde { \\mathbf { m } } _ { t } \\odot \\left( \\left( \\mathbf { 1 } - \\mathbf { m } _ { B , t } \\right) \\odot \\tilde { \\mathbf { h } } _ { F , t } + \\mathbf { m } _ { B , t } \\odot \\tilde { \\mathbf { h } } _ { B , t } \\right) \\tag{9} $$\n4 Experiments # Figure 5: Example sketch-to-face video results. Our method can generate realistic expressions given the edge maps. Figure 6: Example pose-to-dance video results. The left image pair shows the result on the same dancer (with different clothing) doing different motions, while the other two pairs are results on different dancers. 5 Conclusion # Limitaions and future work # Âõ†ÁÇ∫ label maps Ë®äÊÅØ‰∏çË∂≥ÔºåÂ∞éËá¥Âú®ÂêàÊàêËΩâÂΩé‰∏≠ÁöÑËªäÂ≠êÊôÇÈÇÑÊòØÊªøÂõ∞Èõ£ÁöÑ„ÄÇÁåúÊ∏¨Ëß£Ê±∫ÊñπÂºèÔºö Ê∑ªÂä†È°çÂ§ñÁöÑ 3D Ë®äÊÅØÔºå‰æãÂ¶ÇÔºödepth maps„ÄÇ ÂÅ∂ÁàæÊ±ΩËªäÁöÑÈ°èËâ≤ÊúÉÈÄêÊº∏ÊîπËÆäÔºåÈÄôÂÄãÂïèÈ°åÂèØÈÄèÈÅé object tracking ÂéªÂº∑Ëø´Âêå‰∏ÄÂÄãÁâ©‰ª∂È°èËâ≤ ÂßãÁµÇ‰øùÊåÅ‰∏ÄËá¥„ÄÇ Âü∑Ë°åË™ûÁæ©Êìç‰ΩúÁöÑÊôÇÂÄôÔºåÂÅ∂ÁàæÊúÉÂá∫ÁèæÊòéÈ°ØÁöÑ‰∫∫Â∑•ÁóïË∑°ÔºåÈÄôÂèØËÉΩÊòØÂõ†ÁÇ∫ label ÊôÇÂ§™ÈÅéÁ≤óÁ≥ô„ÄÇ ","date":"26 November 2018","externalUrl":null,"permalink":"/posts/paper/paper-vid2vid/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Video-to-Video Synthesis","type":"posts"},{"content":"","date":"25 November 2018","externalUrl":null,"permalink":"/tags/turing/","section":"Tags","summary":"","title":"Turing","type":"tags"},{"content":"Paper Link\n‰ªäÂ§©ÊòØÂè∞ÁÅ£‰πùÂêà‰∏ÄÁ∏£Â∏ÇÈï∑ÈÅ∏ËàâÈöîÂ§©ÔºåÊ±∫ÂÆöË¶Å‰æÜÁúã‰∏ÄÁØá 1950 Âπ¥ÔºåÁî±Ë®àÁÆóÊ©üÁßëÂ≠∏‰πãÁà∂ A.M. Turing ÊâÄÂØ´ÁöÑ Computing Machinery and Intelligence„ÄÇ\nÈÄôÁØá paper ÊèêÂá∫‰∫ÜÈõªËÖ¶Êô∫ËÉΩÁï∂‰∏≠ÂπæÂÄãÈáçË¶ÅÁöÑÊÉ≥Ê≥ïÔºåÊï∏Â≠∏ÊèèËø∞‰∏çÂ§öÔºå‰∏ªË¶ÅËëóÈáçÂú®ÁêÜË´ñ‰∏äÁöÑÊèè Ëø∞„ÄÇ\nÂúñÈùàÊ∏¨Ë©¶ÔºàTuring testÔºâÊòØ AI È†òÂüü‰∏≠Ôºå‰∏ÄÈ†ÖËëóÂêç‰∏îÂÖ∑Áà≠Ë≠∞ÁöÑÊ∏¨Ë©¶ÊñπÊ≥ï„ÄÇÈÄôÊòØ‰ª• Alan Turing Âú® 1950 Á¨¨‰∏Ä‰ªΩË´ñÊñá„ÄåÈÅãÁÆóÊ©üÂô®ËàáÊô∫ËÉΩ„ÄçÔºàComputing Machinery and IntelligenceÔºâÁÇ∫Âü∫Á§éÊâÄË®≠Ë®àÁöÑÂïèÁ≠îÔºåÁõÆÊ®ôÂú®ÂàÜËæ®Ê©üÂô®ÊòØÂê¶ÂÖ∑ÂÇô‰∫∫È°ûÊâÄÂÖ∑ÊúâÁöÑÊô∫ËÉΩ ÔºàIntelligenceÔºâ„ÄÇ\nÊñáÊú¨ÂæàÈï∑ÔºåÂèàÊòØ 1950 Âπ¥ÁöÑËã±ÂºèËã±ÊñáÔºå‰ΩÜÊàëÊúÉË©¶ËëóÂéªÁøªË≠Ø‰∏¶Êï¥ÁêÜÈÄôÁ∂ìÂÖ∏ÁöÑ paper„ÄÇ\n1. The Imitation Game # È¶ñÂÖàÂúñÈùàÊèêÂá∫‰∫Ü‰∏ÄÂÄãÂïèÈ°åÔºö\n\u0026ldquo;Can machines think?\u0026rdquo;\nÈÄôÂÄãÊáâË©≤Ë¶ÅÂæû‰∏ªË©ûÔºàmachinesÔºâÂíåÂãïË©ûÔºàthinkÔºâÁöÑÂÆöÁæ©Âá∫Áôº„ÄÇ\n‰ΩÜÂúñÈùàË™çÁÇ∫ÈáçÊñ∞Áµ¶ machines Âíå think ÂÆöÁæ©ÊòØÂç±Èö™ÁöÑÔºåÊâÄ‰ª•‰ªñÈÅ∏Êìá‰∫ÜÊèêÂá∫Âè¶‰∏ÄÂÄãÂïèÈ°åÔºåËÄå ÈÄôÂÄãÂïèÈ°åÂíåÂéüÂïèÈ°åÁ∑äÂØÜÁõ∏ÈóúÔºåÊúÄÈáçË¶ÅÁöÑÊòØÊòéÁ¢∫ÊÄß„ÄÇ\nÊñ∞ÁöÑÂïèÈ°åÁ®±‰πãÁÇ∫ imitation gameÔºàÊ®°‰ªøÈÅäÊà≤Ôºâ„ÄÇÈúÄË¶Å‰∏âÂÄã‰∫∫‰æÜÁé©ÈÄôÂÄãÈÅäÊà≤Ôºö\nAÔºö‰∏ÄÂÄãÁî∑‰∫∫ BÔºö‰∏ÄÂÄãÂ•≥‰∫∫ CÔºö‰∏ÄÂÄãË©¢Âïè‰∫∫ÔºàÁî∑Â•≥ÁöÜÂèØÔºâ C ÂæÖÂú®‰∏ÄÂÄãËàáÂè¶Â§ñÂÖ©‰∫∫ÈöîÈõ¢ÁöÑÂ±ãÂ≠êË£°„ÄÇ\nÈÅäÊà≤ÁöÑÁõÆÊ®ôÊòØÔºöC Âà§Êñ∑Âá∫Â§ñÈù¢ÁöÑ‰∫∫Âì™ÂÄãÊòØ AÔºüÂì™ÂÄãÊòØ BÔºü\nC Áî®Ê®ôÁ±§ X„ÄÅY ‰ª£Ë°®Â§ñÈù¢ÁöÑÂÖ©ÂÄã‰∫∫„ÄÇ\nÈÅäÊà≤ÁµêÊùüÊôÇÔºå‰ªñË¶ÅË™™Âá∫„ÄåX ÊòØ AÔºåY ÊòØ B„ÄçÊàñËÄÖ„ÄåX ÊòØ BÔºåY ÊòØ A„Äç„ÄÇ\nA ÁöÑÁõÆÊ®ôÊòØÁõ°ÂèØËÉΩÁöÑÈ®ôÈÅé CÔºåËÄå B ÁöÑÁõÆÊ®ôÊòØÂπ´Âä© C ÂÅöÂá∫Ê≠£Á¢∫Âà§Êñ∑„ÄÇ\nÁèæÂú®ÊàëÂÄëÊèêÂá∫‰∏ÄÂÄãÂïèÈ°åÔºö\n„ÄåÂ¶ÇÊûúÂú®ÈÄôÈÅäÊà≤‰∏≠ÔºåÁî®‰∏ÄÂÄãÊ©üÂô®Êìî‰ªª A ÁöÑËßíËâ≤„Äç\nÂ∞áÊúÉÁôºÁîü‰ªÄÈ∫ºÊÉÖÊ≥ÅÔºüÂêåËàá‰∏ÄÁî∑ÔºàAÔºâ‰∏ÄÂ•≥ÔºàBÔºâÁé©ÈÄôÂÄãÈÅäÊà≤Áõ∏ÊØîÔºåC Âà§Êñ∑ÈåØË™§ÁöÑÈ†ªÁéáÊòØÂê¶ÁôºÁîü ËÆäÂåñÔºüÈÄôÂÄãÂïèÈ°åÂèñ‰ª£‰∫ÜÂéüÂÖàÁöÑÂïèÈ°åÔºö\u0026ldquo;Can machines think?\u0026quot;„ÄÇ\n2. Critique of the New Problem # Êñ∞ÂïèÈ°åÁöÑÂÑ™Âã¢Âú®ÊñºÔºöÂÆÉÊää‰∏ÄÂÄã‰∫∫ÁöÑÈ´îÂäõÂíåÊô∫ÂäõÂÆåÂÖ®ÂçÄÂàÜÈñã‰æÜ„ÄÇÊñ∞ÁöÑË©ïÂà§Ê®ôÊ∫ñÁöÑÂÖ∂ÂÆÉÂÑ™Âã¢Âú®‰∏ã Èù¢ÁöÑÊ®£‰æãÂïèÈ°åÂíåÂõûÁ≠î‰∏≠È°ØÁ§∫‰∫ÜÂá∫‰æÜÔºö\nQÔºöË´ãÂØ´‰∏ÄÈ¶ñ‰ª• Forth Bridge ÁÇ∫‰∏ªÈ°åÁöÑË©©„ÄÇ AÔºöÊàëÁÑ°ËÉΩÁÇ∫ÂäõÔºåÊàëÂæû‰æÜÈÉΩ‰∏çËÉΩÂØ´Ë©©„ÄÇ QÔºö 34957 Âä† 70764 Á≠âÊñºÂ§öÂ∞ëÔºü AÔºöÔºàÂÅú‰∫Ü‰∏âÂçÅÁßíÈêòÂæåÁµ¶Âá∫Á≠îÊ°à) 105621„ÄÇ QÔºö‰Ω†Áé©Ë±°Ê£ãÂóéÔºü AÔºöÁé©„ÄÇ QÔºöÊàëÁöÑÁéãÂú® K1ÔºåÊ≤íÊúâÂà•ÁöÑÊ£ãÂ≠ê‰∫ÜÔºå‰Ω†Âè™ÊúâÁéãÂú® K6ÔºåËªäÂú® R1„ÄÇÊèõ‰Ω†Ëµ∞Ôºå‰Ω†Ëµ∞Âì™Ê≠•Ôºü AÔºöÔºàÂçÅ‰∫îÁßíÈêòÁöÑÂÅúÈ†ìÂæåÔºâËªäÁßªÂãïÂà∞ R8ÔºåÂ∞áËªç„ÄÇ ÈÄôÁ®ÆÂïèÁ≠îÂΩ¢ÂºèÂπæ‰πéÈÅ©Áî®ÊñºÊàëÂÄëÊÉ≥Ë¶ÅÂåÖÊã¨ÁöÑ‰∫∫È°ûË°åÁÇ∫ÁöÑ‰∏ÄÂàáÂΩ¢Âºè„ÄÇÊàëÂÄë‰∏çÂ∏åÊúõÂõ†ÁÇ∫‰∏ÄÂÄãÊ©üÂô®‰∏ç ËÉΩÂú®ÈÅ∏ÁæéÊØîË≥Ω‰∏≠ÂãùÂá∫Â∞±Ë™çÁÇ∫ÂÆÉÁÑ°ËÉΩÔºõÊ≠£Â¶ÇÊàëÂÄë‰∏çËÉΩÂõ†ÁÇ∫‰∏ÄÂÄã‰∫∫‰∏çËÉΩÂú®ÂíåÈ£õÊ©üË≥ΩË∑ëÁöÑÊØîË≥Ω‰∏≠Âãù Âá∫Â∞±Ë™çÁÇ∫‰ªñÁÑ°ËÉΩ‰∏ÄÊ®£„ÄÇÊàëÂÄëÁöÑÈÅäÊà≤Ë®≠ÂÆöËÆìÈÄô‰∫õÁÑ°ËÉΩËÆäÂæóÁÑ°ÈóúÁ∑äË¶Å„ÄÇÂè™Ë¶ÅÂèÉËàáËÄÖË™çÁÇ∫ÂêàÈÅ© Ôºå‰ªñÂÄëÂèØ‰ª•ÂêπÁâõ„ÄÇÂèØ‰ª•ÊääËá™Â∑±ÊèèËø∞ÊàêÈ≠ÖÂäõÁÑ°Èôê„ÄÅÂº∑Â£ØÁÑ°ÊØî„ÄÅËã±ÂãáÁÑ°Áïè„ÄÇËÄå C ÁÑ°Ê≥ïË¶ÅÊ±Ç‰ªñÂÄë ÂÅöÂØ¶ÈöõÁöÑÂ±ïÁ§∫„ÄÇ\nÂ∞çÈÄôÂÄãÈÅäÊà≤ÁöÑÊâπË©ïÂèØËÉΩÊòØÔºöÊ©üÂô®Âú®ÈÅäÊà≤ÁöÑÊàêÊïó‰∏≠Âç†Êúâ‰∫ÜÈÅéÂ§öÁöÑÊØîÈáç„ÄÇÂ¶ÇÊûú‰∏ÄÂÄã‰∫∫Ë©¶ÂúñÂÅáË£ùÊàê ‰∏ÄÂÄãÊ©üÂô®ÁöÑË©±Ôºå‰ªñËÇØÂÆöÊòØ‰∏ÄÂÄãËπ©ËÖ≥ÁöÑÊºîÂì°„ÄÇ‰ªñÊúÉÁî±ÊñºÁÆóË°ìÊñπÈù¢ÁöÑÁ∑©ÊÖ¢Âíå‰∏çÊ∫ñÁ¢∫Á´ãÂç≥Êö¥Èú≤„ÄÇÊ©ü Âô®ÊúÉ‰∏çÊúÉËß£Ê±∫‰∫Ü‰∏Ä‰∫õÊáâË©≤ÊòØÊÄùËÄÉÁöÑÂïèÈ°åÔºåÂÖ∂Ëß£Ê±∫ÊñπÂºèÂçªÂíå‰∫∫ÁöÑÊñπÂºèÁõ∏Â∑ÆÁîöÈÅ†ÔºüÈÄôÂÄãÂèçÂ∞çÊÑèË¶ã Á¢∫ÂØ¶ÂæàÊ£òÊâã„ÄÇ‰ΩÜÊòØÔºåËá≥Â∞ëÊàëÂÄëÂèØ‰ª•Ë™™ÔºåÂÑòÁÆ°Â¶ÇÊ≠§ÔºåÊ©üÂô®ÂèØ‰ª•Ë¢´Ë®≠Ë®àÂæóÂèØ‰ª•ÂæàÂ•ΩÁöÑÁé©ÈÄôÂÄãÊ®°‰ªø ËÄÖÈÅäÊà≤„ÄÇÊàëÂÄë‰∏çÈúÄË¶ÅÂ∞çÈÄôÂÄãÂïèÈ°åÈÅéÂàÜÊìîÂøÉ„ÄÇ\nÊúâ‰∏ÄÁ®ÆÊÉÖÊ≥ÅÊòØÊ©üÂô®Âú®Áé©Ê®°‰ªøËÄÖÈÅäÊà≤ÊôÇÁöÑÊúÄ‰Ω≥Á≠ñÁï•ÊòØÂÅöÂà•ÁöÑ‰∫ãËÄå‰∏çÊòØÊ®°‰ªø‰∫∫ÁöÑË°åÁÇ∫„ÄÇÈÄôÁ®ÆÊÉÖÊ≥Å ÊòØÂèØËÉΩÁöÑ„ÄÇ‰ΩÜÊòØÊàëË™çÁÇ∫ÈÄôÊ®£ÁöÑÊÉÖÊ≥Å‰∏¶Ê≤íÊúâ‰ªòÂá∫Â§öÂ§ßÁöÑÂä™Âäõ„ÄÇ‰∏çÁÆ°ÊÄéÊ®£ÔºåÊú¨Êñá‰∏¶‰∏çË©¶ÂúñÁ†îÁ©∂ÈÄô ÂÄãÈÅäÊà≤ÁöÑÁêÜË´ñ„ÄÇÊàëÂÄëÂÅáÂÆöÊ©üÂô®ÁöÑÊúÄÂÑ™Á≠ñÁï•ÊòØÂä™ÂäõÊèê‰æõÂíå‰∫∫‰∏ÄÊ®£ÁöÑÁ≠îÊ°à„ÄÇ\n3. The Machines Concerned in the Game # Âè™ÊúâÂú®ÊàëÂÄëÁ¢∫ÂÆö„ÄåÊ©üÂô®„ÄçÈÄôÂÄãË©ûÁöÑÊÑèÁæ©‰πãÂæåÔºåÊàëÂÄëÂú® 1. ‰∏≠ÊèêÂá∫ÁöÑÂïèÈ°åÊâçÊòØÂÆöÁæ©ÂÆåÊàê„ÄÇ\nÊàëÂÄëÂ∏åÊúõËÉΩÁ¨¶Âêà‰ª•‰∏ã‰∏âÈªûË¶ÅÊ±ÇÔºö\n‰∏ÄÂàáÂ∑•Á®ãÁßëÊäÄÈÉΩÂÖÅË®±‰ΩøÁî®Âú®ÊàëÂÄëÁöÑÊ©üÂô®‰∏ä„ÄÇ ‰∏ÄÂÄãÊàñ‰∏ÄÁµÑÂ∑•Á®ãÂ∏´Ë£ΩÈÄ†Âá∫‰∏ÄÂÄãÂèØ‰ª•Â∑•‰ΩúÁöÑÊ©üÂô®Ôºå‰ΩÜÂõ†ÁÇ∫‰ªñÂÄë‰ΩøÁî®‰∫ÜÂü∫ÊñºÂØ¶È©óÁöÑÊñπÊ≥ï‰æÜË®≠ Ë®à‰ªñÔºå‰ª•Ëá≥ÊñºÈÄôÂÄãÊ©üÂô®ÁöÑÂ∑•‰ΩúÊñπÊ≥ï‰∏çËÉΩË¢´ÂÆÉÁöÑÂª∫ÈÄ†ËÄÖÂæàÂ•ΩÁöÑÊèèËø∞„ÄÇ ÊääÈÄöÈÅéÁîüËÇ≤Ë™ïÁîüÁöÑ‰∫∫ÂæûÊ©üÂô®ÁöÑÊ¶ÇÂøµ‰∏≠ÊéíÈô§Âá∫Âéª„ÄÇ Ë¶ÅËÆìÂÆöÁæ©ÂêåÊôÇÊªøË∂≥ÈÄô‰∏âÂÄãË¶ÅÊ±ÇÊòØÂõ∞Èõ£ÁöÑ„ÄÇ‰æãÂ¶ÇÔºå‰Ω†ÂèØËÉΩÊúÉË¶ÅÊ±ÇÈÄô‰∫õÂ∑•Á®ãÂ∏´ÈÉΩÊòØÂêå‰∏ÄÂÄãÊÄßÂà•Ôºå ‰ΩÜÊòØÈÄôÂØ¶Èöõ‰∏ä‰πüÊòØÁÑ°Ê≥ïÊªøË∂≥Ë¶ÅÊ±Ç„ÄÇÂõ†ÁÇ∫ÈÄöÈÅéÂñÆÂÄã‰∫∫ÁöÑ‰∏ÄÂÄãÁöÆËÜöÁ¥∞ËÉûÁî¢Áîü‰∏ÄÂÄãÂÆåÊï¥ÁöÑÂÄãÈ´î‰∏çÊòØ ÂÆåÂÖ®‰∏çÂèØËÉΩÁöÑ„ÄÇÈÄôÂ∞áÊòØÁîüÁâ©ÁßëÊäÄÁöÑÂÖ∑ÊúâÂäÉÊôÇ‰ª£ÊÑèÁæ©ÁöÑÁ™ÅÁ†¥Ôºå‰ΩÜÊòØÊàëÂÄë‰∏¶‰∏çÂ∏åÊúõÊää‰ªñÊ¶ÇÊã¨Âú®„Äå Âª∫ÈÄ†‰∫Ü‰∏ÄÂÄãÊÄùÁ∂≠Ê©üÂô®„Äç‰∏≠„ÄÇÈÄôÂ∞±Ë¶ÅÊ±ÇÊàëÂÄëÊîæÊ£ÑÂÖÅË®±‰∏ÄÂàáÁöÑÁßëÊäÄÁöÑÊâìÁÆó„ÄÇÊàëÂÄëÊõ¥È°òÊÑèÂ∞á„ÄåÊÄùÁ∂≠ Ê©üÂô®„ÄçÁöÑÁ†îÁ©∂ÈõÜ‰∏≠Âú®‰∏ÄÁ®ÆË¢´Á®±ÁÇ∫„ÄåÈõªÂ≠êË®àÁÆóÊ©ü„ÄçÊàñ„ÄåÊï∏Â≠óË®àÁÆóÊ©ü„ÄçÁöÑÊ©üÂô®‰∏ä„ÄÇÂõ†Ê≠§ÔºåÊàëÂÄëÂÉÖ ÂÉÖÂÖÅË®±„ÄåÊï∏Â≠óË®àÁÆóÊ©ü„ÄçÂèÉÂä†ÊàëÂÄëÁöÑÈÅäÊà≤„ÄÇ\nÁ¨¨‰∏ÄÁúºÁúã‰∏äÂéªÔºåÈÄôÂÄãÈôêÂà∂ÈÅéÊñºÂö¥Ê†º„ÄÇ‰∫ãÂØ¶‰∏ä‰∏¶ÈùûÂ¶ÇÊ≠§„ÄÇÈ¶ñÂÖàÊàëÂÄëÈúÄË¶ÅÁ∞°Ë¶ÅÁöÑ‰∫ÜËß£‰∏Ä‰∏ãÈÄô‰∫õË®à ÁÆóÊ©üÂèäÂÖ∂ÂÆÉÂÄëÁöÑ‰∏Ä‰∫õÊÄßË≥™„ÄÇ\n‰Ω†ÂèØËÉΩÊúÉË™™ÔºöÂ¶ÇÊûúÈÅî‰∏çÂà∞ÊàëÂÄëÁÇ∫„ÄåÊÄùËÄÉ„ÄçÂÆöÁöÑË©ïÂà§Ê®ôÊ∫ñÔºåÈÄôÊ®£ÁöÑÊï∏Â≠óË®àÁÆóÊ©üÂè™ÊúÉ‰ª§‰∫∫Â§±ÊúõÔºå ‰∏îÂú®ÈÅäÊà≤‰∏≠Ë°®Áèæ‰∏ç‰Ω≥„ÄÇ\nÁõÆÂâçÂ∑≤Á∂ìÊúâË®±Â§öÊï∏Â≠óË®àÁÆóÊ©üÂú®Â∑•‰Ωú„ÄÇ‰∫∫ÂÄëÂèØËÉΩÊúÉÂïèÔºö„ÄåÁÇ∫‰ªÄÈ∫º‰∏çÊãø‰∏ÄÂè∞Áõ¥Êé•‰ΩúÂØ¶È©óÔºüÂæàÂÆπÊòì Â∞±ËÉΩÊªøË∂≥ÈÅäÊà≤ÁöÑË¶ÅÊ±Ç„ÄÇÂèØ‰ª•ÂêåÊôÇÊúâË®±Â§öÁöÑ C ÂèÉÂä†ÈÅäÊà≤ÔºåÁÑ∂ÂæåÁµ±Ë®àÂá∫Âà§Êñ∑Ê≠£Á¢∫ÁöÑÊ©üÁéá„Äç„ÄÇÂ∞ç ÈÄôÂÄãÂïèÈ°åÁöÑÁ∞°Ë¶ÅÂõûÁ≠îÂ∞±ÊòØÔºöÊàëÂÄë‰∏¶‰∏çÊòØË¶ÅÂïèÊòØ‰∏çÊòØÊâÄÊúâÁöÑÊï∏Â≠óË®àÁÆóÊ©üÈÉΩËÉΩÂú®ÈÅäÊà≤‰∏≠Ë°®ÁèæËâØÂ•Ω Ôºå‰πü‰∏çÊòØË¶ÅÂïèÁèæÂú®ÁöÑË®àÁÆóÊ©ü‰∏≠ÊúâÊ≤íÊúâÊ©üÂô®ËÉΩÂ§†ÈÄöÈÅéÂØ¶È©ó„ÄÇËÄåÊòØË¶ÅÂïèÔºö\nÊòØÂê¶Â≠òÂú®‰∏ÄÂè∞ÊÉ≥ÂÉè‰∏≠ÁöÑÊ©üÂô®ËÉΩÂ§†ÈÄöÈÅéÈÅäÊà≤„ÄÇ\nÈÄôÂÉÖÂÉÖÊòØ‰∏ÄÂÄãÁ∞°Ë¶ÅÂõûÁ≠îÔºåÂæåÈù¢Â∞áÂæûÂè¶‰∏ÄÂÄãËßíÂ∫¶ËÄÉÊÖÆÈÄôÂÄãÂïèÈ°å„ÄÇ\n4. Digital Computers # Êï∏Â≠óË®àÁÆóÊ©üÂèØ‰ª•Ë¢´Ëß£ÈáãÊàêÔºö\nÂèØ‰ª•Âü∑Ë°å‰∏ÄÂàáË®àÁÆó‰∫∫Âì°ËÉΩÂ§†ÈÄ≤Ë°åÁöÑÊìç‰Ωú„ÄÇ\n‰∏ÄÂÄãË®àÁÆó‰∫∫Âì°ÊáâË©≤Âö¥Ê†ºÈÅµÂÆàË¶èÂâá„ÄÇ‰ªñÂú®‰∏ÄÂàáÁ¥∞ÁØÄ‰∏äÔºåÈÉΩÊ≤íÊúâ‰∏ÄÁµ≤ÂÅèÈõ¢ÁöÑÊ¨äÂäõ„ÄÇÊàëÂÄëÂèØ‰ª•ÂÅáË®≠ ÈÄô‰∫õË¶èÂâáÂØ´Âú®‰∏ÄÊú¨Êõ∏‰∏ä„ÄÇÊØèÊ¨°Ë¢´ÂàÜÈÖçÊñ∞ÁöÑ‰ªªÂãôÁöÑÊôÇÂÄôÔºåÂ∞áÊúÉÊîπËÆäÂü∑Ë°åÊ≠•È©ü„ÄÇ‰ªñÊúâÁÑ°ÈôêÁöÑÁ¥ôÈÄ≤ Ë°åË®àÁÆóÔºå‰ªñÂèØ‰ª•Áî®„ÄåÁÆóÁõ§„ÄçÈÄ≤Ë°å‰πòÊ≥ïÂíåÂä†Ê≥ïÈÅãÁÆóÔºåÈÄô‰∏¶‰∏çÈáçË¶Å„ÄÇ\nÂ¶ÇÊûú‰ΩøÁî®‰∏äËø∞Ëß£ÈáãÂÆöÁæ©Êï∏Â≠óË®àÁÆóÊ©üÔºåÊàëÂÄëÂèØËÉΩÈô∑ÂÖ•Âæ™Áí∞ÂÆöÁæ©„ÄÇÁÇ∫Èò≤Ê≠¢ÈÄôÁ®ÆÊÉÖÊ≥ÅÁôºÁîüÔºåÊàëÂÄëÂàó Âá∫ÊúüÊúõÁµêÊûúÂæóÂá∫ÁöÑÊñπÂºè„ÄÇ‰∏ÄÂÄãÊï∏Â≠óË®àÁÆóÊ©üÈÄöÂ∏∏Áî±‰∏Ä‰∏ã‰∏âÂÄãÈÉ®ÂàÜÁµÑÊàêÔºö\ni. Â≠òÂÑ≤Âô®ÔºàStoreÔºâ ii. Âü∑Ë°åÂñÆÂÖÉÔºàExecutive unitÔºâ iii. ÊéßÂà∂Âô®ÔºàControlÔºâ\nÂ≠òÂÑ≤Âô®Áî®‰æÜÂ≠òË≤Ø‰ø°ÊÅØÔºåÂ∞çÊáâÊñºË®àÁÆóÂì°ÁöÑÁ¥ô„ÄÇÁ¥ô‰∏äÊó¢Ë®òÈåÑ‰∫Ü‰ªñÁöÑË®àÁÆóÈÅéÁ®ãÔºå‰πüË®òÈåÑ‰∫Ü‰ªñÊâÄÈÅµÂæ™ ÁöÑË®àÁÆóÊ≠•È©ü„ÄÇÂêåÊ®£ÔºåÂ¶ÇÊûúË®àÁÆóÂì°ÈÄ≤Ë°åÂøÉÁÆóÁöÑË©±Ôºå‰∏ÄÈÉ®ÂàÜÂ≠òÂÑ≤Âô®Â∞áÂ∞çÊáâÊñº‰ªñÁöÑË®òÊÜ∂„ÄÇ\nÂü∑Ë°åÂñÆÂÖÉÊòØ‰∏ÄÊ¨°Ë®àÁÆó‰∏≠ÂñÆÂÄãÊìç‰ΩúÈÄ≤Ë°åÁöÑÂ†¥ÊâÄ„ÄÇÊìç‰ΩúÂ∞çË±°Èö®ËëóÊ©üÂô®ÁöÑ‰∏çÂêåËÄå‰∏çÂêå„ÄÇÈÄöÂ∏∏‰∏ÄÂÄãÁõ∏ Áï∂Èï∑ÁöÑÊìç‰ΩúÂèØËÉΩÊòØÔºö„Äå3540675445 ‰πò‰ª• 7076345687„ÄçÔºå‰ΩÜÊòØ‰∏Ä‰∫õÊ©üÂô®ÂèØËÉΩÂÉÖËÉΩÂ§†Âü∑Ë°å„ÄåÂØ´ ‰∏ã 0„Äç‰∏ÄÈ°ûÁöÑÁ∞°ÂñÆÊìç‰Ωú„ÄÇ\n‰∏äÈù¢ÊõæÁ∂ìÊèêÂà∞Ë®àÁÆóÂì°ÁöÑ„ÄåË®òÈåÑÊìç‰ΩúÊ≠•È©üÁöÑÊõ∏„ÄçÁî±Ê©üÂô®‰∏≠ÁöÑ‰∏ÄÈÉ®ÂàÜÂ≠òÂÑ≤Âô®‰ª£Êõø„ÄÇ‰∏çÂ¶®ÊääÂÆÉÂÄëÁ®± ÁÇ∫„ÄåÊåá‰ª§ÂàóË°®„Äç„ÄÇÊéßÂà∂Âô®ÁöÑËÅ∑ËÉΩÂ∞±ÊòØ‰øùË≠âÈÄô‰∫õÊåá‰ª§ÊåâÁÖßÊ≠£Á¢∫ÁöÑÈ†ÜÂ∫èÂæóÂà∞Ê≠£Á¢∫ÁöÑÂü∑Ë°å„ÄÇÊéß Âà∂Âô®ÁöÑË®≠Ë®à‰ΩøÂæóÈÄôÊàêÁÇ∫ÂèØËÉΩ„ÄÇ\nÂ≠òÂÑ≤Âô®‰∏äÁöÑ‰ø°ÊÅØÈÄöÂ∏∏Ë¢´ÂàÜÁÇ∫Ë®±Â§öÁöÑÂ∞èÂåÖÂ≠òÊîæ„ÄÇ‰æãÂ¶ÇÔºåÂú®‰∏ÄÂÄãÊ©üÂô®‰∏≠Ôºå‰∏ÄÂÄãÂåÖÁî±ÂçÅÂÄãÂçÅÈÄ≤Âà∂Êï∏ ÁµÑÊàê„ÄÇÊØèÂÄãÂ≠òÂÑ≤‰ø°ÊÅØÁöÑÂåÖÈÉΩ‰ª•ÊüêÁ®ÆÁ≥ªÁµ±ÁöÑÊñπÂºèÂàÜÈÖç‰∫ÜÊï∏Â≠ó„ÄÇ\n‰ª•‰∏ã‰ªãÁ¥πÂπæÁ®ÆÂÖ∏ÂûãÁöÑÊåá‰ª§ÔºàÊúâÈªûÂÉèÊòØË®àÊ¶ÇË™≤ÊâÄÊïôÈÅéÁöÑÔºâÔºö\nadd # 6809 4302 17ÔºöÊääÂ≠òÊîæÂú® 6809 ÁöÑÊï∏ÂíåÂ≠òÊîæÂú® 4302 ÁöÑÊï∏Áõ∏Âä†Ôºå‰∏¶ÊääÁµêÊûúÂ≠òÂÖ•Âæå‰∏ÄÂÄãÂ≠òÂÑ≤ ‰ΩçÁΩÆ„ÄÇ\nÈÄôË£°Ôºå17 ÊåáÁöÑÊòØÂèØ‰ª•Â∞çÈÄôÂÖ©ÂÄãÊï∏ÈÄ≤Ë°åÁöÑÊâÄÊúâÊìç‰Ωú‰∏≠ÁöÑÂÖ∂‰∏≠‰∏ÄÂÄãÊìç‰Ωú„ÄÇÈÄôË£°ÁöÑÊìç‰ΩúÂ¶Ç‰∏äÊâÄÁ§∫ ÊòØ„ÄåÈÄ≤Ë°åÂä†Ê≥ïÊìç‰Ωú„Äç\nloop # ÁèæÂú®Âü∑Ë°åÂ≠òÂÑ≤Âú® 5606 ÁöÑÊåá‰ª§Ôºå‰∏¶ÂæûÈÇ£Ë£°ÁπºÁ∫åÂü∑Ë°å„ÄÇ\nÂ¶ÇÊûú 4505 ‰ΩçÁΩÆÊòØ 0ÔºåÈÇ£È∫ºÂü∑Ë°åÂ≠òÂÑ≤Âú® 6707 ÁöÑÊåá‰ª§ÔºåÂê¶ÂâáÁπºÁ∫å„ÄÇ\nÂæåÈù¢ÈÄôÁ®ÆÊåá‰ª§ÈùûÂ∏∏ÈáçË¶ÅÔºåÂõ†ÁÇ∫ÂÆÉ‰ΩøÂæóÊàëÂÄëËÉΩÂ§†ÂèçË¶ÜÂü∑Ë°å‰∏ÄÊÆµÊåá‰ª§Áõ¥Âà∞ÊªøË∂≥‰∏Ä‰∫õÊ¢ù‰ª∂„ÄÇ\nËÆÄËÄÖÂøÖÈ†àÊé•ÂèóË®àÁÆóÊ©üÂèØ‰ª•ÊåâÁÖßÊàëÂÄëÊâÄÊèêÂá∫ÁöÑÂéüÂâáÊâÄÂª∫ÈÄ†ÁöÑ„ÄÇÈÄô‰∫õË®àÁÆóÊ©üÂπæ‰πéËÉΩÂ§†ÂÆåÂÖ®Ê®°‰ªø‰∏Ä ÂÄãË®àÁÆóÂì°„ÄÇ\nÁ∑®Á®ãÔºàprogrammingÔºâ # ‰∏äÈù¢ÊàëÂÄëÊèêÂà∞ÁöÑË®àÁÆóÂì°Ë¶ÅÈÅµÂÆàÁöÑÂØ´Âú®Êõ∏‰∏äÁöÑÊ≠•È©üÂØ¶Èöõ‰∏äÂÉÖÂÉÖÊòØ‰∏ÄÂÄãË®≠ÊÉ≥„ÄÇ‰∏ÄÂÄãÁúüÊ≠£ÁöÑË®àÁÆóÂì° ËÉΩÂ§†Ë®òÂæó‰ªñÂÄëÈúÄË¶ÅÂÅö‰ªÄÈ∫º„ÄÇÂ¶ÇÊûú‰∏ÄÂÄã‰∫∫ÊÉ≥ËÆìÊ©üÂô®Ê®°‰ªøË®àÁÆóÂì°Âü∑Ë°åË§áÈõúÁöÑÊìç‰ΩúÔºå‰ªñÂøÖÈ†àÂëäË®¥Ë®à ÁÆóÊ©üË¶ÅÂÅö‰ªÄÈ∫ºÔºå‰∏¶‰∏îÊääÁµêÊûúÁøªË≠ØÊàêÊüêÁ®ÆÂΩ¢ÂºèÁöÑÊåá‰ª§Ë°®„ÄÇÈÄôÁ®ÆÊßãÈÄ†Êåá‰ª§Ë°®ÁöÑË°åÁÇ∫ÈÄöÂ∏∏Ë¢´Á®±ÁÇ∫„Äå Á∑®Á®ã„ÄçÔºàprogrammingÔºâ„ÄÇÁµ¶‰∏ÄÂÄãÊ©üÂô®Á∑®Á®ã‰Ωø‰πãÂü∑Ë°åÊìç‰Ωú AÔºåÊÑèÂë≥ËëóÊääÂêàÈÅ©ÁöÑÊåá‰ª§Ë°®ÊîæÂÖ•Ê©ü Âô®‰ª•‰ΩøÂÆÉËÉΩÂ§†Âü∑Ë°å A„ÄÇ\nrandom # Êï∏Â≠óË®àÁÆóÊ©üÁöÑ‰∏ÄÂÄãÊúâË∂£ËÆäÂåñÊòØËÆìÂÖ∂ÊàêÁÇ∫„ÄåÂ∏∂ÊúâÈö®Ê©üÂÖÉÁ¥†ÁöÑÊï∏Â≠óË®àÁÆóÊ©ü„Äç„ÄÇÂÆÉÂÄëÊúâÁâπÂÆöÁöÑÊåá‰ª§ ÈÄ≤Ë°åÊì≤Ëâ≤Â≠êÊàñËÄÖÂà•ÁöÑÁ≠âÂÉπÈõªÂ≠êÈÅéÁ®ã„ÄÇ‰æãÂ¶ÇÂÖ∂‰∏≠‰∏ÄÂÄãÊòØ„ÄåÊì≤Ëâ≤Â≠ê‰∏¶ÊääÁµêÊûúÂ≠òÂÖ•‰ΩçÁΩÆ 1000„ÄÇ„Äç Êúâ‰∫õÊôÇÂÄôÈÄôÊ®£ÁöÑÊ©üÂô®Ë¢´ÊèèËø∞ÁÇ∫ÂÖ∑ÊúâËá™Áî±ÊÑèÂøóÔºåÔºàÂÑòÁÆ°ÊàëËá™Â∑±‰∏¶‰∏ç‰ΩøÁî®ÈÄôÂÄãË°®Ëø∞Ôºâ„ÄÇÈÄöÂ∏∏‰∏¶‰∏ç ËÉΩÈÄöÈÅéËßÄÂØüÂà§Êñ∑Âá∫‰∏ÄÂÄãÊ©üÂô®ÊúâÊ≤íÊúâÈö®Ê©üÂÖÉÁ¥†„ÄÇÂõ†ÁÇ∫‰∏ÄÂÄãÁõ∏‰ººÁöÑÊïàÊûúÂèØ‰ª•ÈÄöÈÅé‰æùÊìöÂúìÂë®Áéá \\(\\pi\\) ÁöÑÂ∞èÊï∏ÈÉ®ÂàÜÈÄ≤Ë°åÈÅ∏Êìá‰æÜÁî¢Áîü„ÄÇ\nÁµïÂ§ßÂ§öÊï∏ÁöÑÊï∏Â≠óË®àÁÆóÊ©üÂÖ∑ÊúâÊúâÈôêÁöÑÂ≠òÂÑ≤Á©∫Èñì„ÄÇËÆì‰∏ÄÂÄãË®àÁÆóÊ©üÁç≤ÂæóÁÑ°ÈôêÁöÑÂ≠òÂÑ≤Á©∫Èñì‰∏¶‰∏çÂ≠òÂú®ÁêÜ Ë´ñÂõ∞Èõ£„ÄÇÁï∂ÁÑ∂ÔºåÂú®‰ªª‰ΩïÊôÇÂÄôÈÉΩÂè™ÊúâÊúâÈôêÁöÑÈÉ®ÂàÜË¢´‰ΩøÁî®„ÄÇÂêåÊ®£ÔºåÂè™ÊúâÊúâÈôêÁöÑÂ≠òÂÑ≤Á©∫ÈñìË¢´Âª∫ÈÄ†„ÄÇ ‰∏çÈÅéÊàëÂÄëÂèØ‰ª•ÊÉ≥ÂÉèË∂ä‰æÜË∂äÂ§öÁöÑÂ≠òÂÑ≤Á©∫ÈñìÂèØ‰ª•Ê†πÊìöË¶ÅÊ±ÇÊ∑ªÂä†„ÄÇÈÄôÊ®£ÁöÑË®àÁÆóÊ©üÂÖ∑ÊúâÁâπÊÆäÁöÑÁêÜË´ñÂÉπ ÂÄºÔºåÂ∞áË¢´Á®±ÁÇ∫ÁÑ°ÈôêÂÆπÈáèË®àÁÆóÊ©ü„ÄÇ\nÊúâÈóúË®àÁÆóÊ©üË®≠ÊÉ≥ÁöÑÂæàÊó©Â∞±Áî¢Áîü‰∫Ü„ÄÇÂú® 1828 Ëá≥ 1839 Âπ¥Êìî‰ªªÂäçÊ©ãÂ§ßÂ≠∏ÁöÑ Lucasian Êï∏Â≠∏ÊïôÊéà ÁöÑ Charles Babbage Ë®≠ÊÉ≥‰∫ÜÈÄôÊ®£ÁöÑÊ©üÂô®Ôºå‰∏¶Á®±‰πãÁÇ∫ÂàÜÊûêÊ©üÔºå‰ΩÜÊòØ‰∏¶Ê≤íÊúâÂÆåÊàêÂÆÉ„ÄÇÂÑòÁÆ° Babbage Êúâ‰∫ÜÊâÄÊúâÁöÑÈóúÈçµÊÄùÊÉ≥Ôºå‰ªñÁöÑÊ©üÂô®Âú®ÈÇ£ÂÄãÊôÇ‰ª£ÂçªÊ≤íÊúâÂê∏Âºï‰∫∫ÁöÑÂâçÊôØ„ÄÇÂÆÉËÉΩÂ§†ÈÅîÂà∞ÁöÑÈÅã ÁÆóÈÄüÂ∫¶ËÇØÂÆöÊØî‰∏ÄÂÄãË®àÁÆóÂì°Ë¶ÅÂø´Ôºå‰ΩÜÊòØÂÉÖÁõ∏Áï∂ÊñºÊõºÂæπÊñØÁâπÊ©üÁöÑÁôæÂàÜ‰πã‰∏ÄÔºåËÄåÊõºÂæπÊñØÂúñÊ©ü‰πüÊòØÁèæ ‰ª£Ë®àÁÆóÊ©ü‰∏≠Áõ∏Áï∂ÊÖ¢ÁöÑ‰∏ÄÂÄã„ÄÇÂàÜÊûêÊ©üÁöÑÂ≠òÂÑ≤ÂÖ®ÈÉ®Áî±Áî®Ëº™Â≠êÂíåÂç°ÁâáÁµÑÊàêÁöÑÊ©üÊ¢∞ÂØ¶Áèæ„ÄÇ\n‰∫ãÂØ¶‰∏äÔºåÂÖ®ÈÉ®Áî±Ê©üÊ¢∞ÁµÑÊàêÁöÑ Babbage ÂàÜÊûêÊ©üÂπ´Âä©ÊàëÂÄëÁ†¥Èô§‰∫Ü‰∏ÄÂÄãËø∑‰ø°„ÄÇÈÄöÂ∏∏ÊàëÂÄëÂ∞çÁèæ‰ª£Ë®à ÁÆóÊ©üÊòØÈõªÂ≠êÁöÑÈÄôÂÄã‰∫ãÂØ¶Áµ¶‰∫àÁõ∏Áï∂ÁöÑÈáçË¶ñ„ÄÇÂêåÊ®£ÔºåÁ•ûÁ∂ìÁ≥ªÁµ±‰πüÊòØÂü∫ÊñºÈõªÁöÑ„ÄÇÂõ†ÁÇ∫ Babbage ÁöÑ Ê©üÂô®ÊòØÊ≤íÊúâ‰ΩøÁî®ÈõªÔºåÂèàÂõ†ÁÇ∫Êï∏Â≠óË®àÁÆóÊ©üÂú®ÊüêÁ®ÆÊÑèÁæ©‰∏äÈÉΩÊòØÁ≠âÂÉπÁöÑÔºåÊàëÂÄëÂ∞±ÊúÉÊòéÁôΩÊòØÂê¶‰ΩøÁî®Èõª ÁöÑÁêÜË´ñ‰∏ä‰∏¶‰∏çÈáçË¶Å„ÄÇÁï∂ÁÑ∂ÔºåÁï∂ÈúÄË¶ÅÈ´òÈÅãÁÆóÈÄüÂ∫¶ÁöÑÊôÇÂÄôÔºåÂ∞±ÈúÄË¶Å‰ΩøÁî®ÈõªÊ∞£ÁµêÊßã„ÄÇÂõ†Ê≠§ÔºåÊàë ÂÄëÂ∞±ÊúÉÁôºÁèæÂú®ÈÄô‰∫õÂú∞Êñπ‰ΩøÁî®ÈõªÊòØÁêÜÊâÄÁï∂ÁÑ∂ÁöÑ„ÄÇÂú®Á•ûÁ∂ìÁ≥ªÁµ±‰∏≠ÔºåÂåñÂ≠∏ÈÅéÁ®ãËá≥Â∞ëÂíåÈõªÈÅéÁ®ãÂêåÊ®£Èáç Ë¶Å„ÄÇÊüê‰∫õË®àÁÆóÊ©üÁöÑÂ≠òÂÑ≤Âô®‰∏ªË¶ÅÂü∫ÊñºËÅ≤Â≠∏ÂéüÁêÜ„ÄÇË®àÁÆóÊ©üÂíåÁ•ûÁ∂ìÁ≥ªÁµ±ÈÉΩ‰ΩøÁî®ÈõªÂÉÖÂÉÖÊòØË°®Èù¢ÁöÑÁõ∏‰ºº „ÄÇÂ¶ÇÊûúÊàëÂÄëÂ∏åÊúõÂ∞ãÊâæÈÄôÊ®£ÁöÑÁõ∏‰ººÔºåÂÄí‰∏çÂ¶ÇÂ∞çÂáΩÊï∏ÈÄ≤Ë°åÊï∏Â≠∏ÂàÜÊûê„ÄÇ\n5. Universality of Digital Computers # ‰∏ä‰∏ÄÈÉ®ÂàÜÁµ¶Âá∫ÁöÑÊï∏Â≠óË®àÁÆóÊ©üÂèØ‰ª•Ë¢´Ê≠∏È°ûÁÇ∫„ÄåÈõ¢Êï£ÁãÄÊÖãÊ©ü„Äç„ÄÇÈÄôÈ°ûÊ©üÂô®ÂèØ‰ª•\nÂæû‰∏ÄÂÄãÁ¢∫ÂÆöÁãÄÊÖãÂêëÂè¶‰∏ÄÂÄãÁãÄÊÖãÁ™ÅÁÑ∂Ë∑≥ËÆä„ÄÇ\nÁÇ∫‰∫Ü‰∏çÊúÉÊúâÊ∑∑Ê∑ÜÈÄô‰∫õÁãÄÊÖãÁöÑÂèØËÉΩÔºåÂÆÉÂÄë‰πãÈñìË¶ÅÊúâË∂≥Â§†ÁöÑÂ∑ÆÂà•„ÄÇÂö¥Ê†ºÁöÑË™™ÔºåÈÄôÊ®£ÁöÑÊ©üÂô®ÊòØ‰∏çÂ≠ò Âú®ÁöÑ„ÄÇ‰∏ÄÂàá‰∫ã‰ª∂ÂØ¶Èöõ‰∏äÈÉΩÊòØÈÄ£Á∫åÁöÑ„ÄÇ‰ΩÜÊòØÊúâË®±Â§öÁ®ÆÊ©üÂô®ËÉΩÂ§†Ë¢´Áúã‰ΩúÈõ¢Êï£ÁãÄÊÖãÊ©üÂô®„ÄÇ‰æãÂ¶Ç Âú®ÁÖßÊòéÁ≥ªÁµ±‰∏≠ÁöÑÈñãÈóúÔºåÊàëÂÄëÂèØ‰ª•ÊääÈñãÈóúÁúãÊàêÂè™ÊúâÈñãÂíåÈóúÂÖ©ÂÄãÁãÄÊÖã„ÄÇÂÆÉÂÄë‰πãÈñìËÇØÂÆöÊúâËΩâÊèõÈÅéÁ®ã Ôºå‰ΩÜÊòØÂú®ÁµïÂ§ßÂ§öÊï∏ÊÉÖÊ≥Å‰∏ãÂèØ‰ª•ÂøΩÁï•ÂÆÉÂÄë„ÄÇ‰ΩúÁÇ∫Èõ¢Êï£ÁãÄÊÖãÊ©üÂô®ÁöÑ‰æãÂ≠êÔºåÊàëÂÄëÂèØ‰ª•ËÄÉÊÖÆ‰∏ÄÂÄãÊØèÁßí ÂòÄÂóí 120 Â∫¶ÁöÑËº™Â≠êÔºåÈÄôÂÄãËº™Â≠êÂèØËÉΩÂõ†‰∏ÄÂÄãÊßìÊ°øÁöÑÈòªÊìãËÄåÂÅú‰∏ã‰æÜÔºåÂú®Ëº™Â≠ê‰∏äÊúâ‰∏ÄÂÄãÁôºÂÖâÁöÑÁáà „ÄÇÈÄôÂÄãÊ©üÂô®ÂèØ‰ª•Ë¢´ÊäΩË±°ÁöÑÊèèËø∞ÁÇ∫‰∏ãÈù¢ÁöÑÂΩ¢Âºè„ÄÇÊ©üÂô®ÁöÑÂÖßÈÉ®ÁãÄÊÖãÔºàÈÄöÈÅéËº™Â≠êÁöÑ‰ΩçÁΩÆ‰æÜÊèèËø∞ÔºâÂèØ ‰ª•ÊòØ \\(q_1\\)„ÄÅ\\(q_2\\) Âíå \\(q_3\\)„ÄÇËº∏ÂÖ•‰ø°ËôüÊòØ \\(i_0\\) Êàñ \\(i_1\\)ÔºàÊßìÊ°ø ÁöÑ‰ΩçÁΩÆÔºâ„ÄÇ‰ªª‰ΩïÊôÇÂÄôÁöÑÂÖßÈÉ®ÁãÄÊÖãÂèØ‰ª•Ê†πÊìö‰∏ä‰∏ÄÊ¨°ÁãÄÊÖãÂíåËº∏ÂÖ•‰ø°ËôüÁî±‰∏ãË°®ÊèèËø∞ÔºöËº∏Âá∫‰ø°ËôüÂèØ‰ª• Áî®‰∏ãË°®ÊèèËø∞Ôºå\n\\begin{array}{c|ccc} \u0026amp; q_1 \u0026amp; q_2 \u0026amp; q_3 \\\\ \\hline i_0 \u0026amp; q_2 \u0026amp; q_3 \u0026amp; q_1 \\\\ i_0 \u0026amp; q_1 \u0026amp; q_2 \u0026amp; q_3 \\end{array}\nËº∏Âá∫‰ø°ËôüÔºåÂîØ‰∏ÄËÉΩÂ§†Ë¢´Â§ñÈÉ®ËßÄÊ∏¨ÁöÑÂÖßÈÉ®ÁãÄÊÖãÊåáÁ§∫Âô®ÔºåÂ¶Ç‰∏ãË°®ÊèèËø∞Ôºö\n\\begin{array}{c|ccc} \\text{State} \u0026amp; q_1 \u0026amp; q_2 \u0026amp; q_3 \\\\ \\text{Output} \u0026amp; o_0 \u0026amp; o_0 \u0026amp; o_1 \\end{array}\nÈÄôÂÄã‰æãÂ≠êÊòØ‰∏ÄÂÄãÂÖ∏ÂûãÁöÑÈõ¢Êï£ÁãÄÊÖãÊ©ü„ÄÇÂè™Ë¶ÅÂÆÉÂÄëÁöÑÁãÄÊÖãÊòØÊúâÈôêÁöÑÔºåÂÆÉÂÄëÂ∞±ÂèØ‰ª•Áî®ÈÄôÊ®£ÁöÑË°®Ê†ºÊèè Ëø∞„ÄÇ\nÂèØ‰ª•ÁúãÂá∫ÔºåÂè™Ë¶ÅÁµ¶Âá∫ÂàùÂßãÁãÄÊÖãÂíåËº∏ÂÖ•‰ø°ËôüÔºåÊâÄÊúâÁöÑÊú™‰æÜÁãÄÊÖãÈÉΩÊòØÂèØ‰ª•È†êÊ∏¨ÁöÑ„ÄÇÈÄôËÆìÊàëÂÄëÊÉ≥Ëµ∑ ‰∫Ü Laplace ÁöÑËßÄÈªû„ÄÇÈÇ£Â∞±ÊòØÔºåÂè™Ë¶ÅÁµ¶Âá∫ÂÆáÂÆô‰∏≠‰ªªÊÑèÊôÇÂàªÊâÄÊúâÁ≤íÂ≠êÁöÑ‰ΩçÁΩÆÂíåÈÄüÂ∫¶ÔºåÂ∞±ËÉΩÂ§†È†ê Áü•Êú™‰æÜÁöÑÊâÄÊúâÁãÄÊÖã„ÄÇÊàëÂÄëËÄÉÊÖÆÁöÑÈ†êÊ∏¨ÂíåÊãâÊôÆÊãâÊñØÁõ∏ÊØîËºÉÊõ¥Êé•ËøëÊñºÂØ¶Áî®ÊÄß„ÄÇÂõ†ÁÇ∫„ÄåÂÆáÂÆôÊòØ‰∏ÄÂÄã Êï¥È´î„ÄçÁöÑÁ≥ªÁµ±ÔºåÊâÄ‰ª•Âè™Ë¶ÅÂàùÂßãÊ¢ù‰ª∂ÁöÑ‰∏ÄÂÄãÂæàÂ∞èÁöÑË™§Â∑ÆÔºåÂ∞±ÊúÉÂºïËµ∑Á≥ªÁµ±Âú®‰∏ÄÊÆµÊôÇÈñì‰ª•ÂæåËÆäÂæóÂÆå ÂÖ®‰∏çÂêå„ÄÇÊüêÂÄãÊôÇÂàª‰∏ÄÂÄãÈõªÂ≠ê‰ΩçÁΩÆÁöÑÂÑÑËê¨ÂàÜ‰πã‰∏ÄÂéòÁ±≥ÁöÑÂÅèÁßªÔºåÂ∞áÊ±∫ÂÆö‰∏ÄÂÄã‰∫∫ÊúÉÂú®Èõ™Â¥©‰∏≠Ê≠ªÂéªÈÇÑ ÊòØÈÄÉÁîü„ÄÇÊàëÂÄëÁ®±ÁÇ∫„ÄåÈõ¢Êï£ÁãÄÊÖãÊ©ü„ÄçÁöÑÊ©üÊ¢∞Á≥ªÁµ±ÁöÑ‰∏ÄÂÄãÊ†∏ÂøÉÊÄßË≥™Â∞±ÊòØÔºåÈÄôÊ®£ÁöÑÁèæË±°‰∏¶‰∏çÊúÉÁôº Áîü„ÄÇÂç≥‰ΩøÊòØËÄÉÊÖÆ‰∏ÄÂÄãÂØ¶ÈöõÁöÑÁâ©ÁêÜÁ≥ªÁµ±ÔºåËÄå‰∏çÊòØÁêÜÊÉ≥Ê©üÂô®ÔºåÂè™Ë¶ÅÁü•ÈÅì‰∫ÜÊüêÂÄãÊôÇÂàªË∂≥Â§†Á≤æÁ¢∫ÁöÑ ÁãÄÊÖã‰ø°ÊÅØÔºåÂ∞±ÂèØ‰ª•Ë∂≥Â§†Á≤æÁ¢∫ÁöÑÈ†êÊ∏¨Êú™‰æÜÁöÑ‰∏ÄÂàáÁãÄÊÖã„ÄÇ\nÊ≠£Â¶ÇÊàëÂÄëÊâÄÊèêÂà∞ÁöÑÔºåÊï∏Â≠óË®àÁÆóÊ©üÂ±¨ÊñºÈõ¢Êï£ÁãÄÊÖãÊ©ü„ÄÇ‰ΩÜÊòØÈÄôÊ®£ÁöÑÊ©üÂô®ÊâÄËÉΩÂ§†ÈÅîÂà∞ÁöÑÁãÄÊÖãÈÄöÂ∏∏ÊòØ Áõ∏Áï∂Â§ßÁöÑ„ÄÇ‰æãÂ¶ÇÔºåÁèæÂú®Âú®ÊõºÂæπÊñØÁâπÂ∑•‰ΩúÁöÑÊ©üÂô®ÂèØ‰ª•Êúâ \\(2^{165000}\\) ÂÄãÁãÄÊÖãÔºå‰πüÂ∞±ÊòØÂ§ß Á¥Ñ \\(10^{50000}\\)„ÄÇËÄåÂú®‰∏äÈù¢ÁöÑÂòÄÂóíËº™ÁöÑ‰æãÂ≠ê‰∏≠ÔºåÂÉÖÊúâ‰∏âÂÄãÁãÄÊÖã„ÄÇÊâæÂà∞ÊúâÂ¶ÇÊ≠§Â§öÁãÄÊÖãÁöÑ ÂéüÂõ†‰∏¶‰∏çÂõ∞Èõ£„ÄÇË®àÁÆóÊ©üÂÖ∑Êúâ‰∏ÄÂÄãÂ≠òÂÑ≤Âô®ÔºåÂ∞çÊáâÊñºË®àÁÆóÂì°ÁöÑÁ¥ô„ÄÇÈÄô‰∫õÂ≠òÂÑ≤Âô®‰∏≠ÊáâË©≤ËÉΩÂ§†ÂØ´ÂÖ•‰ªª ‰ΩïËÉΩÂ§†ÂØ´ÂÖ•Ë®àÁÆóÂì°ÊâÄÁî®Á¥ô‰∏äÁöÑÁ¨¶Ëôü„ÄÇÁÇ∫‰∫ÜÁ∞°ÂñÆËµ∑Ë¶ãÔºåÂÅáË®≠ÂÉÖÂÉÖ‰ΩøÁî®Âæû 0 Âà∞ 9 ÁöÑÊï∏Â≠ó‰ΩúÁÇ∫Á¨¶ Ëôü„ÄÇÂøΩÁï•ÊâãÂØ´È´îÁöÑÂ∑ÆÂà•„ÄÇ\nÂÅáÂ¶ÇË®àÁÆóÊ©üÂÖ∑Êúâ 100 Âºµ„ÄÅÊØèÂºµ 50 Ë°å„ÄÅÊØèË°å 30 ÂÄãÊï∏Â≠óÁöÑÂ≠òÂÑ≤Á©∫Èñì„ÄÇÈÇ£È∫ºÁãÄÊÖãÁöÑÊï∏ÁõÆÂ∞±ÊúÉ ÊòØ \\(10^{100 \\times 50 \\times 30}\\)ÔºåÂç≥ \\(10^{150000}\\)„ÄÇÈÄôÂ§ßÁ¥ÑÊòØ‰∏âÂÄãÊõºÂæπÊñØ ÁâπÊ©üÁãÄÊÖãÁöÑÁ∏ΩÂíå„ÄÇÁãÄÊÖãÊï∏ÁöÑÂü∫ÁÇ∫ 2 ÁöÑÂ∞çÊï∏ÈÄöÂ∏∏Ë¢´Á®±ÁÇ∫Ê©üÂô®ÁöÑ„ÄåÂ≠òÂÑ≤Â§ßÂ∞è„Äç„ÄÇÂõ†Ê≠§ÊõºÂæπÊñØÁâπ Ê©üÁöÑÂ≠òÂÑ≤Â§ßÂ∞èÊòØ 165000 ËÄå‰∏äÈù¢‰æãÂ≠ê‰∏≠Ëº™Â≠êÁöÑÂ≠òÂÑ≤Â§ßÂ∞èÊòØ 1.6„ÄÇÂ¶ÇÊûúÂÖ©ÂÄãÊ©üÂô®Âä†Âú®‰∏ÄËµ∑Ôºå‰ªñ ÂÄëÁöÑÂ≠òÂÑ≤Â§ßÂ∞èÊáâË©≤ÊòØÂéü‰æÜÂ≠òÂÑ≤Â§ßÂ∞èÁöÑÂíå„ÄÇÂõ†Ê≠§ÊàëÂÄëÂèØ‰ª•Ë™™„ÄçÊõºÂæπÊñØÁâπÊ©üÂÖ∑Êúâ 64 ÂÄãÁ£ÅÂ∏∂Â≠òÂÑ≤ Âô®ÊØèÂÄãÂ≠òÂÑ≤Âô®ÁöÑÂ§ßÂ∞èÊòØ 2560ÔºåÈÇÑÊúâ 8 ÂÄãÈõªÂ≠êÁÆ°ÔºåÊØèÂÄãÂÆπÈáèÁÇ∫ 1280„ÄÇÂêÑÁ®ÆÂêÑÊ®£Â≠òÂÑ≤Âô®Âä†Âú® ‰∏ÄËµ∑Â§ßÁ¥ÑÊòØ 300 ÂÄãÔºåÁ∏ΩÂÖ± 174380„ÄÇ\nÂè™Ë¶ÅÁµ¶Âá∫Â∞çÊáâÊñºÈõ¢Êï£ÁãÄÊÖãÊ©üÂô®ÁöÑË°®Ê†ºÔºåÂ∞±ËÉΩÂ§†È†êÊ∏¨Âá∫Ê©üÂô®Â∞áÊúÉÂÅö‰ªÄÈ∫º„ÄÇÈÄôÊ®£ÁöÑË®àÁÆóÁï∂ÁÑ∂ËÉΩÂ§† ÈÄöÈÅéÈõªÂ≠êË®àÁÆóÊ©üÈÄ≤Ë°å„ÄÇÂè™Ë¶ÅÂü∑Ë°åÁöÑË∂≥Â§†Âø´ÔºåÈõªÂ≠êË®àÁÆóÊ©üÂ∞±ËÉΩÂ§†Ê®°Êì¨‰ªª‰ΩïÈõ¢Êï£ÁãÄÊÖãÊ©üÁöÑË°åÁÇ∫„ÄÇ ÈÄôÊ®£ÔºåÊ®°ÁØÑËÄÖÈÅäÊà≤Â∞±ËÆäÊàêÊ©üÂô®‰ΩúË¢´ÂïèËÄÖ BÔºåÂñÑÊñºÊ®°Êì¨ÁöÑË®àÁÆóÊ©ü‰Ωú AÔºåÈÇ£È∫ºË©¢ÂïèËÄÖ C Â∞±‰∏çËÉΩ ÂçÄÂàÜÂÆÉÂÄë„ÄÇÁï∂ÁÑ∂ÔºåÊï∏Â≠óË®àÁÆóÊ©üÂøÖÈ†àÊúâË∂≥Â§†ÁöÑÂ≠òÂÑ≤Á©∫ÈñìÔºåÈÅãË°åÁöÑË∂≥Â§†Âø´„ÄÇËÄå‰∏îÂÆÉÂú®Ê®°ÁØÑ‰∏çÂêåÁöÑ Ê©üÂô®‰πãÂâçÂøÖÈ†àË¢´ÈáçÊñ∞Á∑®Á®ã„ÄÇ\nÈÄôÊ®£ÂèØ‰ª•Ê®°Êì¨‰ªªÊÑèÈõ¢Êï£ÁãÄÊÖãÊ©üÂô®ÁöÑÊÄßË≥™ÁöÑÊï∏Â≠óË®àÁÆóÊ©üË¢´Ë°®Ëø∞ÁÇ∫‰ªñÂÄëÊòØÈÄöÁî®Ê©üÂô®„ÄÇÂÖ∑ÊúâÈÄôÊ®£ÊÄß Ë≥™Ê©üÂô®ÁöÑÂ≠òÂú®Â∏∂‰æÜÁöÑ‰∏ÄÂÄãÈáçË¶ÅÁµêÊûúÂ∞±ÊòØÔºå‰∏çËÄÉÊÖÆÈÄüÂ∫¶ÔºåÊàëÂÄë‰∏¶‰∏çÈúÄË¶ÅË®≠Ë®àÂá∫‰∏çÂêåÁöÑÊñ∞Ê©üÂô®‰æÜ Âü∑Ë°å‰∏çÂêåÁöÑÂïèÈ°å„ÄÇÂÆÉÂÄëÈÉΩÂèØ‰ª•Áî®‰∏ÄÂÄãÊï∏Â≠óË®àÁÆóÊ©ü‰æÜÂØ¶ÁèæÔºåÂè™Ë¶ÅÊ†πÊìöÊØèÁ®ÆÊÉÖÊ≥ÅÈÄ≤Ë°åÈÅ©Áï∂ÁöÑÁ∑®Á®ã „ÄÇÈÄôË°®ÊòéÊâÄÊúâÁöÑÊï∏Â≠óË®àÁÆóÊ©üÂú®ÊüêÁ®ÆÊÑèÁæ©‰∏äÊòØÁõ∏‰∫íÁ≠âÂÉπÁöÑ„ÄÇ\nÁèæÂú®ÈáçÊñ∞ËÄÉÊÖÆÂú®Á¨¨‰∏âÈÉ®ÂàÜÊú´Â∞æÊèêÂá∫ÁöÑÂïèÈ°å„ÄÇÊö´ÊôÇÊääÂïèÈ°å \u0026ldquo;Can machines think?\u0026rdquo; Áî®„ÄåÊòØÂê¶ Â≠òÂú®ÂÅáÊÉ≥‰∏≠ÁöÑÊ©üÂô®ËÉΩÂ§†Âú®Ê®°ÁØÑÈÅäÊà≤‰∏≠Ë°®ÁèæËâØÂ•Ω„Äç‰ª£Êõø„ÄÇÂ¶ÇÊûúÊàëÂÄëÈ°òÊÑèÔºåÊàëÂÄëÈÇÑÂèØ‰ª•Âïè„ÄåÊòØÂê¶ Â≠òÂú®ËÉΩÂ§†Ë°®ÁèæËâØÂ•ΩÁöÑÈõ¢Êï£ÁãÄÊÖãÊ©ü„ÄçÔºå‰ΩÜÊòØÁî±ÊñºÈÄöÁî®ÊÄßÔºåÊàëÂÄëÂèØ‰ª•ÁúãÂá∫ÈÄôÂÖ©ÂÄãÂïèÈ°åÈÉΩÁ≠âÂÉπÊñº„Äå ËÆìÊàëÂÄëÊääÊ≥®ÊÑèÂäõÈõÜ‰∏≠Âú®‰∏ÄÂÄãÊï∏Â≠óË®àÁÆóÊ©ü $C$‰∏ä„ÄÇÂ¶ÇÊûúÊàëÂÄëÂèØ‰ª•ËÆìÂÆÉÂÖ∑ÊúâË∂≥Â§†Â§ßÁöÑÂ≠òÂÑ≤Á©∫ÈñìÔºå Ë∂≥Â§†Âø´ÁöÑË®àÁÆóÈÄüÂ∫¶ÔºåËÄå‰∏îÂ∞çÂÆÉÈÄ≤Ë°åÈÅ©Áï∂ÁöÑÁ∑®Á®ã„ÄÇ$C$ ÊâÆÊºîÊ®°‰ªøÈÅäÊà≤‰∏≠ A ÁöÑËßíËâ≤Ôºå‰∫∫ÊâÆÊºî B ÁöÑËßíËâ≤Ôºå$C$ ËÉΩ‰∏çËÉΩÂú®ÈÄôÂÄãÈÅäÊà≤‰∏≠Ë°®ÁèæËâØÂ•ΩÔºü„Äç\n6. Contrary Views on the Main Question # 6.1. The Theological Objection # ÊÄùÁ∂≠ÊòØ‰∫∫ÁöÑ‰∏çÊúΩÈùàÈ≠ÇÁöÑ‰∏ÄÁ®ÆÂäüËÉΩ„ÄÇ‰∏äÂ∏ùË≥¶‰∫àÊØè‰∏ÄÂÄãÁî∑‰∫∫ÂíåÂ•≥‰∫∫‰ª•‰∏ÄÈ°Ü‰∏çÊúΩÁöÑÈùàÈ≠ÇÔºå‰ΩÜÂæûÊú™ Â∞áÂÆÉË≥¶‰∫à‰ªª‰ΩïÂÖ∂‰ªñÁöÑÂãïÁâ©ÊàñÊ©üÂô®„ÄÇÂõ†Ê≠§ÔºåÂãïÁâ©ÊàñËÄÖÊ©üÂô®‰∏çËÉΩÊÄùÁ∂≠„ÄÇ\n6.2. The \u0026ldquo;Heads in the Sand\u0026rdquo; Objection # Ê©üÂô®ÊÄùÁ∂≠ÂæåÊûúÂ§™‰ª§‰∫∫ÊÅêÊáº‰∫Ü„ÄÇ‰ΩÜÈ°òÊ©üÂô®Ê∞∏ÈÅ†‰∏çÊúÉÊúâÊÄùÁ∂≠„ÄÇ\n6.3. The Mathematical Objection # Âú®Êï∏Â≠∏ÈÇèËºØÈáåÊúâ‰∏Ä‰∫õÁµêË´ñÔºåÂèØ‰ª•Áî®‰æÜË≠âÊòéÈõ¢Êï£ÁãÄÊÖãÊ©üÂô®ÁöÑËÉΩÂäõÊúâ‰∏ÄÂÆöÈôêÂ∫¶„ÄÇÈÄô‰∫õÁµêË´ñ‰∏≠ÊúÄ ËëóÂêçÁöÑÊòØ Godel\u0026rsquo;s theorem (1931)ÔºåÊ≠§ÂÆöÁêÜËÅ≤Á®±ÔºåÂú®‰ªª‰Ωï‰∏ÄÂÄãË∂≥Â§†ÊúâÂäõÁöÑÈÇèËºØÁ≥ªÁµ±ÈáåÔºå ÈÉΩËÉΩÂΩ¢ÊàêÈô≥Ëø∞ÔºåËÄåÊâÄË©≤Èô≥Ëø∞Âú®Ë©≤Á≥ªÁµ±ÁØÑÂúç‰πãÂÖßÊó¢‰∏çËÉΩË¢´Ë≠âÊòéÊòØÂ∞çÁöÑÔºå‰πü‰∏çËÉΩË¢´Ë≠âÊòéÊòØÈåØÁöÑ ÔºåÈô§ÈùûÈÄôÂÄãÁ≥ªÁµ±Êú¨Ë∫´Â∞±‰∏ç‰∏ÄËá¥„ÄÇ\n6.4. The Argument from Consciousness # Professor Jefferson\u0026rsquo;s Lister for 1949\nËã•Ë¶ÅÊàëÂÄëÊâøË™çÊ©üÂô®ËàáÂ§ßËÖ¶ÊòØ‰∏ÄÊ®£ÁöÑÔºåÈô§ÈùûÊ©üÂô®ËÉΩÂ§†Âõ†ÁÇ∫ÊÑüÂèó‰∫ÜÊÄùÊÉ≥ËàáÊÑüÊÉÖÔºåËÄå‰∏çÊòØÁ¨¶ËôüÁöÑ ÂÅ∂ÁÑ∂Â°óÊäπÂØ´Âá∫ÂçÅÂõõË°åË©©ÊàñÂçîÂ•èÊõ≤‰æÜ„ÄÇ‰πüÂ∞±ÊòØË™™ÔºåÂÆÉ‰∏çÂÉÖÂØ´‰∫ÜÔºåËÄå‰∏î‰πüÊáâÁü•ÈÅìËá™Â∑±Á¢∫ÂØ¶ÈÄôÊ®£ ÂÅö‰∫Ü„ÄÇ‰ªª‰ΩïÊ©üÂô®ÈÉΩÊÑüË¶∫‰∏çÂà∞Ôºà‰∏çÂè™ÊòØÂ±¨ÊñºÁ∞°ÊòìÁôºÊòé‰πãÈ°ûÁöÑ‰∫∫Â∑•‰ø°ËôüÔºâÊàêÂäüÁöÑÂñúÊÇÖÔºå‰πü‰∏çÊúÉ Âõ†Âõ∞Èõ£ËÄåÊ≤ÆÂñ™ÔºåÂõ†ÂèóÂ•âÊâøËÄåÊ≤æÊ≤æËá™ÂñúÔºåÂõ†ÁäØÈåØË™§ËÄåÊÇ∂ÊÇ∂‰∏çÊ®ÇÔºåÂõ†Ë¶ãÁï∞ÊÄßËÄåÁ•ûÈ≠ÇÈ°õÂÄíÔºå‰πü‰∏ç ÊúÉÂõ†ÊÖæÊúõÂæó‰∏çÂà∞ÊªøË∂≥ËÄåÊö¥Ë∑≥Â¶ÇÈõ∑Êàñ‰∏ÄËπ∂‰∏çÊåØ„ÄÇ\n6.5. Arguments from Various Disabilities # ÊàëÊìî‰øùÔºå‰Ω†ÂèØ‰ª•‰ΩøÊ©üÂô®Âπ≤‰ªª‰Ωï‰Ω†ÂâõÊâçÊèêÂà∞ÁöÑ‰∫ãÊÉÖÔºåÂèØ‰Ω†Ê∞∏ÈÅ†‰πü‰∏çËÉΩ‰Ωø‰∏ÄÂè∞Ê©üÂô®Êúâ Ôº∏ È°ûÁöÑ Ë°åÁÇ∫„ÄÇ\n6.6. Lady Lovelace\u0026rsquo;s Objection # ÂàÜÊûêÂºïÊìéÊ≤íÊúâ‰ªª‰ΩïÊÑèÂúñË¶ÅÊÉ≥Ââµ‰Ωú‰ªÄÈ∫ºÊù±Ë•ø„ÄÇÂÆÉËÉΩÂÅöÊàëÂÄëÁü•ÈÅìË©≤ÊÄéÊ®£ÂéªÊåáÊèÆÂÆÉÂÅöÁöÑ‰ªª‰Ωï‰∫ã„ÄÇ\n6.7. Argument from Continuity in the Nervous System # Á•ûÁ∂ìÁ≥ªÁµ±‰∏çÂÉèÈõ¢Êï£ÁãÄÊÖãÁöÑÊ©üÂô®„ÄÇËã•ÊòØÈóúÊñºÊíûÊìäÁ•ûÁ∂ìÂéüÁöÑÁ•ûÁ∂ìËÑàÊ≤ñË¶èÊ®°ÁöÑ‰ø°ÊÅØÊúâË™§ÔºåÈÇ£È∫ΩÈóú ÊñºÂ§ñÊ≤ñËÑàÊ≤ñÁöÑË¶èÊ®°ÁöÑ‰ø°ÊÅØÂ∞±ÊúÉÊúâÂæàÂ§ßË™§Â∑Æ„ÄÇÊó¢ÁÑ∂ÈÄôÊ®£ÔºåÂ∞±ÂèØ‰ª•Ë´ñË≠âÔºöÊàëÂÄë‰∏çÂèØËÉΩÁî®‰∏ÄÂÄãÈõ¢ Êï£ÁãÄÊÖãÁ≥ªÁµ±ÂéªÊ®°‰ªøÁ•ûÁ∂ìÁ≥ªÁµ±ÁöÑË°åÁÇ∫„ÄÇ\n6.8. The Argument from Informality of Behaviour # ÊàëÂÄë‰∏çÂèØËÉΩÁ∏ΩÁµêÂá∫‰∏ÄÂ•óË¶èÂâá‰æÜÂõäÊã¨‰∏ÄÂÄã‰∫∫Âú®ÊâÄÊúâÂèØÊÉ≥Ë±°ÁöÑÁí∞Â¢É‰∏≠ÁöÑË°åÁÇ∫„ÄÇÊØîÊñπË™™ÔºåÊàëÂÄëÂèØ ‰ª•ÊúâÈÄôÊ®£‰∏ÄÊ¢ùË¶èÂâáÔºöË°å‰∫∫Ë¶ãÂà∞Á¥ÖÁáàÊ≠¢Ê≠•ÔºåË¶ãÂà∞Á∂†ÁáàË°åËµ∞Ôºå‰ΩÜÊòØÔºåÁî±ÊñºÊüêÁ®ÆÈåØË™§ÔºåÁ¥ÖÁ∂†ÁáàÂêå ÊôÇ‰∫Æ‰∫ÜÔºåÈÇ£Ë©≤ÊÄéÈ∫ΩËæ¶ÔºüÊàëÂÄë‰πüË®±ÊúÉÈÄôÊ®£Ê±∫ÂÆöÔºåÁÇ∫ÂÆâÂÖ®Ëµ∑Ë¶ãÔºåÊúÄÂ•ΩÊ≠¢Ê≠•„ÄÇ‰ΩÜÊòØÔºåÈÄôÂÄãÊ±∫ÂÆöÈÇÑ ÊúÉÊúâÂÖ∂‰ªñÂïèÈ°å„ÄÇË¶ÅÊÉ≥Á∏ΩÁµêÂá∫‰∏ÄÂ•óÂèØË°åÂõäÊã¨‰∏ÄÂàá‰∫∫È°ûË°åÁÇ∫ÁöÑË¶èÂâáÔºåÂì™ÊÄïÊòØÊúâÈóúÁ¥ÖÁ∂†ÁáàÁöÑË¶èÂâá ÔºåÁúã‰æÜÈÉΩÊòØ‰∏çÂ§ßÂèØËÉΩÁöÑ„ÄÇÂ∞çÈÄô‰∫õÁúãÊ≥ïÊàëÂÖ®Ë¥äÂêå„ÄÇ\n6.9. The Argument from Extrasensory Perception # ÊàëÊÉ≥ËÆÄËÄÖÈÉΩÂæàÁÜüÊÇâË∂ÖÊÑüÂÆòÁü•Ë¶∫ÁöÑË™™Ê≥ïÔºåÁÜüÊÇâÂÆÉÁöÑÂõõÁ®ÆÊñπÂºèÂç≥ÂøÉÈùàÊÑüÊáâ„ÄÅÂçÉÈáåÁúº„ÄÅÂÖàÁü•ÂíåÁ≤æ Á•ûÈÅãÂãïÁöÑÊÑèÁæ©„ÄÇ\n7. Learning Machines # Âú®Ê®°Êì¨‰∏ÄÂÄãÊàê‰∫∫ÁöÑÊÄùÊÉ≥ÁöÑÂ∑•‰Ωú‰∏≠ÔºåÊàëÂÄëÂ∞áÈõÜ‰∏≠ÊñºÊÄùËÄÉ‰∏ÄÂÄãÂ•ΩËæ¶Ê≥ï‰æÜ‰ΩøÂÆÉÊàêÈï∑Âà∞Ê≠§ÁãÄÊÖã„ÄÇÊàëÂÄë ÂèØËÉΩÈúÄË¶ÅË®ªÊÑèÈÄôÊ®£‰∏âÂÄãÁµÑ‰ª∂Ôºö\nÊÄùÊÉ≥ÁöÑÂàùÂßãÁãÄÊÖãÔºåÂ∞±ÂÉèÂá∫Áîü ËÉΩÂ§†ÂΩ±ÈüøÂÆÉÁöÑÊïôËÇ≤ ÂÖ∂‰ªñÁöÑËÉΩÂ§†ÂΩ±ÈüøÂÆÉÁöÑÈùûÊïôËÇ≤ÁöÑÁ∂ìÈ©ó ","date":"25 November 2018","externalUrl":null,"permalink":"/posts/paper/paper-turing/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Computing Machinery and Intelligence","type":"posts"},{"content":"","date":"27 October 2018","externalUrl":null,"permalink":"/tags/cvpr/","section":"Tags","summary":"","title":"CVPR","type":"tags"},{"content":" Paper Link ss Convolutional Âíå recurrent operations ÈÉΩÊòØ‰∏ÄÊ¨°ËôïÁêÜ‰∏ÄÂÄã local ÈÑ∞ÂüüÔºåÊ≠§ÁØá paper ÊèêÂá∫‰∫Ü non-local operations ÁöÑÊÉ≥Ê≥ïÔºåÁõÆÁöÑÂ∞±ÊòØË¶ÅËß£Ê±∫Âç≥‰ΩøÁõ∏Ë∑ùÂæàÈÅ†ÁöÑÁöÑ blocksÔºå‰ªçÁÑ∂ ÊúâÂèØËÉΩÊòØÂΩºÊ≠§ÊúâÈóúËÅØÁöÑ„ÄÇ\n1. Introduction # ÁÇ∫‰ªÄÈ∫ºË¶Å‰ΩøÁî®Ê∑±Â±§Á•ûÁ∂ìÁ∂≤Ë∑ØÔºü\nË£úÊçâ long-range dependencies\nÂèØËÉΩÊòØ‰∏ÄÂÄãÂ§ßÂÆ∂ÊúÉÂ∏∏Áµ¶Âá∫ÁöÑÁ≠îÊ°à„ÄÇ\nËàâ‰æã‰æÜË™™Ôºö\nsequential data (e.g., in speech, language) ‰∏ÄËà¨‰æÜË™™ÊúÉÊé°Áî® recurrent operationsÔºå‰πüÊòØÁÇ∫‰∫ÜÈÅîÊàê long-range dependency modeling image data ÂâáÂ∏∏Â∏∏Êé°Áî®Ê∑±Â±§ÁöÑ convolutional operations Âõ†ÁÇ∫ convolutional Âíå recurrent operations ÈÉΩÂè™ÊúÉÂ∞ç local ÈÑ∞ÂüüË≥áÊñôÂÅöÈÅãÁÆóÔºàË∑ùÈõ¢„ÄÅ ÊôÇÈñìÔºâÔºåÂõ†Ê≠§Ë¶ÅÂÇ≥ÈÅûË®äÊÅØÂà∞ËºÉÈÅ†ËôïÂ∞±Âè™ËÉΩÈÄèÈÅéÈáçË§áÂú∞Êìç‰Ωú„ÄÇ\nÈáçË§áÂú∞ÂÅö local operations ÊúâÂπæÂÄãÈôêÂà∂Ôºö\nË®àÁÆó‰∏äÊ≤íÊúâÊïàÁéá Èõ£‰ª•ÂÑ™Âåñ non-local ÁâπÂæµË®äÊÅØÂÇ≥ÈÅû‰∏çÈùàÊ¥ª Áï∂ÁÑ∂ÔºåCNN Âíå RNN ÁöÑÂàùË°∑Êú¨‰æÜÂ∞±‰∏çÊòØ‰æÜËôïÁêÜ non-local Ë®äÊÅØÁöÑ„ÄÇ\nÊú¨ÁØá paper Â∞±ÊòØË¶ÅËß£Ê±∫‰∏äËø∞ÂïèÈ°åÔºåÊâÄ‰ª•ÊèêÂá∫‰∫Ü non-local operations ÈÄôÂÄãÊ¶ÇÂøµÔºåÁõ¥ËßÄ ‰æÜË™™Ôºö\n‰∏ÄÂÄã non-local ÁöÑÂÄºÔºà\\(\\textbf x_i\\)Ôºâ‰æÜËá™ÊñºÔºå‰ΩúÁÇ∫Ëº∏ÂÖ• input feature maps ‰∏≠ÊâÄÊúâ‰ΩçÁΩÆÔºà\\(\\textbf x_j\\)ÔºâÁöÑÂä†Ê¨äÂíåÔºåÂ¶Ç‰∏ãÂúñ Figure 1„ÄÇ\nFigure 1. A spacetime non-local operation in our network trained for video classification in Kinetics. A position $\\textbf x_i$\u0026rsquo;s response is computed by the weighted average of the features of all positions $\\textbf x_j$ (only the highest weighted ones are shown here). In this example computed by our model, note how it relates the ball in the first frame to the ball in the last two frames. More examples are in Figure 3. 2. Related Work # Non-local image processing # Graphical models # Feedforward modeling for sequences # Self-attention # Interaction networks # Video classification architectures # 3. Non-local Neural Networks # Êé•‰∏ã‰æÜÂ∞±‰æÜ‰ªãÁ¥πÔºåÊ≠§ÁØá paper ÁöÑÊñπÊ≥ï„ÄÇ\n3.1. Formulation # ÈÄèÈÅéÈùûÂ±ÄÈÉ®Âπ≥ÂùáÔºå‰ΩúËÄÖÂú®Ê∑±Â±§Á•ûÁ∂ìÁ∂≤Ë∑Ø‰∏≠ ÔºåÂÆöÁæ©‰∫ÜÂ¶Ç‰∏ãÁöÑ non-local operationÔºö\n$$ \\textbf y_i = \\frac{1}{\\mathcal C(\\textbf x)} \\sum_{\\forall j} f(\\textbf x_i, \\textbf x_j) g(\\textbf x_j). \\tag{1} $$\nÂÖ∂‰∏≠Ôºå\n\\(i\\)ÔºöËº∏Âá∫‰ΩçÁΩÆÁöÑ indexÔºàin space, time, or spacetimeÔºâ \\(j\\)ÔºöÊâÄÊúâ enumerates Âá∫‰æÜÂèØËÉΩ‰ΩçÁΩÆÁöÑ index \\(\\textbf x\\)ÔºöËº∏ÂÖ•‰ø°ËôüÔºàimage, sequence, video; often their featuresÔºâ \\(\\textbf y\\)ÔºöËº∏Âá∫‰ø°ËôüÔºåÂ§ßÂ∞èÂíå \\(\\textbf x\\) Áõ∏Âêå \\(f\\)ÔºöË®àÁÆó \\(i\\) ÂíåÊâÄÊúâ \\(j\\) ‰πãÈñìÁöÑ affinity \\(g\\)ÔºöË®àÁÆó‰ΩçÁΩÆ \\(j\\) ËôïÁöÑËº∏ÂÖ•‰ø°ËôüË°®Á§∫ÊñπÊ≥ï \\(\\mathcal C\\)Ôºönormalizer Âæû‰∏äËø∞ÁöÑÂºè (1) ÔºåÊàëÂÄëÂèØ‰ª•Ê∏ÖÊ•öÁúãÂá∫ non-local ÁöÑÁâπÊÄßÔºåÂõ†ÁÇ∫ÊâÄÊúâ‰ΩçÁΩÆÔºà\\(\\forall j\\ÔºâÂú®ÊØè‰∏ÄÂÄã operation ‰∏≠ÈÉΩÊúÉË¢´ËÄÉÊÖÆ„ÄÇ\nÁõ∏ÊØî convolutional operation Âè™ÈóúÂøÉÈÑ∞Â±ÖÂíå recurrent operation Âè™ÈóúÂøÉÂâç‰∏ÄÂÄãÊôÇÈñìÈªû „ÄÇ\nÊ≠§Â§ñÔºånon-local operation Âíå fully-connected ($fc$) Áõ∏ÊØîÊúâË®±Â§öÂÑ™ÈªûÔºö\nnon-local op $fc$ ËÄÉÊÖÆ‰∏çÂêå‰ΩçÁΩÆÁöÑÈóú‰øÇ ÂñÆÁ¥îÂ≠∏ÁøíÊ¨äÈáç ÊîØÊåÅ‰∏çÂêåÁöÑ input size fixed-size input/output ÂèØË¢´ËºïÊòìÁöÑÈÅãÁî®Âú®ÂêÑÁ®Æ convolutional/recurrent Â±§‰∏≠ÔºåËÉΩË¢´Êé•Âú®ÊúÄÂâçÈù¢ Âè™ËÉΩÊé•Âú®Á∂≤Ë∑ØÊúÄÂæåÈù¢ 3.2. Instantiations # Êé•‰∏ã‰æÜÔºåËÆìÊàëÂÄë‰æÜÊèèËø∞‰∏çÂêåÁâàÊú¨ÁöÑ $f$ Âíå $g$Ôºå‰ΩúËÄÖÈÄèÈÅéÂØ¶È©óÁôºÁèæÔºåÈÄô‰∫õ‰∏çÂêåÁâàÊú¨‰πãÈñìÁöÑ Ê±∫ÂÆö‰∏¶‰∏çÂ§™ÂΩ±Èüø modelsÔºåÈÄôË°®Á§∫‰∫ÜÔºönon-local ÈÄôÂÄãÊÉ≥Ê≥ïÊâçÊòØÁµêÊûúÊîπÂñÑÁöÑ‰∏ªÂõ†„ÄÇ\nÁÇ∫‰∫ÜÊñπ‰æøÊèèËø∞ÔºåÊàëÂÄëÂè™ËÄÉÊÖÆ $g$ ÊòØ‰∏ÄÂÄã linear embeddingÔºö$g(\\textbf x_j) = W_g \\textbf x_j$ÔºåÂÖ∂‰∏≠ $W_g$ ÊòØ‰∏ÄÂÄã weight matrixÔºåÊé•‰∏ã‰æÜËÆìÊàëÂÄëÂàóËàâÂá∫ÂêÑÁ®Æ‰∏çÂêåÁöÑ $f$ÔºàÂü∫Êú¨‰∏äÔºåÂ∞±ÊòØÊâæÂá∫‰ΩçÁΩÆ $i$ ÂíåÊâÄÊúâ‰ΩçÁΩÆ $j$ ÁöÑÈóú‰øÇÔºâÔºåÂíå‰ªñÂÄëÂ∞çÊáâÁöÑ normalizer $\\mathcal C$„ÄÇ\nGaussian # $$ f(\\textbf x_i, \\textbf x_j) = e^{\\textbf x_i^T \\textbf x_j}. \\tag{2} $$\nÂÖ∂‰∏≠Ôºå\n$\\textbf x_i^T \\textbf x_j$ÔºöÈªûÁ©çÁõ∏‰ººÂ∫¶ÔºàÊ≠êÂºèË∑ùÈõ¢‰πü okÔºå‰ΩÜÈªûÁ©çËºÉÂ•ΩÂØ¶‰ΩúÔºâ $\\mathcal C(\\textbf x) = \\sum_{\\forall j} f(\\textbf x_i, \\textbf x_j)$„ÄÇ Embedded Gaussian # $$ f(\\textbf x_i, \\textbf x_j) = e^{\\theta(\\textbf x_i)^T \\phi(\\textbf x_j)}. \\tag{3} $$\nÂÖ∂‰∏≠Ôºö\n$\\theta(\\textbf x_i) = W_\\theta \\textbf x_i$Ôºöembedding $\\phi(\\textbf x_j) = W_\\phi \\textbf x_j$Ôºöembedding $\\mathcal C(\\textbf x) = \\sum_{\\forall j} f(\\textbf x_i, \\textbf x_j)$ Âú®ÈÄôË£°ÊàëÂÄëÂèØ‰ª•ËßÄÂØüÂà∞ÔºåÁµ¶ÂÆö‰∏ÄÂÄã $i$Ôºå$\\frac{1}{\\mathcal C(x)} f(\\textbf x_i, \\textbf x_j)$ Âç≥ÊòØÈÄèÈÅéÁ∂≠Â∫¶ $j$ ÁöÑ softmax„ÄÇ\nDot product # $$ f(\\textbf x_i, \\textbf x_j) = \\theta(\\textbf x_i)^T \\phi(\\textbf x_j). \\tag{4} $$\nÂÖ∂‰∏≠Ôºö\n$\\theta(\\textbf x_i) = W_\\theta \\textbf x_i$Ôºöembedding $\\phi(\\textbf x_j) = W_\\phi \\textbf x_j$Ôºöembedding $\\mathcal C(\\textbf x) = N$ ($N$Ôºö#positions in $\\textbf x$) Concatenation # $$ f(\\textbf x_i, \\textbf x_j) = \\text{ReLU} (\\textbf w_f^T[\\theta(\\textbf x_i), \\phi(\\textbf x_j)]). \\tag{5} $$\nÂÖ∂‰∏≠Ôºå\n$[\\cdot, \\cdot]$Ôºöconcatenation $\\textbf w_f$ÔºöÂ∞á concatenated vector ÊäïÂ∞ÑÊàê scalar ÁöÑ weight vector $\\mathcal C(\\textbf x) = N$ ($N$Ôºö#positions in $\\textbf x$) Âú®ÈÄôË£° $f$ Â§öÊé°Áî®‰∫Ü‰∏ÄÂÄã ReLU 3.3. Non-local Block # ÊàëÂÄëÂ∞áÂºè (1) ‰∏≠ÁöÑ non-local operation ÂåÖË£ùÂà∞ non-local block ‰∏≠ÔºåË©≤ block ÂèØ‰ª•Âêà ‰ΩµÂà∞Ë®±Â§öÁèæÊúâÈ´îÁ≥ªÁöÑÊû∂Êßã‰∏≠Ôºånon-local block ÂÆöÁæ©Â¶Ç‰∏ãÔºö\n$$ \\textbf z_i = W_z \\textbf y_i + \\textbf x_i, \\tag{6} $$\nÂÖ∂‰∏≠Ôºå\n$\\textbf y_i$ Âíå $+\\textbf x_i$Ôºöresidual connection ÈÄôÁ®Æ residual connection ËÆìÊàëÂÄëÂèØ‰ª•Âú®‰ªª‰Ωï‰∫ãÂÖà train Â•ΩÁöÑ model ÊèíÂÖ•‰∏ÄÂÄã non-local block„ÄÇ\nFigure 2. A spacetime non-local block. The feature maps are shown as the shape of their tensors, e.g., $T \\times H \\times W \\times 1024$ for $1024$ channels (proper reshaping is performed when noted). \u0026ldquo;$\\otimes$\u0026rdquo; denotes matrix multiplication, and \u0026ldquo;$\\oplus$\u0026rdquo; denotes element-wise sum. The softmax operation is performed on each row. The blue boxes denote $1 \\times 1 \\times 1$ convolutions. Here we show the embedded Gaussian version, with a bottleneck of $512$ channels. The vanilla Gaussian version can be done by removing $\\theta$ and $\\phi$, and the dot-product version can be done by replacing softmax with scaling by $1 / N$. ÈÄôË£°ÈôÑ‰∏äÊàëÁï´ÁöÑ non-local operation ÁöÑÁ§∫ÊÑèÂúñÔºö\n5. Experiments on Video Classification # ÂØ¶È©óÊï∏ÊìöÂæàÂ§öÔºåÈÄôË£°Á∞°ÂñÆË≤ºÂπæÂÄãÊòìÊáÇÁöÑ„ÄÇ\nFigure 4. Curves of the training procedure on Kinetics for the ResNet-50 C2D baseline (blue) vs. non-local C2D with 5 blocks (red). We show the top-1 training error (dash) and validation error (solid). The validation error is computed in the same way as the training error (so it is 1-clip testing with the same random jittering at training time); the Ô¨Ånal results are in Table 2c (R50, 5-block). 6. Extension: Experiments on COCO # Âú® COCO Êï∏ÊìöÂ∫´‰∏äÁöÑÂØ¶È©óÁµêÊûúÂ¶Ç‰∏ãÊâÄÁ§∫„ÄÇÈëíÊñº non-local block ÁµêÊßãÁöÑÊòìÁî®ÊÄßÔºåÂú®Âπ≥ÊôÇË®≠ Ë®àÁ∂≤Áµ°ÊôÇÊ∑ªÂä†ÈÄôÊ®£ÁöÑÊ®°Â°äËÆäÂæóÂæàÂÆπÊòì„ÄÇ\nTable 5. Adding 1 non-local block to Mask R-CNN for COCO object detection and instance segmentation. The backbone is ResNet-50/101 or ResNeXt-152, both with FPN. ","date":"27 October 2018","externalUrl":null,"permalink":"/posts/paper/paper-nonlocal-nn/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Non-local Neural Networks","type":"posts"},{"content":"Paper Link\n1 Introduction # PointNet Â∞çÂ±ÄÈÉ®ÁâπÂæµÁöÑËôïÁêÜ‰∏¶‰∏çÂÆåÂñÑÔºåÂú® 3D Object Part Segmentation Âíå Semantic Segmentation in Scenes ‰∏≠ÔºàÂç≥ÔºöÈúÄË¶ÅÂæóÂà∞ÊØè‰∏ÄÂÄãÈªûÁöÑÂàÜÊï∏ÊôÇÔºâÔºåÂéüÊñπÊ≥ïÊòØÂ∞áÂÖ®Â±ÄÁâπÂæµ concatenate Âú®ÂñÆÈªûÁâπÂæµÂæåÈù¢Ôºå‰∏≠ÈñìÂøΩÁï•‰∫ÜÂ±ÄÈÉ®ÁâπÂæµÁöÑÊ≠•È©üÔºåÊñºÊòØ‰ΩúËÄÖÊèêÂá∫‰∫Ü PointNet++ Êé°Áî®ÂàÜÂ±§Á•ûÁ∂ìÁ∂≤Ë∑ØÔºàhierarchical neural networkÔºâ‰æÜÂ∞çÊ≠§ÊîπÂñÑ„ÄÇ\nÂè¶Â§ñÔºåÈªûÈõ≤ÁöÑÂØÜÂ∫¶ÊòØ‰∏çÂõ∫ÂÆöÁöÑÔºåÂõ†Ê≠§‰ΩúËÄÖ‰πüÂú® PointNet++ ‰∏≠ÊèêÂá∫‰∫ÜÂØÜÂ∫¶ÈÅ©ÊáâÁöÑÁ∂≤Ë∑ØÁµê Êßã„ÄÇ\nÂ∞±ÂÖ®Â±Ä‰æÜÁúãÔºåPointNet++ ÊØî PointNet Â§ö‰∫ÜÔºö\nÂ±ÄÈÉ®ÁâπÂæµÊèêÂèñ ÂØÜÂ∫¶ÈÅ©ÊáâÁ∂≤Ë∑Ø 2 Problem Statement # ÂÅáË®≠ \\(X = (M, d)\\) ÊòØÁπºÊâøÊ≠êÂü∫ÈáåÂæ∑Á©∫Èñì \\(\\mathbb R^n\\) ÁöÑÈõ¢Êï£Â∫¶ÈáèÁ©∫ÈñìÔºå\nÂÖ∂‰∏≠Ôºö\n\\(M \\subseteq \\mathbb R^n\\)ÔºöÈªûÈõÜ \\(d\\)ÔºöÊòØË∑ùÈõ¢Â∫¶Èáè„ÄÇ Âè¶Â§ñÔºåÊ≠êÂü∫ÈáåÂæ∑Á©∫Èñì‰∏≠ÁöÑ $M$ ÂØÜÂ∫¶Âú®ÂêÑËôïÂèØËÉΩ‰∏çÂùáÂãª„ÄÇÊàëÂÄëÊÑüËààË∂£ÁöÑÊòØÂ≠∏Áøí set function $f$Ôºå$f$ ÁöÑËº∏ÂÖ•ÁÇ∫ $\\mathcal X$Ôºà‰ª•ÂèäÊØèÂÄãÈªûÁöÑÈôÑÂä†ÁâπÂæµÔºâ‰∏¶Áî¢ÁîüÈáçÊñ∞ÂäÉÂàÜ $\\mathcal X$ ÁöÑ semantic Ë®äÊÅØ„ÄÇ\n3 Method # 3.1 Review of PointNet [20]: A Universal Continuous Set Function Approximator # 3.2 Hierarchical Point Set Feature Learning # Figure 2: Illustration of our hierarchical feature learning architecture and its application for set segmentation and classiÔ¨Åcation using points in 2D Euclidean space as an example. Single scale point grouping is visualized here. For details on density adaptive grouping, see Fig. 3 ÈÄôË£°Á∞°ÂñÆË™™Êòé‰∏Ä‰∏ãÁ∂≤Ë∑ØÊû∂ÊßãÔºö\nset abstraction:\nÂ∞çÈªûÈõ≤‰∏≠ÁöÑÈªûÈÄ≤Ë°åÂ±ÄÈÉ®ÂäÉÂàÜ ÊèêÂèñÊï¥È´îÁâπÂæµ Á∞°ÂñÆ‰æÜË™™Ôºöset abstraction = sampling + grouping + pointnet\nSampling layer # ËóâÁî± farthes point sampling (FPS) ‰æÜÈÅ∏Âèñ‰∏Ä points Â≠êÈõÜÔºåÁõ∏ËºÉËàáÈö®Ê©üÈÅ∏ÂèñÔºåFPS ËÉΩÊõ¥ Â•ΩÁöÑË¶ÜËìãÁµ¶ÂÆö centroid ÁöÑÈªûÈõÜ„ÄÇ\nGrouping layer # Êé°Áî®‰∫Ü 3.3 ÁØÄÁöÑ MSG Âíå MRG ÊñπÊ≥ï„ÄÇ\n3.3 Robust Feature Learning under Non-Uniform Sampling Density # Figure 3: (a) Multi-scale grouping (MSG); (b) Multi-resolution grouping (MRG). Multi-scale grouping (MSG) # ÊääÊØèÁ®Æ‰∏çÂêåÂçäÂæëÁöÑÁâπÂæµÂà∞ÊäìÂá∫‰æÜÔºå‰ΩÜ MSG Êúâ‰∏ÄÂÄãÈÅãÁÆóÊïàËÉΩ‰∏äÁöÑÂïèÈ°åÔºåÂõ†Ê≠§‰ΩúËÄÖÊèêÂá∫‰∫Ü MRG„ÄÇ\nMulti-resolution grouping (MRG) # MRG Áî±ÂÖ©ÈÉ®ÂàÜÂêëÈáèÊßãÊàêÔºö\n‰∏ä‰∏ÄÂ±§Âç≥ $L_{i - 1}$ Â±§ÁöÑÂêëÈáè Ëº∏ÂÖ•ÈªûÈõ≤‰∏äÊèêÂèñÁöÑÁâπÂæµ Ê¨äÈáçË™øÈÖçÊñπÂºèÔºö\nÈªûÁ®ÄÁñèÊôÇÔºåÁµ¶ÂæûÈªûÈõ≤ÊèêÂèñÁöÑÁâπÂæµËºÉÈ´òÊ¨äÈáç ÈªûÁ®†ÂØÜÊôÇÔºåÂâáÁµ¶ $L_{i - 1}$ Â±§ÊèêÂèñÁöÑÂêëÈáèËºÉÈ´òÁöÑÊ¨äÈáçÔºåÂõ†ÁÇ∫Ê≠§ÊôÇÈªûÈõ≤ÁöÑÊäΩË±°Á®ãÂ∫¶ÂèØËÉΩ ‰∏çÂ§†ÔºåËÄåÂæû $L_{i - 1}$ Â±§ËÉΩËÆìÊàëÂÄëÁúãÁöÑÊõ¥Âª£‰∫õ„ÄÇ 3.4 Point Feature Propagation for Set Segmentation # ","date":"14 October 2018","externalUrl":null,"permalink":"/posts/paper/paper-pointnet++/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space","type":"posts"},{"content":" Paper Link\n1. Introduction # ÈÄôÁØáÊòØ Stanford Âú® CVPR 2017 ÊâÄÁôºË°®ÁöÑ PointNetÔºåÂæûÂêçÂ≠ó‰∏≠ÂèØ‰ª•Áü•ÈÅìÊòØÊúâÈóúËôïÁêÜ 3D Ë≥á ÊñôÁöÑË´ñÊñá„ÄÇÂÖ®ÊñáÁõÆÊ®ôÂ∞±ÊòØË¶ÅÂ∞çÈªûÈõ≤Ôºàpoint cloudÔºâÂÅöÂêÑÁ®ÆÂàÜÈ°ûÔºåÊúÄÈóúÈçµÁöÑÊñπÊ≥ïÁÇ∫Ôºö\nsingle symmetric function max poolingÔºàËß£Ê±∫ÁÑ°Â∫èÊÄßÔºâ Figure 1. Applications of PointNet. We propose a novel deep net architecture that consumes raw point cloud (set of points) without voxelization or rendering. It is a unified architecture that learns both global and local point features, providing a simple, efficient and effective approach for a number of 3D recognition tasks. 2. Related Work # Point Cloud Features # ÈªûÈõ≤Êúâ local Âíå global featuresÔºåËÄåÊâæÂ∞ãÈÅ©ÊÅ∞ÁöÑÁâπÂæµÁµÑÂêàÊñπÂºèÊòØÂæàÈáçË¶ÅÁöÑ„ÄÇ\nDeep Learning on 3D Data # 3D data ÁöÑË°®Á§∫ÊñπÁ§∫ÔºåÂèäË®òÊÜ∂È´îËÄóË≤ª issue„ÄÇ\nDeep Learning on Unordered Sets # ÈªûÈõ≤ÂÖ∑ÊúâÁÑ°Â∫èÁöÑÁâπÊÄßÔºå‰ΩÜÈ†ÜÂ∫èÂæÄÂæÄÊòØÂÅöÂç∑Á©çÂæàÈóúÈçµÁöÑ‰∏ÄÁí∞„ÄÇ\n3. Problem Statement # ‰ª• Classification ‰æÜË™™Ôºö\nËº∏ÂÖ•Ôºö\\(\\{P_i \\mid i = 1, \\dots, n\\}\\)ÔºåÂÖ∂‰∏≠ \\(P_i\\) ÁÇ∫ÊØèÂÄãÈªûÁöÑÂ∫ßÊ®ô \\((x, y, z)\\) Ëº∏Âá∫ÔºöÂàÜÈ°ûÊØè‰∏ÄÂÄãÈªû \\(P_i\\) Âà∞ class \\(k\\) 4. Deep Learning on Point Sets # 4.1. Properties of Point Sets in \\(\\mathbb R^n\\) # Êú¨ÊñáÁ∂≤Ë∑Ø‰∏≠Ëº∏ÂÖ•Ë≥áÊñôÁöÑÊòØ 3D Á©∫Èñì‰∏≠ÁöÑÈªûÈõ≤Ôºàpoint cloudÔºâÔºåÂú® Pointwise Convolutional Neural Networks ‰∏≠ ÔºåÂ∑≤Á∂ìÊúâÂ∞çÈªûÈõ≤ÂÅö‰∫ÜÂü∫Êú¨‰ªãÁ¥πÔºåÈÄôË£°ÈáçÊñ∞Á∞°ÂñÆÊèê‰∏ÄÊ¨°ÈªûÈõ≤ÁöÑÂπæÂÄãÈáçË¶ÅÁâπÊÄßÔºö\nÁÑ°Â∫èÊÄßÔºöÂèØ‰ª•ÁêÜËß£ÈªûÈõ≤ÁÇ∫‰∏Ä \\(n \\times 3\\) ÁöÑÁü©Èô£Ôºà\\(n\\)ÔºöÈªûÊï∏Ôºâ„ÄÇÂõ†ÁÇ∫Áõ∏ ÂêåÁöÑÈªûÈõ≤ÂèØ‰ª•Áî±ÂÖ©ÂÄã‰∏çÂêåÁöÑÁü©Èô£ÊâÄË°®Á§∫„ÄÇË¶ÅÁü•ÈÅìÔºåÈõñÁÑ∂Ëº∏ÂÖ•ÈÄ≤‰æÜÁöÑË≥áÊñôÊòØÁÑ°Â∫èÊÄßÁöÑÔºå‰ΩÜ Âú®Ë°®Á§∫‰∏ÄÂºµÁ´ãÈ´îÂúñÊôÇÔºåÊØèÂÄãÈªû‰πãÈñìÂÖ∂ÂØ¶ÊòØÊúâÈ†ÜÂ∫èÈóú‰øÇÁöÑÔºåËÄå‰∏îÊúÉÈÅ∏Êìá‰ΩøÁî®Âç∑Á©çÔºå‰πüÊòØË¶Å ËÄÉÈáèÊúâÂ∫èÁöÑÁâπÂæµÊâçÊúâÊÑèÁæ©„ÄÇ\nÈªûËàáÈªû‰πãÈñìÁöÑÈóú‰øÇÔºöÈÄô‰∫õÈªûÂú®Ê≠êÂºèÁ©∫Èñì‰∏≠ÔºåÂΩºÊ≠§ÊúâÂõ∫ÂÆöÁöÑË∑ùÈõ¢„ÄÇÈÄôÊÑèÂë≥ËëóÈªû‰∏çÊòØÂ≠§ Á´ãÁöÑÔºåÁõ∏ÈÑ∞ÈªûÂΩ¢Êàê‰∏ÄÂÄãÊúâÊÑèÁæ©ÁöÑÂ≠êÈõÜ„ÄÇÂõ†Ê≠§ÔºåÊ®°ÂûãÈúÄË¶ÅËÉΩÂ§†ÊçïÁç≤ÈôÑËøëÈªûÁöÑÂ±ÄÈÉ®ÁµêÊßãÔºå‰ª• ÂèäÂ±ÄÈÉ®ÁµêÊßã‰πãÈñìÁöÑÁµÑÂêàÁõ∏‰∫íÈóú‰øÇ„ÄÇ\nËΩâÊèõ‰∏çËÆäÊÄßÔºöÂêå‰∏ÄÊóãËΩâÂíåÂπ≥Áßª‰∏çÊáâÂΩ±Èüø‰ªª‰ΩïÈªûÁöÑÂàÜÈ°ûÁµêÊûú„ÄÇ\n4.2. PointNet Architecture # Figure 2. PointNet Architecture. The classification network takes \\(n\\) points as input, applies input and feature transformations, and then aggregates point features by max pooling. The output is classification scores for \\(k\\) classes. The segmentation network is an extension to the classification net. It concatenates global and local features and outputs per point scores. \u0026ldquo;mlp\u0026rdquo; stands for multi-layer perceptron, numbers in bracket are layer sizes. Batchnorm is used for all layers with ReLU. Dropout layers are used for the last mlp in classification net. Symmetry Function for Unordered Input # ÁÇ∫‰∫ÜË¶Å‰Ωø model ‰∏çÊúÉÂèóÂà∞Ëº∏ÂÖ•Ë≥áÊñôÁÑ°Â∫èÊÄßÁöÑÂΩ±ÈüøÔºåÂÇ≥Áµ±‰∏äÊúâ‰∏âÂÄãÊñπÊ≥ïÔºö\nsorting RNNÔºå‰ΩÜÊúÉÂõ† permutation ÁöÑÁ∑£ÊïÖÂõ∫ËÄå train Âæà‰πÖ symmetric functionÔºàÊú¨Êñá‰∏ªËßíÔºâ Ê≠§ÁØá paper ÊúâÊèêÂà∞ÊñπÊ≥ï 1. ÂíåÊñπÊ≥ï 2. ÁöÑÂÖ©ÂÄã‰∏ªË¶ÅÁº∫ÈªûÔºå‰ª•Ëá¥Êñº‰∏çÂ§ßÂèØË°åÔºö\nsorting ÁöÑÁº∫ÈªûÔºönoiseÔºåËã• noise Êï∏ÈáèÈÅéÂ§öÔºåÂâáÊúÉÈôç‰Ωé sorting ÂæåÔºåË≥áÊñôÊúâÂ∫èÁöÑÊÑèÁæ© ÊÄßÔºÅ RNNÔºöÂú® OrderMatters ‰∏≠Ôºå‰ΩúËÄÖÊèêÂà∞È†ÜÂ∫è ÊÄßÈÇÑÊòØÊúâÂøÖË¶ÅÁöÑÔºåËÄå‰∏î‰∏çËÉΩË¢´ÂÆåÁæéÁöÑÂà™Âéª„ÄÇ ÁÇ∫‰∫ÜËß£Ê±∫ 4.1. ‰∏≠ÊâÄÊèêÂà∞ÁÑ°Â∫èÊÄßÁöÑÂïèÈ°åÔºå‰ΩúËÄÖ‰æøÊèêÂá∫‰∫Ü‰ΩøÁî® max pooling ÁöÑÊñπÊ≥ïÔºö\n$$ f(\\{x_1, \\dots, x_n\\}) \\approx g(h(x_1), \\dots, h(x_n)), \\tag{1} $$\nÂÖ∂‰∏≠Ôºå\n\\(f\\)Ôºö\\(2^{\\mathbb R^N} \\to \\mathbb R\\) \\(h\\)Ôºö\\(\\mathbb R^N \\to \\mathbb R^K\\) \\(g\\)Ôºö\\(\\underbrace{\\mathbb R^K \\times \\cdots \\times \\mathbb R^K}_{n} \\to \\mathbb R\\)ÔºöÂ∞çÁ®±ÂáΩÊï∏ ÈÄôË£°Á∞°ÂñÆÂÅöÂÄãÂèÉÊï∏‰∏äÁöÑË™™ÊòéÔºö\n\\(N\\)ÔºöÊØè‰∏ÄÂÄãÈªûÁöÑÁ∂≠Â∫¶ÔºåÂú®ÈÄôË£°ÊòØ \\(3\\)ÔºåÂç≥ \\((x, y, z)\\) ‰∏âÁ∂≠„ÄÇ \\(h\\)Ôºömlp (multi-layer perceptron) Ë¶ÅÈÄºËøëÁöÑ functionÔºåÂç≥ÔºöÁâπÂæµÊèêÂèñÔºåÂ∞á \\(N (3)\\) Á∂≠ mapping Âà∞ \\(K (1024)\\) Á∂≠ÔºåÈÄôË£°ÁöÑ \\(1024\\) ÊòØ‰ΩúËÄÖÈÅ∏Âèñ‰∏ÄÂÄãË∂≥Â§† Â§ßÁöÑÊï∏Â≠óÔºå‰æÜÈôç‰ΩéË™§Â∑Æ„ÄÇ \\(g\\)Ôºö‰ª£Ë°®ÁöÑÊòØÂ∞çÁ®±ÂáΩÊï∏ÔºåÂú®Èõ¢Êï£Êï∏Â≠∏ÁöÑÈóú‰øÇÔºàRelationÔºâ‰∏≠Ôºåsymmetric ÊòØ‰∏Ä ÂÄãÈõôÂêëÁöÑË°®Á§∫ÔºåÈÄèÈÅéÂ∞ç \\(K (1024)\\) ÂÄã features ‰∏≠ÔºåÊØè \\(n\\) ÂÄãÈªûÂÅö max poolÔºåÂÖ®ÈÉ®ÂÅöÂÆåÂæåÊúÉÂæóÂà∞Á∂≠Â∫¶ÁÇ∫ \\(K (1024)\\) ÁöÑ global feature„ÄÇ‰ΩúËÄÖÂú®ÈôÑÈåÑ‰∏≠Êúâ Â∞çÊ≠§ËôïÔºö„ÄåÁÇ∫‰Ωï mlp ÊèêÂèñÂ§†Â§ö features Ë™§Â∑ÆÂ∞±ÊúÉ‰Ωé„ÄçÂÅöÊï∏Â≠∏Ë≠âÊòéÔºåÁ∂≤Ë∑Ø‰∏äË®±Â§öÊñáÁ´†Ê≤í ÊúâÂ∞çÊ≠§ÂÅöË©≥Á¥∞ÁöÑËß£ËÆÄÔºåÊú¨ÊñáÊúÉË©¶ËëóÁõ°ÈáèËß£Èáã‰πã„ÄÇ paper ÊèêÂà∞ÈÄèÈÅéÂØ¶È©óÔºåÂèØ‰ª•ËóâÁî± mlp ÂéªÈÄºËøë \\(h\\) ÂíåÈÄèÈÅé single variable function Âèä max poolinig function ÂéªÈÄºËøëÂ∞çÁ®±ÂáΩÊï∏ \\(g\\)ÔºåÈÄèÈÅé‰∏ÄÈÄ£‰∏≤ÁöÑ \\(h\\)ÔºåÊàëÂÄëÂèØ‰ª• Â≠∏ÁøíÂà∞‰∏ÄÂÄã‰∏çÈåØÁöÑ \\(f\\)ÔºåÂÖ∂‰∏≠\n$$f = [f_1, \\dots, f_K].$$\nLocal and Global Information Aggregation # Áî± Fig 2 ÂèØ‰ª•ÁúãÂá∫Ôºåglobal feature Âè™ËÉΩÂÅö Classification„ÄÇÈÄèÈÅéÂºè (1)ÔºåÂèØ‰ª•ÂæóÂà∞‰∏Ä ÂÄãÂêëÈáè \\([f_1, \\dots, f_K]\\)ÔºåÈÄèÈÅé Fig 2ÔºàSegmentation NetworkÔºâÔºåÊàëÂÄëÂ∞á global ÈªûÈõ≤ÁâπÂæµÔºà\\(1024\\)ÔºâÊé•Âú®ÊØè‰∏ÄÂÄãÈªûÊú¨‰æÜÁöÑ \\(64\\) ÂÄãÁâπÂæµÁ∂≠Â∫¶ÔºåÂ∞±ÂèØ‰ª•ÂæóÂà∞ per point ÁöÑÊñ∞ featureÔºåËÄåÈÄôÂÄãÊñ∞ feature ËÉΩÂ§†ÂêåÊôÇË°® local Âíå global ÁöÑË®äÊÅØÔºå‰∏¶‰∏î ËÉΩË¢´ÊáâÁî®Âú® Segmentation ‰∏ä„ÄÇ\nJoint Alignment Network # ÈÄèÈÅéÈ†êÊ∏¨‰∏ÄÂÄã„ÄåËΩâÁΩÆÁü©Èô£„ÄçÔºàFig 2 ‰∏≠ T-netÔºåÂ§ßÂ∞èÂàÜÂà•ÁÇ∫ \\(3 \\times 3\\) Âíå \\(64 \\times 64\\)ÔºâÔºåÂêåÊôÇÁÇ∫‰∫ÜÈÅøÂÖç loss ÈÅéÂ§ßÔºåÊúâ‰∫Ü‰ª•‰∏ãÁöÑ regulationÔºö\n$$ L_{reg} = ||I - AA^T||_F^2, \\tag{2} $$\nÂÖ∂‰∏≠Ôºå\n\\(A\\)ÔºöÁî±Ëø∑‰Ω†Á∂≤Áµ°È†êÊ∏¨ÁöÑ features alignment Áü©Èô£ ÊúÄÂæåÂ∞çÊï¥ÂÄãÁ∂≤Ë∑ØÂÅöÂÄãÁ∞°ÂñÆÁöÑË™™ÊòéÔºö\nmlpÔºöÂÖ±‰∫´Ê¨äÈáçÁöÑÂç∑Á©ç\nÁ¨¨‰∏ÄÂ±§ÁöÑ kernel size ÁÇ∫ \\(1 \\times 3\\)ÔºåÂõ†ÁÇ∫ÊØèÂÄãÈªû \\((x, y, z)\\) ÂæåÈù¢ÊØè‰∏ÄÂ±§ÁöÑ kernel Â§ßÂ∞èÈÉΩÊòØ \\(1 \\times 1\\) Âç≥ÔºöÁâπÂæµÊèêÂèñÂ±§Âè™ÊòØÊääÊØèÂÄãÈªûÈÄ£Êé•Ëµ∑‰æÜËÄåÂ∑≤„ÄÇÁ∂ìÈÅéÂÖ©ÁµÑ T-net + mlp ÂæåÔºåÂ∞çÊØè‰∏ÄÂÄãÈªûÊèê Âèñ \\(1024\\) Á∂≠ÁâπÂæµÔºåÁ∂ìÈÅé max pool ÂæåÔºåËÆäÊàê \\(1 \\times 1024\\) ÁöÑÂÖ®ÂüüÁâπÂæµ„ÄÇ ÂÜçÁ∂ìÈÅé‰∏ÄÂÄã mlp ÂæóÂà∞ \\(k\\) ÂÄã score„ÄÇ\n4.3. Theoretical Analysis # Universal approximation # Ê≠§ paper È¶ñÂÖàÂ±ïÁ§∫‰∫ÜÁ•ûÁ∂ìÁ∂≤Áµ°Â∞çÈÄ£Á∫å set functions ÁöÑÈÄºËøëËÉΩÂäõ„ÄÇÈÄöÈÅé set functions ÁöÑÈÄ£Á∫åÊÄßÔºåËº∏ÂÖ• point set ÁöÑÂ∞èË™§Â∑Æ‰∏çÊúÉÂö¥ÈáçÁöÑÂΩ±ÈüøÂà∞ÂáΩÊï∏ÂÄºÔºå‰æãÂ¶Ç classification Êàñ segmentation ÁöÑÂàÜÊï∏„ÄÇ\nTheorem 1. Suppose \\(f: \\mathcal X \\to \\mathbb R\\) is a continuous set function w.r.t Hausdorff distance \\(d_H(\\cdot, \\cdot)\\). \\(\\forall \\epsilon \u0026gt; 0\\), \\(\\exists\\) a continuous function \\(h\\) and a symmetric function \\(g(x_1, \\dots, x_n) = \\gamma \\circ MAX\\), such that for any \\(S \\in \\mathcal X\\),\n$$\\Bigg |f(S) - \\gamma \\Big (MAX_{x_i \\in S} \\{h(x_i)\\} \\Big) \\Bigg | \u0026lt; \\epsilon$$ where \\(x_1, \\dots, x_n\\) is the full list of elements in \\(S\\) ordered arbitrarily, \\(\\gamma\\) is a continuous function, and \\(MAX\\) is a vector max operator that takes \\(n\\) vectors as input and returns a new vector of the element-wise maximum.\nÊ≠§ÂÆöÁêÜÂëäË®¥ÊàëÂÄëÔºåÁï∂Âú® max pooling Â±§ÊôÇÔºåÁµ¶ÂÆöÂ§†Â§öÁöÑÁ•ûÁ∂ìÂÖÉÔºàÂç≥ÔºöÊú¨ÁØá paper ÁöÑ $K$ ÊòØÂ§†Â§ßÁöÑÔºâÔºå$f$ ËÉΩËºïÈ¨ÜÁöÑË¢´ÈÄºËøë„ÄÇ\nBottleneck dimension and stability # ÁêÜË´ñ‰∏äÂíåÂØ¶È©ó‰∏äÔºåÈÄèÈÅé max poolingÔºåÈÉΩÊúÉÂΩ±ÈüøÂà∞Á∂≤Ë∑ØÁöÑË°®ÈÅîËÉΩÂäõÔºå‰ΩÜÈÄèÈÅé‰ª•‰∏ãÂÆöÁêÜÂèØ‰ª•ÂàÜ ÊûêÂá∫Ê≠§Á∂≤Ë∑ØÁöÑÁ©©ÂÆöÊÄßÔºö\nTheorem 2. Suppose \\(\\textbf u: \\mathcal X \\to \\mathbb R^K\\) such that \\(\\textbf u = MAX_{x_i \\in S} \\{h(x_i)\\}\\) and \\(f = \\gamma \\circ \\textbf u\\). Then,\n(a) \\(\\forall S\\), \\(\\exists \\mathcal C_S\\), \\(\\mathcal N_S \\subseteq \\mathcal X\\), \\(f(T) = f(S)\\) if \\(\\mathcal C_S \\subseteq T \\subseteq \\mathcal N_S\\)\n(b) \\(|\\mathcal C_S| \\le K\\)\n5. Experiment # 5.1. Applications # 3D Object Classification # Table 1. Classification results on ModelNet40. Our net achieves state-of-the-art among deep nets on 3D input. 3D Object Part Segmentation # Table 2. Segmentation results on ShapeNet part dataset. Metric is mIoU(%) on points. We compare with two traditional methods and and a 3D fully convolutional network baseline proposed by us. Our PointNet method achieved the state-of-the-art in mIoU. Figure 3. Qualitative results for part segmentation. We visualize the CAD part segmentation results across all 16 object categories. We show both results for partial simulated Kinect scans (left block) and complete ShapeNet CAD models (right block). Semantic Segmentation in Scenes # Table 3. Results on semantic segmentation in scenes. Metric is average IoU over 13 classes (structural and furniture elements plus clutter) and classification accuracy calculated on points. Table 4. Results on 3D object detection in scenes. Metric is average precision with threshold IoU 0.5 computed in 3D volumes. Figure 4. Qualitative results for semantic segmentation. Top row is input point cloud with color. Bottom row is output semantic segmentation result (on points) displayed in the same camera viewpoint as input. 5.2. Architecture Design Analysis # 5.3. Visualizing PointNet # 5.4. Time and Space Complexity Analysis # Table 6. Time and space complexity of deep architectures for 3D data classification. PointNet (vanilla) is the classification PointNet without input and feature transformations. FLOP stands for floating-point operation. The \u0026ldquo;M\u0026rdquo; stands for million. Subvolume and MVCNN used pooling on input data from multiple rotations or views, without which they have much inferior performance. ","date":"9 October 2018","externalUrl":null,"permalink":"/posts/paper/paper-pointnet/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation","type":"posts"},{"content":" Paper Link\nÊ≠§ÁØá paper ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÊòØË¶ÅËß£Ê±∫Ôºå‰ΩÜÈÄÅÈÄ≤Á∂≤Ë∑Ø training ÁöÑ 3D Ë≥áÊñôÊòØÁ®ÄÁñèÁöÑÔºàsparseÔºâ ÔºåÁî®ÂéüÊú¨ÁöÑÊèèËø∞ÊñπÂºèÊúÉÂ§™ËÄóË≤ªË®òÊÜ∂È´îËÄåÈõ£‰ª•ÂØ¶‰ΩúÔºåÂõ†ÁÇ∫ÂØ¶Èöõ‰∏äÂæàÂ§öÂú∞ÊñπÈÉΩÊòØÊ≤íÊúâÂÄºÁöÑÔºåÊú¨ÁØá paper ÈáçÈªûÊòØÔºö‰ΩøÁî® octree ÁöÑÊñπÊ≥ï‰æÜË°®Á§∫È´òËß£ÊûêÂ∫¶ÁöÑ„ÄåÁ´ãÈ´îÂúñÂÉè„ÄçÔºåÂçªÂèà‰∏çÂ§±Êú¨‰æÜ„ÄåÂÆåÊï¥ Âú∞„ÄçË°®Á§∫ÊñπÂºè„ÄÇ\n1. Introduction # ÁèæÊúâÁöÑ 3D Á∂≤Ë∑ØÊû∂ÊßãÔºåÂ§ßÂ§öÊúÉÁî®ÂÉèÈ°û‰ºº 2D pixels ÁöÑË°®Á§∫ÊñπÁ§∫ÔºåÂú® 2D ÊàëÂÄëÁ®±‰πãÁÇ∫ pixelÔºåÂú® 3D ÁöÑË©±Â∞±Á®±‰πãÁÇ∫ voxel„ÄÇÂêåÁêÜÔºåÂú® 2D ‰∏ñÁïåÁöÑ convolution kernel Âú® 3D Â∞± ÊúÉËÆäÊàê‰∏ÄÂÄãÈï∑ÊñπÈ´îÔºåÂ§ßÂ∞èÂèØËÉΩÊòØ \\(3 \\times 3 \\times 3\\) ‰πãÈ°û„ÄÇ\nÂºïËø∞Âéü paper ‰∏≠ÁöÑÊèèËø∞Ôºö\na dense and regular 3D voxel grid, and process this grid using 3D convolution and pooling operations.\n‰∏¶‰∏îÁèæ‰ªäÁöÑ 3D networks ÂèóÈôêÊñºË®òÊÜ∂È´îÂ§ßÂ∞èÔºåÊï∏ÈáèÁ¥öÊï∏ÈÄöÂ∏∏Â§ßÁ¥ÑÂú® \\(30^3\\) voxels„ÄÇ\nÂæû‰∏ãÂúñ‰∏≠ÂèØ‰ª•ÁúãÂà∞ÔºåOctNet ÂèØ‰ª•Áî®„ÄåÊòéÈ°ØËºÉÂ∞ë„ÄçÁöÑ‰ΩçÂÖÉÊï∏ÂéªË°®Á§∫Âà∞‰∏ÄÊ®°‰∏ÄÊ®£ÁöÑ notationÔºà Âúñ‰∏≠ÊØè 1 ÂÄãÂ∞èÊ≠£ÊñπÂûãËÄóË≤ªÁöÑË®òÊÜ∂È´îÁÇ∫ 1 ÂñÆ‰ΩçÔºâ\nFigure 1: Motivation. Â§ßÈÉ®ÂàÜ 3D Ë≥áÊñôÂ∏∏Â∏∏ÊòØÁ®ÄÁñèÁöÑÔºå‰æãÂ¶ÇÔºö\npoint clouds meshes ÊâÄ‰ª•ÂÖ∂ÂØ¶Âú®Â§ßÂ§öÊôÇÈñìÔºå3D convolution ÁöÑË®àÁÆóÈÉΩÊµ™Ë≤ª‰∫Ü‰∏çÂ∞ëË≥áÊ∫ê„ÄÇ‰∏¶‰∏îÁúüÁöÑÂú®Ë®àÁÆóÊôÇ Ôºåhigh activations Â§ßÂ§öÈÉΩÊòØÁôºÂú®Âú®ÈÇäÁïåÊÉÖÊ≥ÅÔºàÂõ†ÁÇ∫ÂæàÂ§öÂú∞ÊñπÊ≤íÂÄºÂïäÔºÅÔºâ\n2. Related Work # Sparse Models # EngelckeÔºöÈÄèÈÅéÂ∞áÂÄºÊé®ÈÄÅÂà∞ÂÖ∂ÁõÆÊ®ô‰ΩçÁΩÆ‰æÜË®àÁÆóÁ®ÄÁñèËº∏ÂÖ•‰ΩçÁΩÆËôïÁöÑÂç∑Á©ç prosÔºöÈôç‰ΩéÊâÄÈúÄË¶ÅÁöÑË®àÁÆóÊ¨°Êï∏ consÔºöË®òÊÜ∂È´îË≥áÊ∫êÈÇÑÊòØÈùûÂ∏∏ËÄó reducing sparse convolutions to matrix operations consÔºöÂè™ÂÖÅË®± \\(2 \\times 2\\) ÁöÑÂç∑Á©çÔºåËÄå‰∏îÈúÄ‰æÜ‰æÜÂõû indexing Êã∑Ë≤ùÔºåÊâÄ‰ª•‰ªçÊúâ overheadÔºåÊúÄÈ´òËß£ÊûêÂ∫¶Â§ßÊ¶ÇÂè™ËÉΩÂÅöÂà∞ \\(80^3\\) voxels„ÄÇ LiÔºöfield probing networks (FBL)ÔºöÂÖàÂ∞ç 3D data ÈÄ≤Ë°å sampleÔºåÂÜçÈ§µÈÄ≤Á∂≤Ë∑Ø prosÔºöÁµêÁúÅË®òÊÜ∂È´î„ÄÅË®àÁÆóÈáè consÔºöÂõ†ÁÇ∫ FBL Ë¢´Ôºåstacked„ÄÅconvolved„ÄÅpooledÔºåÊâÄ‰ª•ÁÑ°Ê≥ïÂÆåÁæéÁôºÊèÆ ConvNets ÁöÑ ÂäõÈáè„ÄÇ 3. Octree Networks # ÁÇ∫‰∫ÜÊ∏õÂ∞ëË°®Á§∫ sparse 3D data ÊâÄÈúÄË¶ÅÁöÑË®òÊÜ∂È´îÁ©∫ÈñìÔºåpaper ÊèêÂá∫‰∫Ü‰∏ÄÁ®ÆÈáùÂ∞çÊï¥ÂÄãÁ´ãÊñπÈ´îÁöÑ ÂäÉÂàÜÊñπÊ≥ïÔºöÂ∞áË®àÁÆóÈõÜ‰∏≠Âú®Áõ∏ÈóúÂçÄÂüü‰∏ä„ÄÇËÄå octrees Â∞±ÊòØ‰∏ÄÂÄãÂæàÊ£íÁöÑÂäÉÂàÜ 3D voxel ÁöÑ Ë°®Á§∫Ê≥ï„ÄÇ\n‰∏ÄËà¨‰æÜË™™Ôºåoctrees ÊúÉ‰ΩøÁî® pointers ‰æÜÂØ¶‰ΩúÔºåÂ¶ÇÊ≠§Â∞±ËÉΩÈÅîÂà∞„ÄåÁúüÂØ¶„ÄçÂú∞Èôç‰ΩéË®òÊÜ∂È´îÈúÄÊ±ÇÈáè Ôºå‰ΩÜ ConvNet ÁöÑ operation ÈÄöÂ∏∏ÈúÄË¶ÅÈ†ªÁπÅÂú∞Ë®™ÂïèÈÑ∞Â±ÖÁöÑÂÄºÔºåÂõ†Ê≠§Â§™Ê∑±ÁöÑ octrees ÊúÉËÆìË®™ ÂïèÊôÇÈñìÈÅéÂ§ßÔºåÁÇ∫‰∫ÜËß£Ê±∫ÈÄôÂÄãÂïèÈ°åÔºåÊú¨ÁØá paper ÊèêÂá∫‰∫Ü‰∏ãÁØÄÁöÑ hybrid grid octree data structure„ÄÇ\n3.1. Hybrid Grid-Octree Data Structure # ÁÇ∫‰∫ÜËß£Ê±∫‰∏äËø∞ÊâÄÊèêÂá∫ÁöÑÊ∑±Â∫¶ÂïèÈ°åÔºàÊ∑±Â∫¶ÊúÉÂ¢ûÂä†Ë®™ÂïèÁöÑÊôÇÈñìË§áÈõúÂ∫¶ÔºâÔºåÊ≠§ÁØá paper ÊèêÂá∫ ‰∫Ü„ÄåÈôêÂà∂ octree ÊúÄÂ§ßÊ∑±Â∫¶„ÄçÁöÑÊÉ≥Ê≥ï„ÄÇ\nFigure 2: Hybrid Grid-Octree Data Structure. This example illustrates a hybrid grid-octree consisting of $8$ shallow octrees indicated by different colors. Using $2$ shallow octrees in each dimension with a maximum depth of $3$ leads to a total resolution of $16^3$ voxels. Fig. 2 ‰∏≠Â∞áÊúÄÂ§ßÊ∑±Â∫¶ÈôêÂà∂ÁÇ∫ \\(3\\)ÔºåÊâÄ‰ª•Êú¨‰æÜ \\(1\\) Ê£µÊ®ôÊ∫ñÁöÑÂÖ´ÂèâÊ®πÂ∞±ÈúÄË¶ÅÁî® \\(8\\) Ê£µÊ∑∫ÂÖ´ÂèâÊ®πÔºàshallow octreesÔºå‰ª•‰∏ãÁ∞°Á®±Ê∑∫Ê®πÔºâ‰æÜË°®Á§∫ÔºåÈõñÁÑ∂ÈÄôÂÄãË≥áÊñôÁµêÊßã‰∏çÊúÉ ÂÉèÊ®ôÊ∫ñÁöÑÂÖ´ÂèâÊ®πÈÇ£È∫ºÁúÅË®òÊÜ∂È´îÔºåÂõ†ÁÇ∫ÊàëÂÄëÈúÄË¶ÅÊõ¥Â§öÁöÑÊ∑∫Ê®π‰æÜË°®Á§∫Ôºå‰ΩÜÊòØÊàëÂÄëÊàêÂäüÁöÑÂ∞áÊú¨‰æÜË¶Å \\(\\log_2 16 = 4\\) Â±§ÁöÑ pointers ÈôçÂà∞‰∫Ü \\(\\log_2 8 = 3\\) Â±§ÁöÑ pointersÔºåËÄå‰∏î Ë®òÊÜ∂È´îÈÇÑÊòØËÄóË≤ªÂú®‰∏ÄÂÄã \\(O(1)\\) ‰πãÂÖßÔºå‰∏¶‰∏îÈÇÑËÉΩÂÜçÂÅöÂ£ìÁ∏Æ„ÄÇ\n‰æãÂ¶ÇÂÉèËã•Êúâ‰∏ÄÊ£µÊ∑∫Ê®πÊ≤íÊúâ‰ªª‰Ωï input dataÔºå‰ªñÂ∞±Âè™Ë¶ÅÁî®‰∏ÄÂÄã \\(\\textbf 0\\) ÂêëÈáè‰æÜË°® Á§∫Êú¨‰æÜ \\(8^3 = 512\\) ÂÄã \\(\\textbf 0\\) ÂêëÈáèÔºàÂÅáË®≠Ê∑±Â∫¶‰∏ÄÊ®£ÊòØ \\(3\\)ÔºâÔºÅ\nÂÖ´ÂèâÊ®πÁöÑ‰∏ÄÂÄãÂ§ßÂÑ™ÈªûÂ∞±ÊòØÂèØ‰ª•ÊúâÊïàÁéáÂú∞Á∑®Á¢ºÊàê bit string representationÔºå‰∏çÂÉÖÊúâÊïàÈôç‰Ωé Ë®™ÂïèÊ¨°Êï∏Ôºå‰πüÂèØÈÅãÁî® GPGPU Êúâ ÊïàÂú∞ÂØ¶‰Ωú„ÄÇ\n3(a) Shallow Octree 3(b) Bit-Representation Figure 3: Bit Representation. Shallow octrees can be efficiently encoded using bit-strings. the bit-string 1 01010000 00000000 01010000 00000000 010100000\u0026hellip; defines the octree in (a) ‰ΩøÁî®ÈÄôÁ®Æ bit-representationÔºåÊ∑∫ÂÖ´ÂèâÊ®π‰∏≠ÁöÑÂñÆÂÄã voxel ÂÆåÂÖ®Áî±ÂÖ∂ bit index Ë°®Á§∫„ÄÇÊ≠§ index Á¢∫ÂÆöÔºö\nvoxel ÁöÑÊ∑±Â∫¶ voxel ÁöÑÂ§ßÂ∞èÔºàË∂äÊ∑±Ë∂äÂ∞èÔºâ ÂèØ‰ª•‰ΩøÁî®Á∞°ÂñÆÁöÑÁÆóÊ≥ï‰æÜÊ™¢Á¥¢ index \\(i\\) ÁöÑ voxel ÁöÑÁõ∏ÊáâÁöÑÁà∂„ÄÅÂ≠êÁ¥¢ÂºïÔºåËÄå‰∏çÊòØ‰ΩøÁî®Êåá ÂêëÁà∂ÁØÄÈªûÂíåÂ≠êÁØÄÈªûÁöÑ pointerÔºö\n$$ \\text{pa}(i) = \\Bigg \\lfloor \\frac{i - 1}{8} \\Bigg \\rfloor, \\tag{1} $$\n$$ \\text{ch}(i) = 8 \\cdot i + 1. \\tag{2} $$\nÊàëÂÄëÂ∞áÊ∑∫Ê®πÁöÑ data (storgin features vectors) ÊîæÂú®‰∏ÄÂÄãÈÄ£Á∫åÁöÑÈô£ÂàóÔºåÂõ†Ê≠§ÊàëÂÄëË¶ÅËÉΩÂø´ ÈÄüÁöÑË®àÁÆóÔºöÁï∂Áµ¶ÂÆö‰∏ÄÂÄã bit-representation ‰∏≠ÁöÑ index \\(i\\) ÊôÇÔºåÁÆóÂá∫‰ªñÂ∞çÊáâÁöÑ data indexÔºåÂÖ¨ÂºèÂ¶Ç‰∏ãÔºö\n$$ \\text{data\\_idx}(i) = \\underbrace{8 \\sum_{j = 0}^{\\text{pa}(i) - 1} \\text{bit}(j) + 1}_{\\#\\text{nodes above }i} - \\underbrace{\\sum_{j = 0}^{i - 1} \\text{bit}(j)}_{\\#\\text{split nodes pre }i} + \\underbrace{\\text{mod}(i - 1, 8)}_{\\text{offset}}. \\tag{3} $$\nÁúãËµ∑‰æÜÂæàË§áÈõúÔºåÂ∞çÂêßÔºü\nÂºïËø∞ A.3. Efficient Convolution ÁöÑË™™ÊòéÔºö\npaper ÊúâÊèê‰æõ‰∫Ü Appendix ÁöÑ‰æãÂ≠ê‰æõÂèÉËÄÉÔºåÈÄôË£°ÂÅöÂÄãÁ≠ÜË®òÔºåÁÇ∫‰∫ÜËÉΩÂ§†ÂúñÂÉèÂåñÔºåÂ∞áÂÖ´ÂèâÊ®πÊîπÁÇ∫ ÂõõÂèâÊ®πÔºåÂ∞çÊáâÁöÑÂÖ¨Âºè‰øÆÊ≠£Â¶Ç‰∏ãÔºö\n$$ \\text{data\\_idx}_4(i) = \\underbrace{4 \\sum_{j = 0}^{\\text{pa}(i) - 1} \\text{bit}(j) + 1}_{\\#\\text{nodes above }i} - \\underbrace{\\sum_{j = 0}^{i - 1} \\text{bit}(j)}_{\\#\\text{split nodes pre }i} + \\underbrace{\\text{mod}(i - 1, 4)}_{\\text{offset}}. \\tag{14} $$\nÂíå\n$$ \\text{pa}_4(i) = \\Bigg \\lfloor \\frac{i - 1}{4} \\Bigg \\rfloor. $$\n13(a) Bit-String 13(b) Split and Leaf Nodes 13(c) Bit Index 13(d) Data Index ‰æãÂ¶ÇÊàëÂÄëË¶ÅÊâæÁöÑ bitÔºåindex ÁÇ∫ \\(51\\)ÔºåÊàëÂÄëÈ¶ñÂÖàÊ†πÊìöÊâæ parent ÁöÑÂÖ¨ÂºèÔºö\n$$ \\text{pa}_4(51) = \\Bigg \\lfloor \\frac{51 - 1}{4} \\Bigg \\rfloor = 12. $$\nÂæóÂà∞ parent bit index ÁÇ∫ \\(12\\)ÔºåÂÜç‰æÜË®àÁÆó parent \\(12\\) ÁöÑÁ¨¨‰∏ÄÂÄã childÔºö\n$$ 12 \\cdot 4 + 1 = 49. $$\nÂÜçÊ†πÊìöÂºè (14) Á¨¨‰∏ÄÈ†ÖÔºöÊâæÂá∫Áî± bit \\(0\\) Âà∞ bit \\(11\\) ÁöÑ bit value ÊòØ \\(1\\) ÁöÑÊï∏ÈáèÔºàÂç≥ÔºöÊúâÂèâÈñãËôïÔºâÔºå‰ª•ÈÄôË£°‰æÜË™™ÂÖ±Êúâ \\(4\\) ÂÄãÔºåÂàÜÂà•Âú® bit index \\(0\\), \\(2\\), \\(4\\) Âíå \\(9\\)ÔºåÊâÄ‰ª•ÂæóÂà∞Âú® bit \\(49\\) ‰ª•ÂâçÁöÑÈªûÂÖ±Êúâ \\(4 \\cdot 4 + 1 = 17\\) ÂÄã\nÂºè (14) Á¨¨‰∫åÈ†ÖÔºöÂú® bit \\(51\\) Ââç bit value ÊòØ \\(1\\) ÁöÑÊï∏ÈáèÔºå‰ª•ÈÄôË£°‰æÜË™™ÂÖ±Êúâ \\(6\\) ÂÄãÔºåÂàÜÂà•Âú® bit index \\(0\\), \\(2\\), \\(4\\), \\(9\\), \\(12\\) Âíå \\(18\\)ÔºåÊâÄ‰ª•ÈÄô‰∫õÂæÖÊúÉË¶ÅÊâ£Êéâ \\(6\\)\nÂºè (14) Á¨¨‰∏âÈ†ÖÂñÆÁ¥îÁöÑÊâæÂá∫ offset ÁÇ∫\n$$ \\text{mod}(51 - 1, 4) = 2. $$\nÊúÄÂæåÂ∞±ËÉΩÊ±ÇÂæó bit $51$ ÁöÑ data index ÁÇ∫ $17 - 6 + 2 = 13$„ÄÇ\n3.2. Networks Operations # ‰æÜË¨õË¨õ notation ÁöÑË°®Á§∫ÊñπÊ≥ïÔºö\n\\(T_{i, j, k}\\)ÔºöÂú®‰ΩçÁΩÆ \\((i, j, k)\\) ÁöÑ 3D tensor \\(T\\)\nÁµ¶ÂÆö hybrid grid-octree structure ÂíåÂ§ßÂ∞èÁÇ∫ \\(D \\times H \\times W\\) ÁöÑÊ∑∫Ê®πÔºå ‰∏¶‰∏îÊ∑±Â∫¶ \\(\\le 3\\)\n\\(O[i, j, k]\\)ÔºöÊâÄÊúâËÉΩÂ§†ÂåÖ‰Ωè voxel \\((i, j, k)\\) ‰∏≠ÔºåÊúÄÂ∞è cell ÁöÑ value\nÊâÄ‰ª•Âç≥‰æø \\(i_1 \\ne i_2 \\lor j_1 \\ne j_2 \\lor k_1 \\ne k_2\\)Ôºå\\(O[i_1, j_1, k_1]\\) Âíå \\(O[i_2, j_2, k_2]\\) ‰ªçÊúâÂèØËÉΩÂ∞çÊáâÂà∞Âêå‰∏ÄÂÄã hybrid grid-octree ‰∏≠ÁöÑ voxelÔºåÈÄôÊòØÁî± voxels ÁöÑÂ§ßÂ∞èÊâÄÊ±∫ÂÆöÁöÑ„ÄÇ\nÂè¶Â§ñÊàëÂÄëÂèØ‰ª•ÂæóÂà∞Ê∑∫Ê®πÁöÑ index ÁÇ∫ \\((\\big\\lfloor \\frac i 8 \\big\\rfloor, \\big\\lfloor \\frac j 8 \\big\\rfloor, \\big\\lfloor \\frac k 8 \\big\\rfloor)\\)Ôºå‰∏îÂ∞çÂÖ∂ ‰∏≠‰∏ÄÂÄãÊ∑∫Ê®πÁöÑ local index ÁÇ∫ \\((\\text{mod}(i, 8), \\text{mod}(j, 8), \\text{mod}(k, 8))\\)„ÄÇ\nÊúâ‰∫Ü‰∏äËø∞ÁöÑ notation ÂæåÔºåÊàëÂÄëÂèØ‰ª•ÂæóÂà∞Áî± grid-octree \\(O\\) Âà∞ tensor \\(T\\) ÁöÑ mapping Â¶Ç‰∏ãÔºö\n$$ \\text{oc2ten}: T_{i, j, k} = O[i, j, k]. \\tag{4} $$\nÈÄôË£°ÂèØ‰ª•ÁêÜËß£ÊàêÔºöÊàëÂÄëË¶ÅÊâæ \\((i, j, k)\\) ÁöÑÂÄºÔºåÂç≥Ôºö\n\\(\\forall\\) cell \\(\\in O\\)Ôºå\nËÉΩÂåÖ‰Ωè \\((i, j, k)\\) Â§ßÂ∞èÂèàÊòØÊúÄÂ∞èÁöÑ cell Ë©≤ cell ÁöÑ value Â∞±ÊòØ‰ΩçÁΩÆ \\((i, j, k)\\) ÁöÑ tensor„ÄÇ\nÂõ†Ê≠§ÂèØËÉΩÊúÉÊúâÂ•ΩÂπæÂÄã‰∏çÂêåÁöÑ‰ΩçÁΩÆÔºåÂõ†ÁÇ∫ÈÉΩÂú®Âêå‰∏ÄÂÄã cell ‰πã‰∏≠Ôºå‰ªñÂÄëÁöÑ value Â∞±‰∏ÄÊ®£„ÄÇ\nÂêåÊôÇ‰πüÂèØÂæóÂà∞ÈÄÜÂêëÁöÑ mappingÔºö\n$$ \\text{ten2oc}: O[i, j, k] = \\text{pool\\_voxels}_{(\\bar i, \\bar j, \\bar k) \\in \\Omega[i, j, k]} (T_{\\bar i, \\bar j, \\bar k}), \\tag{5} $$\nÂÖ∂‰∏≠Ôºå\n\\(\\text{pool\\_voxels}(\\cdot)\\)Ôºöpooling function (e.g., average or max-pooling)ÔºåÂ∞çÊâÄÊúâÂú® \\(T\\) ‰∏≠ÁöÑ voxels ÂÅö pooling ÂèØ‰ª•ÁêÜËß£ÊàêÔºö\\(\\forall (\\bar i, \\bar j, \\bar k)\\) Âú® \\((i, j, k)\\) ÊâÄÂ∞çÊáâÂà∞ÁöÑ ÁØÑÂúçÂÖßÔºàË©≤ cellÔºåÊúÄÂ§ßÊúÉÊòØ \\(8^3 = 512\\)ÔºâÔºåÂ∞ç‰ªñÂÄëÊØèÂÄã voxels ÊâÄÂ∞çÊáâÁöÑ tensor \\(T_{\\bar i, \\bar j, \\bar k}\\) ÂÅö pooling\nConvolution # Convolution ÁÑ°ÁñëÊòØÊúÄÈáçË¶Å‰πüÊúÄÂêÉË®àÁÆóË≥áÊ∫êÁöÑÔºåÂ∞çÂè™ÊúâÂñÆ‰∏Ä feature map ÁöÑÊØèÂÄã voxels ‰æÜË™™ÔºåÂ∞çÊØè‰∏ÄÂÄãÈÄÅÈÄ≤‰æÜÁöÑ input tensor \\(T_{\\hat i, \\hat j, \\hat k}^\\text{in}\\) Âíå 3D kernel \\(W \\in \\mathbb R^{L \\times M \\times N}\\) ÂèØ‰ª•Ë¢´ÂØ´ÊàêÔºö\n$$ T_{i, j, k}^\\text{out} = \\sum_{l = 0}^{L - 1} \\sum_{m = 0}^{M - 1} \\sum_{n = 0}^{N - 1} W_{l, m, n} \\cdot T_{\\hat i, \\hat j, \\hat k}^\\text{in}, \\tag{7} $$\nÂÖ∂‰∏≠Ôºö\n\\(\\hat i = i - l + \\lfloor L / 2 \\rfloor\\) \\(\\hat j = j - m + \\lfloor M / 2 \\rfloor\\) \\(\\hat k = k - n + \\lfloor N / 2 \\rfloor\\) ÂêåÊ®£ÁöÑÔºåÂ∞ç grid-octree ÂÅö convolutionsÔºö\n$$ \\text{ten2oc}: O^\\text{out}[i, j, k] = \\text{pool\\_voxels}_{(\\bar i, \\bar j, \\bar k) \\in \\Omega[i, j, k]} (T_{\\bar i, \\bar j, \\bar k}) \\tag{8} $$\n$$ T_{i, j, k} = \\sum_{l = 0}^{L - 1} \\sum_{m = 0}^{M - 1} \\sum_{n = 0}^{N - 1} W_{l, m, n} \\cdot O^\\text{in}[\\hat i, \\hat j, \\hat k]. $$\nÂ∞ç \\(\\forall (i, j, k) \\in \\text{cell } \\Omega[i, j, k]\\) ÂÅöÂç∑Á©çÁöÑË©±ÔºåËã• octree cell Â§ßÂ∞èÁÇ∫ \\(8^3\\)Ôºåkernel Â§ßÂ∞èÁÇ∫ \\(3^3\\) ÁöÑË©±ÔºåÂÖ±Ë¶ÅÂÅö\n\\(8^3 \\cdot 3^3 = 13,824\\) Ê¨°‰πòÊ≥ï„ÄÇ‰ΩÜÊòØÔºåÊàëÂÄëÂèØ‰ª•Êõ¥ÊúâÊïàÂú∞Ë®àÁÆóÔºåÂ¶Ç Fig. 14 ÁöÑ‰æã Â≠êÊâÄÁ§∫Ôºö\n14(a) Constant 14(b) Corners 14(c) Edges 14(d) Faces Fig. 14aÔºöËßÄÂØüÂà∞Â§ßÈÉ®ÂàÜ‰∏≠ÂøÉÁöÑÂÄºÊòØÂõ∫ÂÆöÁöÑ„ÄÇÂõ†Ê≠§ÔºåÊàëÂÄëÂè™ÈúÄË¶ÅÂú®‰∏≠ÂøÉÂÖß‰∏ÄÊ¨°Ë®àÁÆó‰∏ÄÊ¨°Âç∑ Á©ç‰∏¶Â∞áÁµêÊûú‰πò‰ª• \\(8^3\\)\nFig. 14b-dÔºöÂè¶Â§ñÔºåÊàëÂÄëÂè™ÈúÄË¶ÅÂú® voxel ÁöÑ cornerr„ÄÅedges Âíå faces ‰∏äË®àÁÆó kernel ÁöÑÊà™Êñ∑ÁâàÊú¨„ÄÇÈÄôÊ®£ÁöÑÂØ¶‰ΩúÊñπÊ≥ïÂæàÊúâÊïàÁéáÔºåÂõ†ÁÇ∫ÊàëÂÄëÁ∏ΩÂÖ±Âè™ÈúÄË¶ÅÔºö\nÂ∞ç‰∏≠ÂøÉ constant ÈÉ®ÂàÜÈÄ≤Ë°å \\(3^3 = 27\\) Ê¨°‰πòÊ≥ï Â∞ç corners ÈÄ≤Ë°å \\(8 \\cdot 19 = 152\\) Ê¨°‰πòÊ≥ï Â∞ç edges ÈÄ≤Ë°å \\(12 \\cdot 6 \\cdot 15 = 1080\\) Ê¨°‰πòÊ≥ï Â∞ç faces ÈÄ≤Ë°å \\(6 \\cdot 6^2 \\cdot 9 = 1944\\) Ê¨°‰πòÊ≥ï Á∏ΩÂÖ±Áî¢Áîü \\(27 + 152 + 1080 + 1944 = 3203\\) Ê¨°‰πòÊ≥ïÔºåÊòØÊú¨‰æÜ \\(13,824\\) ÁöÑ \\(23.17%\\)ÔºåËÉΩÊúâÊïàÈôç‰ΩéË®àÁÆóÁöÑÊôÇÈñìË§áÈõúÂ∫¶„ÄÇ\nÊâÄ‰ª•ÂèØ‰ª•ÂæóÂà∞‰∏ãÈù¢ÁöÑ Fig. 4ÔºåÊúâÂà•ÊñºÂÇ≥Áµ±ÁöÑ voxel by voxel convolutionÔºåpaper ‰∏≠ÊèêÂá∫ ‰æÜÔºöÈÄèÈÅéÂàÜÈñãË®àÁÆóÂêÑÂÄã voxel\nconstant ËàáÈÑ∞Â±ÖÁöÑÊà™Êñ∑ convolution ÂÜçÁõ∏Âä†ÊòéÈ°ØÊúâÊïàÁéáÂæàÂ§ö„ÄÇ\n4(a) Standard Convolution 4(b) Efficient Convolution Pooling # Pooling ‰æùÂ∫èÂæûÊúÄÂ∞èÁöÑ cell ÈñãÂßãÔºåÊØè \\(2^3\\) ÂÄãÁï∂ÂâçÊúÄÂ∞èÁöÑ cell ÂÅö‰∏ÄÊ¨° poolingÔºå ÂÖ¨ÂºèÂèØÂØ´ÊàêÂ¶Ç‰∏ãÔºö\n$$ T_{i, j, k}^\\text{out} = \\max_{l, m, n \\in [0, 1]} (T_{2i + l, 2j + m, 2k + n}^\\text{in}), \\tag{9} $$\nÂÖ∂‰∏≠Ôºö\n\\(T^\\text{in} \\in \\mathbb R^{2D \\times 2H \\times 2W}\\) \\(T^\\text{out} \\in \\mathbb R^{D \\times H \\times W}\\) Â∞ç‰∏ÄÂÄãÊúâ \\(2D \\times 2H \\times 2W\\) Ê£µÊ∑∫Ê®πÁöÑ input grid octree \\(O^\\text{in}\\) ËÄåË®ÄÔºå\\(O^\\text{out}\\) ÊúÉÊúâ \\(D \\times H \\times W\\) Ê£µÊ∑∫Ê®π ÔºåÊØè‰∏ÄÂÄã \\(O^\\text{in}\\) ‰∏≠ÁöÑ voxel ÈÉΩÂ§ßÂ∞èÈÉΩÊúÉÂ∞çÂçäÂÜçË§áË£ΩÂà∞Êõ¥Ê∑± 1 Â±§ÁöÑÊ∑∫Ê®πÔºå‰æã Â¶Ç‰ª•Ê∑±Â∫¶ÁÇ∫ \\(3\\) ÁöÑ \\(O^\\text{in}\\) ÂÅö‰∏ÄÊ¨° poolingÔºåÂÖ¨ÂºèÂèØ‰ª•ÂØ´ÊàêÔºö\n$$ O^\\text{out}[i, j, k] = \\begin{cases} O^\\text{in}[2i, 2j, 2k] \u0026amp; \\text{ if vxd}(2i, 2j, 2k) \u0026lt; 3; \\\\ P \u0026amp; \\text{ else} \\end{cases} $$\n$$ P = \\max_{l, m, n \\in [0, 1]} (O^\\text{in}[2i + l, 2j + m, 2k + n]), \\tag{10} $$\nÂÖ∂‰∏≠ \\(\\text{vxd}(\\cdot)\\) Ë®àÁÆóÂú®Ê∑∫Ê®π‰∏≠ indexed voxel ÁöÑÊ∑±Â∫¶„ÄÇ\nÈÄèÈÅé Fig. 5 ËÉΩÊúâÊõ¥Ê∑±ÁöÑ‰∫ÜËß£Ôºö\nFigure 5: Pooling. The \\(2^3\\) pooling operation on the grid-octree structure combines \\(8\\) neighbouring shallow octrees (a) into one shallow octree (b). The size of each voxel is halved and copied to the new shallow octree structure. Voxels on the finest resolution are pooled. Different shallow octrees are depicted in different colors. Unpooling # Êúâ‰∫Ü pooling ÁöÑÊ¶ÇÂøµÂæåÔºåunpooling Â∞±Âè™ÊòØÈÄÜÂêëÂõûÂéªÔºå‰πüÂñÆÁ¥îÂæàÂ§öÔºåÂØ´ÊàêÂÖ¨ÂºèÂ¶Ç‰∏ãÔºö\n$$ T_{i, j, k}^\\text{out} = T_{\\lfloor i / 2 \\rfloor, \\lfloor j / 2 \\rfloor, \\lfloor k / 2 \\rfloor}^\\text{in}. \\tag{11} $$\n$$ O^\\text{out}[i, j, k] = O^\\text{in}[\\lfloor i / 2 \\rfloor, \\lfloor j / 2 \\rfloor, \\lfloor k / 2 \\rfloor]. \\tag{12} $$\nFigure 6: Unpooling. The \\(2^3\\) unpooling operation transforms a single shallow octree of depth \\(d\\) as shown in (a) into \\(8\\) shallow octrees of depth \\(d - 1\\), illustrated in (b). For each node at depth zero one shallow octree is spawned. All other voxels double in size. Different shallow octrees are depicted in different colors. 4. Experimental Evaluation # 4.1. 3D Classification # Figure 7: Results on ModelNet10 Classification Task. Figure 8: Voxelized 3D Shapes from ModelNet10. Âæû Fig. 7 ‰∏≠ÂèØ‰ª•ÁúãÂá∫ÔºåOctNet Âú®ÂêÑÈ†Ö metrics ‰∏≠ÈÉΩÊúâÂæàÂº∑Â§ßÁöÑËÉΩÂäõÔºåFig. 7c ÊòØÊåáÊØèÂÄã block ÁöÑÂç∑Á©çÂ±§Êï∏ÂàÜÂà•Âõ∫ÂÆöÂú® \\(1\\)„ÄÅ\\(2\\) Âíå \\(3\\)„ÄÇFig 7d ‰∏≠ÔºåÁîöËá≥ÂèØÁôºÁèæ DenseNet Âè™ËÉΩÂÅöÂà∞ \\(64^3\\) ÁöÑÊúÄÂ§ßËß£ÊûêÂ∫¶ÔºåÈÅ†ÈÅ†‰∏çÂèä OctNet ËÉΩÂÅöÂà∞ \\(256^3\\) ÁöÑ Ëß£ÊûêÂ∫¶„ÄÇ\n4.2. 3D Orientation Estimation # Figure 9: Confusion Matrices on ModelNet10. Figure 10: Orientation Estimation on ModelNet10. Figure 11: Orientation Estimation on ModelNet10. This figure illustrates $10$ rotation estimates for \\(3\\) chair instances while varying the input resolution from \\(16^3\\) to \\(128^3\\). Darker colors indicate larger deviations from the ground truth. 4.3. 3D Semantic Segmentation # Table 1: Semantic Segmentation on RueMonge2014. Figure 12: OctNet \\(256^3\\) Facade Labeling Results. 5. Conclusion and Future Work # OctNet ÊòØ‰∏ÄÁ®ÆÊñ∞Á©éÁöÑ 3D representationÔºåÂèØ‰ª•ËÆìÈ´òËß£ÊûêÂ∫¶Ëº∏ÂÖ•Ê∑±Â∫¶Â≠∏Áøí„ÄÇÊàëÂÄëÂàÜÊûê‰∫ÜÈ´ò Ëß£ÊûêÂ∫¶Ëº∏ÂÖ•Â∞çÂπæÂÄã 3D Â≠∏Áøí‰ªªÂãôÁöÑÈáçË¶ÅÊÄßÔºå‰æãÂ¶ÇÂ∞çË±°ÂàÜÈ°û„ÄÅÂßøÂã¢‰º∞Ë®àÂíåË™ûÁæ©ÂàÜÂâ≤„ÄÇÊàëÂÄëÁöÑÂØ¶ È©óË°®ÊòéÔºåÂ∞çÊñº ModelNet10 ÂàÜÈ°ûÔºå‰ΩéËß£ÊûêÂ∫¶Á∂≤Áµ°Ë≠âÊòéÊòØË∂≥Â§†ÁöÑÔºåËÄåÈ´òËº∏ÂÖ•ÔºàÂíåËº∏Âá∫ÔºâËß£ÊûêÂ∫¶ Â∞çÊñº 3D ÊñπÂêë‰º∞Ë®àÂíå 3D point cloud Ê®ôË®òÂæàÈáçË¶Å„ÄÇ‰ΩÜÊ≠§ÁØá paper ‰ΩúËÄÖÁõ∏‰ø°ÔºåOctNet ËÉΩÂ§† Â∞á 3D ÁöÑÊ∑±Â∫¶Â≠∏ÁøíÂ∏∂ÂêëÊõ¥È´òËß£ÊûêÂ∫¶ÁöÑ‰∏ñÁïå„ÄÇ\n","date":"5 October 2018","externalUrl":null,"permalink":"/posts/paper/paper-octnet/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò OctNet: Learning Deep 3D Representations at High Resolutions","type":"posts"},{"content":" Paper Link\nÂú®ÈÄôÁØá paper ‰∏≠ÔºåÂ±ïÁ§∫‰∫Ü‰ΩøÁî® CNNs ÂéªËôïÁêÜ 3D point cloudsÔºå‰∏¶‰∏îÊáâÁî®Âú® semantic segmentation Âíå object recognition ‰∏≠„ÄÇ\nMathWorks ÂÆòÁ∂≤ÊúâÂ∞ç Semantic Segmantation ÂÅö‰∫Ü‰∏ÄÂÄãÂü∫Á§é ÁöÑ‰ªãÁ¥πÔºö\nÂàÜÂâ≤ÔºàSegmantationÔºâÂ∞çÊñºÂúñÂÉèÂàÜÊûê‰ªªÂãôÈùûÂ∏∏ÈáçË¶Å„ÄÇË™ûÁæ©ÂàÜÂâ≤ÔºàSegmantic SegmantationÔºâ ÊèèËø∞‰∫ÜÂ∞áÂúñÁâá‰∏≠ÁöÑÊØèÂÄãÂÉèÁ¥†ËàáÈ°ûÊ®ôÁ±§Ôºàclass labelÔºâÔºå‰æãÂ¶ÇÔºöËä±„ÄÅ‰∫∫„ÄÅÈÅìË∑Ø„ÄÅÂ§©Á©∫„ÄÅÊµ∑Ê¥ã ÊàñÊ±ΩËªäÔºåÁõ∏ÈóúËÅØÁöÑÈÅéÁ®ã„ÄÇ\n1. Introduction # ÁèæÊúâÁöÑÊ∑±Â∫¶Â≠∏ÁøíÂú®ËôïÁêÜ 3D Ë≥áÊñôÔºåÂÉèÊòØÈ´îÁ©ç„ÄÅpoint clouds„ÄÅÊàñ multi-view ÂúñÁâá‰ªçÊúâ‰∏çÂ∞ë Âõ∞Èõ£„ÄÇ\nVolume representation ÊúÄËÉΩÂ§†„ÄåÂÆåÊï¥Âú∞„ÄçÊèèËø∞‰∏ÄÂºµÂúñÁâáÔºåÁõ¥ËßÄ‰∏ä‰πüÊòØÊúÄÂÆπÊòìÂØ¶ÂÅöÁöÑÔºå‰ΩÜ ÊòØÁ§ôÊñºÁ°¨È´îË≥áÊ∫êÔºàË®òÊÜ∂È´î„ÄÅÂÆπÈáèÁ≠âÔºâÔºåÊâÄ‰ª•‰∏çÂ§ßÂèØË°å„ÄÇ Multi-view representation ÈõñÁÑ∂‰∏çÊòØÊúÄÁúüÂØ¶ÁöÑÊèèËø∞ÊñπÂºèÔºå‰ΩÜËÉΩÂ§†ÈÄèÈÅé‰∫ãÂÖàË®ìÁ∑¥Â•ΩÁöÑ 2D Ê®°Âûã‰æÜÂä†‰ª•ÂØ¶Áèæ„ÄÇ Point clouds ‰∏ç‰ΩÜË≥áË®äÈáèËºÉÂ∞èÔºåËÄå‰∏îËºÉÁÇ∫ÂΩàÊÄßÔºå‰ΩÜ point clouds ËàáÁ•ûÁ∂ìÁ∂≤Ë∑ØÁöÑÊáâÁî®ÈÇÑ Êú™Ë¢´Ê∑±ÂÖ•ÊåñÊéòÔºåÈÄô‰πüÊòØÊ≠§ÁØá paper Ë™ïÁîüÁöÑÂéüÂõ†„ÄÇ Á∂úÂêà‰æÜË™™ÔºåÊï¥ÁØá paper ÁöÑÈáçÈªûÂú®ÊñºÔºö\nA pointwise convolution operator that can output features at each point in a point cloud; Two pointwise convolutional neural networks for semantic scene segmentation and object recognition. 2. Related Works # 2.1. Shape descriptors # Hand-crafted ÁöÑ shape descriptors Âú®Ê∑±Â∫¶Â≠∏ÁøíË™ïÁîü‰ª•ÂâçÔºåÊôÇÂ∏∏Ë¢´ÈÅãÁî®Âú®ÂêÑÁ®Æ‰∏çÂêåÁöÑ computer vision ÊáâÁî®‰∏äÔºåÁõ¥Âà∞Ê∑±Â∫¶Â≠∏ÁøíÁöÑÂá∫ÁèæÔºåÂÇ≥Áµ±ÊñπÊ≥ïÁöÑÁúºÊ∑ö‰πüÊª¥‰∏ã‰æÜ‰∫Ü„ÄÇ\n2.2. Object recognition # ÁµêË™ûÔºöCNNs Ë¢´Âª£Ê≥õÈÅãÁî®Âú® CV Âíå AI È†òÂüüÂ∑≤Á∂ì‰∏çÊòØ‰∏ÄÂÖ©Â§©ÁöÑ‰∫ã‰∫Ü„ÄÇ\nÂÉè ImageNet Â∞±ÊòØ‰∏ÄÂÄãËëóÂêçÁöÑÂ§ßÂûã RGB 3 Á∂≠ image datasetÔºåCNNs ËÉΩÂ§†Âæû‰∏≠ÊàêÂäüÂú∞Â≠∏ÁøíÂà∞ image descriptors ‰∏¶Â§ßÂãùÂÇ≥Áµ±ÊñπÊ≥ï„ÄÇ\nËÄå PointNet ÊòØÁ¨¨‰∏ÄÂÄãËÉΩÂ§†ËôïÁêÜ point cloud data ÁöÑÁ∂≤Ë∑ØÊû∂ÊßãÔºå‰ªñËÉΩÂ§†Â≠∏ÁøíÂà∞È†ÜÂ∫è‰∏çËÆäÊÄßÔºàorder-invarianceÔºâÁöÑÂáΩÂºè„ÄÇ\nÊ≠§Â§ñÔºåPointCNN ‰πüÊé¢Á¥¢‰∫Ü equivariance ËÄå‰∏çÊòØ invariance ÁöÑËßÄÈªûÔºå‰∏¶‰∏îÂæóÂà∞Âíå PointNet ÂèØÊØîÁöÑÊïàËÉΩ„ÄÇ\nÁÇ∫‰∫ÜÈÅîÊàêÁ∏ÆÊîæÁöÑÁõÆÁöÑÔºåÈÄöÈÅéÂª∫Á´ãË®àÁÆóÂúñÂûãÔºå‰æãÂ¶ÇÔºö\noctree kd-tree ‰πüÂæàÂ∏∏Ë¶ã„ÄÇ\nStanford ÊèêÂá∫ÁöÑ PointNet ÈõñÁÑ∂ÊïàËÉΩÂæàÁåõÔºå‰ΩÜÁ∂≤Ë∑ØË§áÈõúÔºåÈÄôÁØá paper ÊèêÂá∫‰∫ÜÁõ∏Â∞çÁ∞°ÂñÆÁöÑ pointwise convolutionÔºå‰∏îËÉΩÈÅîÂà∞Âíå PointNet„ÄÅPointCNN Á≠âÁõ∏‰ªøÁöÑÊ∫ñÁ¢∫Â∫¶„ÄÇ\n2.3. Semantic segmentation # Áî± Silberman ÊâÄÊèêÂá∫ NYUv2 datasetÔºåÂ∏∂‰æÜ ‰∫Ü RGB-D semantic segmentation ÁöÑÈ¢®ÊΩÆ„ÄÇ\nRGB-D ÂúñÁâáÂÖ∂ÂØ¶ÊòØÂÖ©ÂºµÂúñÁâáÔºö\nÊôÆÈÄöÁöÑ RGB 3 Á∂≠ÂúñÁâá Depth ÂúñÁâáÔºàÈ°û‰ººÁÅ∞ÈöéÂúñÁâáÔºåÂè™ÊòØÊØèÂÄãÂÉèÁ¥†ÂÄºÊòØË∑ùÈõ¢Áâ©È´îÁöÑÂØ¶ÈöõË∑ùÈõ¢Ôºâ SegNet Â∞±Âú®Ê≠§ dataset ÂæóÂà∞‰∏çÈåØÁöÑÊïàÊûúÔºå‰ªñ‰ΩøÁî® ÁöÑÊñπÊ≥ïÁÇ∫Ôºö\nencoder-decoder dilation filter McCormac ÂâáËÉΩÈÄèÈÅé 2D È†êÊ∏¨ 3D domainÔºå‰ΩÜÈÄô‰∫õ È†êÊ∏¨‰∏¶ÁÑ°Ê≥ïË¢´Áõ¥Êé•ÊáâÁî®Âú® 3D domain„ÄÇ\nSSCNet ÊáâÁî® CNN Âú® 3D volume representation ÂéªÂàÜÈ°ûÊØèÂÄãÂÉèÁ¥†„ÄÇ\n3. Pointwise Convolution # ÂÖà‰æÜË´áË´áË¶ÅÈ∫ºÊèèËø∞‰∏ÄÂÄã 3D Áâ©‰ª∂ÔºåVoxNet ‰ΩøÁî®‰∫Ü \\(64 \\times 64 \\times 64\\) ÁöÑËß£ÊûêÂ∫¶ÂéªÊèèËø∞‰∏ÄÂÄãÁâ©‰ª∂Ôºå‰ΩÜÈÄôÊúâ‰∏ÄÂÄãÂæàÂ§ßÁöÑÁº∫ÈªûÔºåÂæàËÄóË≤ªË®òÊÜ∂È´îÔºåÂõ†ÁÇ∫ÂÖ∂ÂØ¶Â§ßÈÉ®ÂàÜÁöÑÂÉèÁ¥† ÔºàÁ´ãÈ´î‰∏âÁ∂≠Á©∫Èñì‰∏≠ÁöÑÔºâÁöÜÊòØ \\(0\\)Ôºå‰ΩÜÈÄôÂèØ‰ª•Ë¢´ sparse representation Ëß£Ê±∫„ÄÇ\nPoint clouds ËÉΩÂ§†Ë¢´ RGB-D reconstruction Âíå CAD modeling ÁöÑÁâπÊÄßÔºåÂõ†Ê≠§‰πüÊòØ‰∏ÄÂÄã‰∏ç ÈåØÁöÑË°®Á§∫Ê≥ïÔºåPointNet Â∞±ÊòØÂü∫ÊñºÊ≠§Áî¢ÁîüÁöÑÔºå‰ΩÜÂ∞á point cloud È§µÁµ¶Á•ûÁ∂ìÁ∂≤Ë∑ØÊòØ‰∏çËá™ÁÑ∂ÁöÑÔºå Âõ†ÁÇ∫ÂÇ≥Áµ±ÁöÑ convolution operators Âè™Ë®≠Ë®àÁµ¶ grid Âíå volumes„ÄÇ\nConvolution # ÊØè‰∏ÄÂÄã kernel\n‰ª• point cloud ‰∏≠ÊØè‰∏ÄÂÄãÈªûÁÇ∫‰∏≠ÂøÉ Êúâ‰∏ÄÂÄã size Êàñ radius valueÔºàÂèØË¢´Ë™øÊï¥Ôºâ Êï∏Â≠∏Á§∫ÂèØË°®Á§∫ÊàêÔºö\n$$ x_i^\\ell = \\sum_k w_k \\frac{1}{|\\Omega_i(k)|} \\sum_{p_j \\in \\Omega_i(k)} x_j^{\\ell - 1}, \\tag{1} $$\nÂÖ∂‰∏≠Ôºå\n\\(k\\)ÔºöÊâÄÊúâ sub-domains \\(\\Omega_i(k)\\)ÔºöÁï∂ kernel ‰ª• point \\(i\\) ÁÇ∫‰∏≠ÂøÉÊôÇÔºåÁ¨¨ \\(k\\)-th sub-domain \\(p_i\\)Ôºöpoint \\(i\\) ÁöÑÂ∫ßÊ®ô \\(|\\cdot|\\)ÔºöË®àÁÆóÊâÄÊúâ sub-domain Ë£°ÁöÑ points Êï∏Èáè \\(w_k\\)Ôºö\\(k\\)-th sub-domain ÁöÑ kernel weight \\(x_i\\) Âíå \\(x_j\\)Ôºöpoint \\(i\\) Âíå \\(j\\) ÁöÑÂÄº \\(\\ell - 1\\) Âíå \\(\\ell\\)Ôºöinput Âíå output index Gradient backpropagation # ‰ª§ \\(L\\) ÁÇ∫ loss functionÔºågradient ÂèØË¢´Ë°®Á§∫ÊàêÔºö\n$$ \\frac{\\partial L}{\\partial x_j^{\\ell - 1}} = \\sum_{i \\in \\Omega_j} \\frac{\\partial L}{\\partial x_i^\\ell} \\frac{\\partial x_i^\\ell}{\\partial x_j^{\\ell - 1}}, \\tag{2} $$\nÊàëÂÄëÈÅçÊ≠∑ÊâÄÊúâÈªû \\(j\\) ÁöÑ ÈÑ∞Â±ÖÈªû \\(i\\)ÔºåÂêåÊôÇ \\(\\partial x_i^\\ell / \\partial x_j^{\\ell - 1}\\) ÂèØË¢´ÂØ´ÊàêÔºö\n$$ \\frac{\\partial x_i^\\ell}{\\partial x_j^{\\ell - 1}} = \\sum_k w_k \\frac{1}{|\\Omega_i(k)|} \\sum_{p_j \\in \\Omega_i(k)} 1 \\tag{3} $$\n$$ \\frac{\\partial L}{\\partial w_k} = \\sum_i \\frac{\\partial L}{\\partial x_i^\\ell} \\frac{\\partial x_i^\\ell}{\\partial w_k} \\tag{4} $$\nÂÖ∂‰∏≠Ôºå\n$$ \\frac{\\partial x_i^\\ell}{\\partial x_k} = \\frac{1}{|\\Omega_i(k)|} \\sum_{p_j \\in \\Omega_i(k)} x_j^{\\ell - 1} \\tag{5} $$\n‰∏äÊñπÁöÑÂÖ¨Âºè‰∏¶Ê≤íÊúâÂÅáÂÆö convolution kernel ÊúâÂõ∫ÂÆöÁöÑÂΩ¢ÁãÄÔºåÂú®Ê≠§ÁØá paper ‰∏≠ÔºåÊâÄÊúâÁöÑ convolution kernels Â§ßÂ∞èÁöÜÁÇ∫ \\(3 \\times 3 \\times 3\\)ÔºåËÄåÊâÄÊúâÈªûÁöÑ weights ÁöÜ‰∏Ä Ê®£Â§ß„ÄÇ\nÂíåÂÇ≥Áµ±Á´ãÈ´î convolution ‰∏çÂêåÁöÑÊòØÔºå‰ªñ‰∏ç‰ΩøÁî® pooling„ÄÇpaper ÊèêÂá∫‰ª•‰∏ãÁöÑÂÑ™ÈªûÔºö\n‰∏çÂÜçÈúÄË¶ÅËôïÁêÜ downsampling Âíå upsampling ÈÑ∞Â±Ö query ÁöÑÂä†ÈÄüÁµêÊßãÂè™ÈúÄË¶ÅÂª∫Êßã‰∏ÄÊ¨° Point order # Âíå PointNet È°ØËëó‰∏çÂêåÁöÑÊòØÔºåÂ¶Ç‰ΩïÂ∞áÈªûÈ§µÈÄ≤Á∂≤Ë∑Ø‰∏≠Ôºü\nÂú® PointNet ‰∏≠Ôºåpoint cloud ÊòØÊ≤íÊúâÈ†ÜÂ∫èÊÄßÁöÑÔºå‰ΩÜÂú®Ê≠§ÁØá paper ‰∏≠Ôºå‰ªñË™çÁÇ∫È†ÜÂ∫èÊòØÊúâÂøÖ Ë¶ÅÁöÑ„ÄÇ‰ªñÂ∞á input points Ê†πÊìöÁâπÂÆöÁöÑ order ÂÅöÊéíÂ∫èÔºå‰æãÂ¶ÇÔºöXYZ Êàñ Morton curve„ÄÇ\nÂú® object recognition ‰∏≠ÔºåÈ†ÜÂ∫èÊÄßÊòØÂøÖË¶ÅÁöÑÔºå‰ΩÜÂú® semantic segmentation ‰∏≠ÔºåÂà©Áî®ÊØè ÂÄãÈªûÁöÑÂ±ÄÈÉ®ÁâπÂæµÔºåÂõ†Ê≠§‰∏çÈúÄË¶ÅÈªûÈ†ÜÂ∫è„ÄÇ\n√Ä-trous convolution # ÈÄèÈÅéÊñ∞Â¢û‰∏ÄÈ†Ö stride ÂèÉÊï∏ÔºåÂèØ‰ª•Â∞áÂéüÂßãÈÄêÈªûÂç∑Á©çÊì¥Â±ïÂà∞ √†-trous (dilated) Âç∑Á©ç„ÄÇÈÄèÈÅé Â¢ûÂ§ß kernel sizeÔºåÊÑüÁü•ÁØÑÂúç‰∫ÜÔºåÈÄôÊúâÂä©ÊñºÂä†Â∫¶Ë®ìÁ∑¥Âçª‰∏çÂ§±Á≤æÂ∫¶„ÄÇ\nGIF ‰æÜÊ∫ê\nPadding, strides No padding, no stride, dilation Point attributes # ÁÇ∫‰∫ÜÊñπ‰æøÂØ¶ÁèæÂç∑Á©çÔºåÊàëÂÄëÂàÜÂà•ÂÑ≤Â≠òÈªûÂùêÊ®ôÂíåÂÖ∂‰ªñÈªûÂ±¨ÊÄßÔºå‰æãÂ¶ÇÈ°èËâ≤„ÄÅÊ≥ïÁ∑öÊàñÂæûÂÖàÂâçÂç∑Á©çÂ±§Ëº∏ Âá∫ÁöÑÂÖ∂‰ªñÈ´òÁ∂≠ÁâπÂæµ„ÄÇ\n4. Evaluations # Semantic segmantation # Table 1: Comparison of scene segmentation on S3DIS dataset Table 2: Per-class accuracy of semantic segmentation on S3DIS dataset Table 3: Per-class accuracy of semantic segmentation on SceneNN dataset Semantic segmentation on the S3DIS dataset Semantic segmentation on SceneNN dataset Object recognition # Table 4: Comparison of performance of network architectures using 3D object representations on the ModelNet40 dataset Table 5: Comparison of object recognition accuracy on the ObjectNN dataset ","date":"27 September 2018","externalUrl":null,"permalink":"/posts/paper/paper-pointwise-cnn/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Pointwise Convolutional Neural Networks","type":"posts"},{"content":"","date":"19 September 2018","externalUrl":null,"permalink":"/tags/eccv/","section":"Tags","summary":"","title":"ECCV","type":"tags"},{"content":" Paper Link\nË¨õÂà∞ image clusteringÔºåÂ∞±ÂøÖÈúÄÂÖà‰æÜË´áË´á‰ªÄÈ∫ºÊòØ cluster analysisÔºàËÅöÈ°ûÂàÜÊûêÔºâÔºåÂú®Á∂≠Âü∫ ÁôæÁßë‰∏äÁµ¶Âá∫‰∫Ü‰∏ãÂàó‰∏ÄÊÆµÁöÑÂÆöÁæ©Ôºö\nËÅöÈ°ûÂàÜÊûêÔºàËã±Ë™ûÔºöCluster analysisÔºå‰∫¶Á®±ÁÇ∫Áæ§ÈõÜÂàÜÊûêÔºâÊòØÂ∞çÊñºÁµ±Ë®àÊï∏ÊìöÂàÜÊûêÁöÑ‰∏ÄÈñÄÊäÄË°ì ÔºåÂú®Ë®±Â§öÈ†òÂüüÂèóÂà∞Âª£Ê≥õÊáâÁî®ÔºåÂåÖÊã¨Ê©üÂô®Â≠∏ÁøíÔºåÊï∏ÊìöÊåñÊéòÔºåÊ®°ÂºèË≠òÂà•ÔºåÂúñÂÉèÂàÜÊûê‰ª•ÂèäÁîüÁâ©‰ø° ÊÅØ„ÄÇËÅöÈ°ûÊòØÊääÁõ∏‰ººÁöÑÂ∞çË±°ÈÄöÈÅéÈùúÊÖãÂàÜÈ°ûÁöÑÊñπÊ≥ïÂàÜÊàê‰∏çÂêåÁöÑÁµÑÂà•ÊàñËÄÖÊõ¥Â§öÁöÑÂ≠êÈõÜÔºàsubsetÔºâ ÔºåÈÄôÊ®£ËÆìÂú®Âêå‰∏ÄÂÄãÂ≠êÈõÜ‰∏≠ÁöÑÊàêÂì°Â∞çË±°ÈÉΩÊúâÁõ∏‰ººÁöÑ‰∏Ä‰∫õÂ±¨ÊÄßÔºåÂ∏∏Ë¶ãÁöÑÂåÖÊã¨Âú®ÂùêÊ®ôÁ≥ª‰∏≠Êõ¥Âä†Áü≠ ÁöÑÁ©∫ÈñìË∑ùÈõ¢Á≠â„ÄÇ\n‰∏ÄËà¨ÊääÊï∏ÊìöËÅöÈ°ûÊ≠∏Á¥çÁÇ∫‰∏ÄÁ®ÆÈùûÁõ£Áù£ÂºèÂ≠∏Áøí„ÄÇ\nÁÇ∫ÈÅøÂÖçÊ∑∑Ê∑ÜÔºåÊ≠§ÁØáÊñáÁ´†‰∏ÄÂæã‰ΩøÁî®ÂéüÊñá image clusteringÔºåËÄå‰∏çÂ§öÂÅöÁÑ°Ë¨ÇÁöÑÁøªË≠Ø„ÄÇ\n1 Introduction # Image clustering ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÁÇ∫Ôºö\nÁôºÁèæÂúñÁâáË°®Á§∫ÁöÑËá™ÁÑ∂ÂíåÂèØËß£ÈáãÁµêÊßã Â∞áÂΩºÊ≠§Áõ∏‰ººÁöÑÂúñÁâáÂàÜÁµÑÂà∞Âêå‰∏ÄÂÄãÁæ§ÈõÜ‰∏≠ ÁèæÊúâÁöÑ clustering methods ‰∏ªË¶ÅÊúâ‰ª•‰∏ãÂÖ©Á®ÆÔºö\nsingle-view image clustering (SVIC) multi-view image clustering (MVIC) ËÄåÁèæÂú® MVIC ËºÉÂª£Ê≥õÁöÑË¢´‰ΩøÁî®ÔºåÂõ†ÁÇ∫‰ªñÊúâ„ÄåÂæûÂñÆÂºµÂúñÁâá‰∏≠ÊèêÂèñÂ§öÂÄã‰∏çÂêåÁâπÂæµÁöÑÈùàÊ¥ªÊÄß„Äç„ÄÇ\nÂÜçÊõ¥Á¥∞ÂàÜ‰∏ãÂéªÔºåÁèæÊúâÁöÑ MVIC ÂèØÂÜçË¢´ÂàÜÊàê‰∏âÈ°ûÔºö\nmulti-view spectral clusting multi-view subspace clustering multi-view matrix factorization ÈÄôÊòØÊï¥ÂÄã paper ÊâÄÊèêÂà∞ÁöÑÊµÅÁ®ãÔºö\nÈÄèÈÅé paper ‰∏≠ÁöÑÊñπÊ≥ïÔºåËÉΩÂ§†Â∞áÊú¨‰æÜÁöÑË≥áÊñôÂæû„ÄåÊ≠êÂü∫ÈáåÂæ∑Ë∑ùÈõ¢ÊôÇÈñìË§áÈõúÂ∫¶ \\(O(Nd)\\)„ÄçÈôç Âà∞„Äå\\(O(1)\\)„ÄçÔºàÂõ†ÁÇ∫Á∑®Á¢ºÊàê Binary Codes ÂæåÂè™ÈúÄÂÅö XOR operationsÔºâÔºÅ\nÂÖ∂‰∏≠Ôºå\n\\(N\\): data sizeÔºà‰æãÂ¶Ç‰∏ÄÂºµÂúñÊúâÂπæÂÄã pixelsÔºâ \\(d\\): dimensionÔºà‰æãÂ¶Ç‰ΩøÁî® R„ÄÅG„ÄÅB ‰∏âÂÄãÁ∂≠Â∫¶‰æÜÊèèËø∞‰∏ÄÂÄã pixelÔºâ Âè¶Â§ñË£úÂÖÖ‰∏Ä‰∏ã LBP Âíå HOG ÁöÑÁî®ÈÄîÔºö\nLBP (Local Binary Pattern) HOG (Histogram of Oriented Gradient) ÂÑ™Èªû 1. Â∞çÂÖâ‰∏çÊïèÊÑü 2. ÈÅãÁÆóÈÄüÂ∫¶Âø´ ÂøΩÁï•‰∫ÜÂÖâÁÖßÈ°èËâ≤Â∞çÂúñÁâáÈÄ†ÊàêÁöÑÂΩ±ÈüøÔºå‰ΩøÂæóÂúñÁâáÊâÄÈúÄË¶ÅÁöÑ features Á∂≠Â∫¶ËºÉ‰Ωé Áº∫Èªû Â∞çÊñπÂêëË≥áË®äËºÉÊïèÊÑü 1. ÊèèËø∞Â≠êÁîüÊàêÈÅéÁ®ãÂÜóÈï∑ÔºåÂ∞éËá¥ÈÄüÂ∫¶ÊÖ¢ÔºåÈõ£‰ª• realtime 2. Èõ£ËôïÁêÜÈÅÆÊìãÂïèÈ°å 3. Áî±ÊñºÊ¢ØÂ∫¶ÁöÑÊÄßË≥™ÔºåÂ∞çÂô™Èü≥ÂæàÊïèÊÑü Áî®ÈÄî ‰∫∫ËáâË≠òÂà•„ÄÅÁÖßÁâáÂàÜÈ°û Ë°å‰∫∫Ê™¢Ê∏¨ 2 Highly-economized Scalable Image Clustering (HSIC) # Áµ¶ÂÆö‰∏ÄÂÄã multi-view image features ÁöÑÈõÜÂêàÔºö\n$$\\mathcal X = \\{\\boldsymbol X^1, \\dots, \\boldsymbol X^m\\},$$\nÂÖ∂‰∏≠ \\(m\\) ‰ª£Ë°®Êúâ \\(m\\) ÂÄã viewsÔºåËÄåÊØè‰∏ÄÂÄã \\(\\boldsymbol X^v\\)Ôºà\\(m\\) ÂÄã views ‰∏≠ÁöÑÁ¨¨ \\(v\\) ÂÄã viewÔºâÔºå\\(1 \\le v \\le m\\) ÂèàÂèØ‰ª•Ë°®Á§∫ÊàêÔºö\n$$\\boldsymbol X^v = [\\boldsymbol x_1^v, \\dots, \\boldsymbol x_N^v] \\in \\mathbb R^{d_v \\times N},$$\nÂÖ∂‰∏≠Ôºå\n\\(d_v\\)Ôºödimensionality \\(N\\): \\(\\boldsymbol X^v\\) ‰∏≠ÁöÑ data points Êï¥ÁØáË´ñÊñáÁöÑ‰∏ªË¶ÅÁõÆÊ®ôÊòØÔºö„ÄåÂ∞á \\(\\mathcal X\\) ÂàÜÊàê \\(c\\) ÂÄãÁæ§ÈõÜÔºàclustersÔºâ„ÄÇ „Äç\nËÄå HSIC ÁöÑÊñπÊ≥ïÊòØÔºöÈÄèÈÅéÊõ¥‰ΩéÁ∂≠Â∫¶ ÁöÑÊº¢ÊòéË∑ùÈõ¢ÔºàHamming spaceÔºâÈÄ≤Ë°å binary clustering„ÄÇ\nÊõ¥Á≤æÁ¢∫‰æÜË™™ÔºåÈÄèÈÅéÂ∞á multi-view features ÊäïÂΩ±Âà∞ Hamming space ‰∏≠ÂéªÂ≠∏Áøí‰ª•‰∏ãÂÖ©ÈªûÔºö\ncommon binary representation robust binary cluster structures Âú®Ë≥áÊñôÈ†êËôïÁêÜÁöÑÊ≠•È©üÂ¶Ç‰∏ãÔºö\nÂ∞áÊØèÂÄã view ‰∏≠ÁöÑÁâπÂæµÔºåÊ®ôÊ∫ñÂåñÁÇ∫Èõ∂‰∏≠ÂøÉÂêëÈáèÔºàzero-centered vectorsÔºâ\nÊØè‰∏ÄÂÄã feature vector ÈÉΩÊúÉÁî± nonlinear RBF (Radial Basis Function) kernel mapping Á∑®Á¢ºÔºåÂç≥Ôºö\nÔºàÈÄôË£°Ë£úÂÖÖË™™Êòé‰∏Ä‰∏ã‰ªÄÈ∫ºÊòØ nonlinear kernel mappingÔºå‰∏ªË¶ÅÁî®ÈÄîÁÇ∫Ôºömapping data Âà∞ higher dimensionsÔºåÈÄôÊ®£‰∏Ä‰æÜ‰ªñÂ∞±Êúâ‰∫ÜÁ∑öÊÄßÁöÑÊÄßË≥™ÔºåËÆìÂú®‰ΩéÁ∂≠Â∫¶ÁÑ°Ê≥ïÁ∑öÊÄßÂàÜÂâ≤ÁöÑ dataÔºåÂú®È´òÁ∂≠Â∫¶ÊôÇÂ∞±ËÉΩÁ∑öÊÄßÂàÜÂâ≤„ÄÇÔºâ\n$$\\psi(\\boldsymbol x_i^v) = \\Bigg [e^{\\frac{-||\\boldsymbol x_i^v - \\boldsymbol a_1^v||^2}{\\gamma}}, \\dots, e^{\\frac{-||\\boldsymbol x_i^v - \\boldsymbol a_l ^v||^2}{\\gamma}} \\Bigg]^\\top \\in \\mathbb R^{l \\times 1},$$\nÂÖ∂‰∏≠Ôºå\n\\(\\gamma\\): ‰∫ãÂÖàÂÆöÁæ©Â•ΩÁöÑ kernel width \\(\\psi(\\boldsymbol x_i^v) \\in \\mathbb R^{l \\times 1}\\)ÔºàÊàëÂÄëÂèØ‰ª•Â∞á \\(\\psi\\) ÂáΩÊï∏ÁêÜËß£Êàê‰∏ÄÂÄãÂ∞á \\(\\boldsymbol x_i^v\\) Áî± \\(\\mathbb R^{d_v \\times 1}\\) mapping Âà∞ \\(\\psi(\\boldsymbol x_i^v) \\in \\mathbb R^{l \\times 1}\\) ÁöÑÁ∑öÊÄßËΩâÊèõÔºåÂÖ∂ÁõÆÁöÑÊòØÂõ†ÁÇ∫ÊØè‰∏ÄÂÄã \\(\\boldsymbol x_i^v\\) ÁöÑÁ∂≠Â∫¶ Ôºà\\(d^v\\)Ôºâ‰∏çÂêåÔºå‰∏ÄÂêå mapping Ëá≥ \\(\\mathbb R^{l \\times 1}\\) ËºÉÊúâÂà©ÊñºÈÅã ÁÆó„ÄÇÔºâ \\(\\{a_i^v\\}_{i = 1}^l\\): Áî± \\(\\boldsymbol X^v\\) ‰∏≠Èö®Ê©üÈÅ∏Âèñ \\(l\\) ÂÄã anchor pointsÔºàÊ≠§ÁØá paper Âèñ \\(l = 1000\\)Ôºâ Êé•‰∏ã‰æÜÔºåÊàëÂÄëÊõ¥ÈÄ≤‰∏ÄÊ≠•ÁöÑÊïòËø∞Ë©≥Á¥∞ÁöÑÊñπÊ≥ïÔºö\n2.1 Common Binary Representation Learning # Âú® HSIC ‰∏≠Ë¶ÅÂ≠∏ÁøíÁöÑ hashing functions ÂÖ±Êúâ $K$ ÂÄã„ÄÇ\nÔºàË£úÂÖÖ‰∏Ä‰∏ãÔºöhashing functions Âú® paper ‰∏≠‰∏¶Ê≤íÊúâÊòéÁ¢∫ÊåáÂá∫ÊòØ‰ªÄÈ∫ºÔºåËÄåÊàëÂÄã‰∫∫ÁêÜËß£ ÁÇ∫ÊäïÂΩ±Áü©Èô£ \\(\\boldsymbol (P^v)^\\top = [\\boldsymbol p_1^v, \\dots, \\boldsymbol p_K^v]^\\top \\in \\mathbb R^{K \\times l}\\)ÔºåÊåáÁöÑÊòØÊâæÂà∞ÈÇ£ \\(K\\) ÂÄã Á∂≠Â∫¶ÁÇ∫ \\(\\mathbb R^{1 \\times l}\\) ÁöÑ hashing functions \\(p_k^v\\), \\(1 \\le k \\le K\\)ÔºåËÉΩÂ§†Â∞á \\(\\psi(\\boldsymbol x_i^v) \\in \\mathbb R^{l \\times 1}\\) ËΩâÊèõÊàê‰∏ÄÂÄãÂñÆ‰∏ÄÁöÑ Binary CodeÔºå‰ΩÜÂÖ±Ë¶ÅÂÅö \\(K\\) Ê¨°ÔºåÂæóÂà∞‰∏ÄÂÄã \\(\\boldsymbol b_i \\in \\mathbb R^{K \\times 1}\\) ÁöÑÂûÇÁõ¥ÂêëÈáèÔºâ\nHSIC ÂêåÊôÇ‰πüÊúÉÂ∞áÂ§öÂÄã views ÁöÑ features ÊäïÂ∞ÑÂà∞ÂÖ±ÂêåÁöÑ Hamming spaceÔºåÊâÄ‰ª•ÊàëÂÄëÂèØÂæóÂà∞ \\(\\boldsymbol b_i\\)ÔºàBinary CodesÔºâÁöÑÁÆóÊ≥ïÂ¶Ç‰∏ãÔºö\n$$\\boldsymbol b_i = sgn((\\boldsymbol P^v)^\\top \\psi(\\boldsymbol x_i^v)) \\in \\mathbb R^{K \\times 1},$$\nÂÖ∂‰∏≠Ôºå\n\\(\\boldsymbol b_i\\): ‰∏çÂêå views ‰∏≠ÔºåÁ¨¨ \\(i\\)-th ÁâπÂæµÁöÑÂÖ±Âêå Binary CodeÔºàÂç≥ Ôºö\\(\\boldsymbol x_i^v, \\forall v = 1, \\dots, m\\)Ôºâ\nÔºàÊàëÁöÑÁêÜËß£ÊòØÔºö\\(\\forall\\) views ‰∏≠Ôºà\\(1, \\dots, m\\)ÔºâÔºåÁ¨¨ \\(i\\)-th column ÁöÑ \\(d^v \\times 1\\) ÂÄãÂêëÈáèÔºåÂÖ±Âêå‰ª£Ë°®‰ªñÂÄëÁöÑ \\(\\mathbb b_i \\in \\mathbb R^{K \\times 1}\\) Binary CodesÔºâ\n\\(sgn(\\cdot)\\): element-wise sign function\n\u0026lt; 0 Âèñ -1 \u0026gt; 0 Âèñ 1 \\((\\boldsymbol P^v)^\\top = ([\\boldsymbol p_1^v, \\dots, \\boldsymbol p_K^v])^\\top \\in \\mathbb R^{K \\times l}\\): Á¨¨ \\(v\\)-th view ÁöÑÊò†Â∞ÑÁü©Èô£ Ôºàmapping matrixÔºâÔºåÂèØÊÉ≥ÂÉèÊàê‰∏ÄÂÄãÂ∞áÁ∂≠Â∫¶ÁÇ∫ \\(\\mathbb R^{l \\times 1}\\) ÁöÑ \\(\\psi(\\boldsymbol x_i^v)\\) mapping Âà∞Á∂≠Â∫¶ÁÇ∫ \\(K\\) ÁöÑÂêëÈáèÁ©∫ÈñìÔºàdim(hashing functions) = \\(K\\)Ôºâ\nÁî±‰∏äÔºåÊàëÂÄëËÉΩÈÄèÈÅéÊúÄÂ∞èÂåñ‰ª•‰∏ãÁöÑ quantization loss ‰æÜÂª∫Á´ãÂ≠∏ÁøíÂáΩÊï∏Ôºö\n$$ \\min_{\\boldsymbol P^v, \\boldsymbol b_i} \\sum_{v = 1}^m \\sum_{i = 1}^N ||\\boldsymbol b_i - (\\boldsymbol P^v)^\\top \\psi(\\boldsymbol x_i^v)||_F^2. $$\n\\(\\sum_{i = 1}^N\\) ‰ª£Ë°®ÂÖ±Êúâ \\(N\\) ÂÄã \\(b_i\\) Ë¶ÅË¢´Â≠∏ÁøíÔºåÂÖ∂‰∏≠ÈÄô‰∫õ \\(b_i\\) ‰æÜËá™ \\(\\sum_{v = 1}^m\\)„ÄÇ\nÊäïÂΩ± \\(\\{\\boldsymbol P^v\\}_{v = 1}^m\\) ÂèØ‰ª•Ë£úÊçâÂà∞ËÉΩÂ§†‰ΩøÁõ∏‰ººÂ∫¶ÊúÄÂ§ßÂåñÁöÑÂÖ±‰∫´Ë≥á Ë®äÔºåÊâÄ‰ª•ÊàëÂÄëÂèàÂèØ‰ª•ÂæóÂà∞\n$$\\boldsymbol P^v = [\\boldsymbol P_S, \\boldsymbol P_I^v],$$\nÂÖ∂‰∏≠Ôºå\n\\(\\boldsymbol P_S \\in \\mathbb R^{l \\times K_S}\\): the shared projection across multiple views\n\\(\\boldsymbol P_I^v \\in \\mathbb R^{l \\times K_I}\\): the individual projection for the \\(v\\)-th view\n\\(K = K_S + K_I\\)\n\\(\\boldsymbol P_I^v \\in \\mathbb R^{l \\times K_I}\\): the individual projection for the \\(v\\)-th view\n\\(K = K_S + K_I\\)\nÂõ†Ê≠§ÔºåHSIC ÂèØ‰ª•ËóâÁî± multiple views Â≠∏Âà∞ common binary representationÔºö\n$$ \\min_{\\boldsymbol P^v, \\boldsymbol B, \\alpha^v} \\sum_{v = 1}^m (\\alpha^v)^r (||\\boldsymbol B - (\\boldsymbol P^v)^\\top \\psi(\\boldsymbol X^v)||_F^2 + \\lambda_1||\\boldsymbol P^v||_F^2), $$\n$$ s.t. \\sum_v \\boldsymbol \\alpha^v = 1, \\boldsymbol \\alpha^v \u0026gt; 0, \\boldsymbol B = [\\boldsymbol B_s; \\boldsymbol B_I] \\in \\{-1, 1\\}^{K \\times N}, \\boldsymbol P^v = [\\boldsymbol P_s, \\boldsymbol P_I^v], $$\nÂÖ∂‰∏≠Ôºå\n\\(\\boldsymbol B = [\\boldsymbol b_1, \\dots, \\boldsymbol b_N]\\) Âíå \\(\\boldsymbol \\alpha = [\\alpha^1, \\dots, \\alpha^m] \\in \\mathbb R^m\\) ËÉΩÂ§†Ê±∫ ÂÆöÊØè‰∏ÄÂÄã‰∏çÂêåÁöÑ viewsÔºà\\(m\\) viewsÔºâÁöÑÊ¨äÈáç \\(r \u0026gt; 1\\): ÊéßÂà∂Ê¨äÈáçÁöÑÂàÜÂ∏É \\(\\lambda_1\\): regularization parameter ÂèàÈÄèÈÅé maximum entropy principleÔºåÂç≥Ôºö\n$$ \\max \\sum_k \\mathbb E[||(\\boldsymbol p_i^v)^\\top \\psi(\\boldsymbol x_i^v)||^2] = \\frac 1 N tr((\\boldsymbol P^v)^\\top \\psi(\\boldsymbol X^v) \\psi(\\boldsymbol X^v)^\\top \\boldsymbol P^v) = g(\\boldsymbol P^v). $$\nÂ∞á (2)„ÄÅ(3) ÂºèÂêà‰ΩµËÉΩÂæóÂà∞Ôºö\n$$ \\min_{\\boldsymbol P^v, \\boldsymbol B} \\sum_{v = 1}^m (\\alpha^v)^r (||\\boldsymbol B - (\\boldsymbol P^v)^\\top \\psi(\\boldsymbol X^v)||_F^2 + \\lambda_1||\\boldsymbol P^v||_F^2 - \\lambda_2 g(\\boldsymbol P^v)), $$\n$$ s.t. \\sum_v \\alpha^v = 1, \\alpha^v \u0026gt; 0, \\boldsymbol B = [\\boldsymbol B_s; \\boldsymbol B_I] \\in \\{-1, 1\\}^{K \\times N}, \\boldsymbol P^v = [\\boldsymbol P_s, \\boldsymbol P_I^v], $$\nÂÖ∂‰∏≠Ôºå\n\\(\\lambda_2\\): weighting parameter 2.2 Robust Binary Clust Structure Learning # ÔºàÊö´ÊôÇÁï•ÈÅéÔºâ\n","date":"19 September 2018","externalUrl":null,"permalink":"/posts/paper/paper-hsic/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Highly-Economized Multi-View Binary Compression for Scalable Image Clustering","type":"posts"},{"content":" Paper Link\n1. Introduction # ÈÄôÁØá paper ÊòØÂç°ÂÖßÂü∫ÁæéÈöÜÂ§ßÂ≠∏ÔºàCarnegie Mellon UniversityÔºâÂú® CVPR 2017 ÊâÄÁôºË°®ÁöÑÔºåË´ñÊñá‰∏≠È¶ñÂÖàÊåáÂá∫‰∫Ü Pose Estimation ‰∏≠‰∏âÂÄãÂÖ∑ÊåëÊà∞ÊÄßÁöÑÈóúÈçµÔºö\n‰∏ÄÂºµÂúñÁâáË£°ÊúâÂ§öÂ∞ë‰∫∫ÔºåËÄåÈÄô‰∫õ‰∫∫Êì∫‰ªÄÈ∫ºÂßøÂã¢Âíå‰∫∫ÁöÑÂ§ßÂ∞èÔºü ÊúâÂπæÂÄã‰∫∫ÊòØÁõ∏‰∫íÁñäÂú®‰∏ÄËµ∑ÔºàoverlapÔºâÁöÑÔºå‰ªñÂÄëÂΩºÊ≠§Êë≠ËìãÈù¢Á©çÔºü ÁÑ°Ê≥ïÂç≥ÊôÇÔºàrealtimeÔºâ Âè¶Â§ñË´ñÊñá‰∏≠‰πüÊèêÂà∞‰∫Ü‰∏Ä‰∫õÁèæÊúâÊñπÊ≥ïÂ≠òÂú®ÁöÑÁì∂È†∏ÔºåÁèæÊúâÊñπÊ≥ï‰∏ªË¶ÅÊòØÈÄèÈÅé top-down ÁöÑÊñπÂºèÔºö\nperson detector single-person pose estimation ‰æÜËß£Ê±∫Ê≠§È°ûÂïèÈ°åÔºåËÄåÈÄôÂæà‰æùË≥¥ÊïàËÉΩÔºåÂ¶ÇÊûú person detector Â§±Êïó‰∫ÜÔºåÈÇ£ÊñπÊ≥ïÂ∞±Ê≤íÁî®‰∫ÜÔºåÂè¶ Â§ñÊôÇÈñì‰πüÊòØ‰∏ÄÈ†ÖËÄÉÈ©ó„ÄÇ\n2. Method # Figure 2:\nFig. 2 Áµ¶Âá∫‰∫ÜÊ®°ÂûãÁöÑÊï¥ÂÄãËôïÁêÜÈÅéÁ®ãÔºö\nËÆÄÈÄ≤‰∏ÄÂºµÂúñÁâáÂ§ßÂ∞èÁÇ∫ \\(w \\times h\\) ÁöÑÂúñÁâá \\(\\textbf I\\)„ÄÇ ÈÄÅÈÄ≤ model VGG-19 ÁöÑÂâç 10 Â±§ layer train Âá∫Â§ßÂ∞è‰∏ÄÊ®£ÁÇ∫ \\(w \\times h\\) ÁöÑ features \\(\\textbf F\\)„ÄÇ \\(\\textbf S = (\\textbf S_1, \\textbf S_2, \\dots, \\textbf S_J)\\)ÔºåÂÖ∂‰∏≠ \\(J\\) ‰ª£Ë°®‰∫∫È´îÂÖ±Êúâ \\(J\\) ÂÄãÈÉ®‰ΩçÔºàpartÔºâ„ÄÇ\n$$\\textbf S_j \\in \\mathbb R^{w \\times h}, j \\in \\{1 \\dots J\\}.$$\n\\(\\textbf L = (\\textbf L_1, \\textbf L_2, \\dots, \\textbf L_C)\\) ÔºåÂÖ∂‰∏≠ \\(C\\) ‰ª£\n$$\\textbf L_c \\in \\mathbb R^{w \\times h \\times 2}, c \\in \\{1, \\dots, C\\}.$$\nÂÜçÂ∞á confidence maps \\(\\textbf S\\) Âíå affinity fields \\(\\textbf L\\) ÈÄÅ Âà∞ greedy \\(\\textbf S\\) Âíå affinity fields \\(\\textbf L\\)„ÄÇ\nÊØèÂÄãÂàÜÊîØÈÉΩÊòØ‰∏ÄÂÄãÈÅûËø¥ÁöÑÈ†êÊ∏¨ÁµêÊßãÔºåÊï¥ÂÄã model ÂåÖÂê´‰∫Ü \\(T\\) ÂÄã stageÔºåÊØèÂÄã stage ‰∏≠ÈÉΩ\nÂúñÁâáÈ¶ñÂÖàÁ∂ìÁî±ÂæÆË™øÈÅéÁöÑ VGG19 ÂâçÂçÅÂ±§ÂæóÂà∞‰∏ÄÁµÑÂ§ßÂ∞èÁÇ∫ \\(w \\times h\\) ÁöÑ feature maps \\(\\textbf F\\)ÔºåÂ∞áÂÖ∂ÂÅöÁÇ∫ input Ëº∏ÂÖ•Âà∞ÂÖ©ÂÄãÂàÜÊîØË£°Á¨¨‰∏ÄÂÄã stage„ÄÇ detection confidence maps \\(\\textbf S^1 = \\rho^1(\\textbf F)\\) part affinity fields \\(\\textbf L^1 = \\phi^1(\\textbf F)\\) ÂÖ∂‰∏≠ \\(\\rho^1\\) Âíå \\(\\phi^1\\) Ë°®Á§∫Á¨¨‰∏ÄÂÄã stage ÁöÑ CNN Êû∂Êßã„ÄÇ Âú®ÂæÄÂæåÊØèÂÄã stage ‰∏≠ÔºåÊ®°ÂûãÊúÉÂ∞áÊØèÂâçÂÄãÈöéÊÆµÁöÑËº∏Âá∫Âíå \\(\\textbf F\\)ÔºàÂéüÊú¨ÁöÑ feature $$\\textbf S^t = \\rho^t(\\textbf F, \\textbf S^{t - 1}, \\textbf L^{t - 1}), \\forall t \\ge 2,$$\n$$\\textbf L^t = \\phi^t(\\textbf F, \\textbf S^{t - 1}, \\textbf L^{t - 1}), \\forall t \\ge 2,$$\nÂÖ∂‰∏≠ \\(\\rho^t\\) Âíå \\(\\phi^t\\) ÁÇ∫Á¨¨ \\(t\\) ÈöéÊÆµÁöÑ CNN„ÄÇ\nFigure 4:\nFig. 4 ÁßÄÂá∫‰∫ÜÊØè‰∏Ä ÂÄãÈöéÊÆµ confidence maps Âíå affinity fields ÊîπÂñÑÁöÑÊÉÖÊ≥Å„ÄÇ\nÂú®È†êÊ∏¨ÁöÑ predictions Âíå groundtruth maps and fileds ‰ΩøÁî®‰∫Ü loss function \\(L_2\\)ÔºåË´ñÊñá‰∏≠ÁâπÂà•ÊèêÂà∞ loss functions ÊòØÈö®ËëóÁ©∫ÈñìËÄåËÆäÁöÑÔºàspatiallyÔºâÔºåÂõ†ÁÇ∫Êúâ‰∫õ datasets ‰∏çË¶ãÂæóÊúÉÂÆåÊï¥Âú∞Ê®ôÁ§∫ÊâÄÊúâ‰∫∫„ÄÇ\nÂú® \\(t\\) ÈöéÊÆµ‰∏≠ÁöÑ loss functions Â¶Ç‰∏ãÔºö\n$$f_{\\textbf S}^t = \\sum_{j = 1}^J \\sum_{\\textbf p} \\textbf W(\\textbf p) \\cdot || \\textbf S_j^t(\\textbf p) - \\textbf S_j^*(\\textbf p)||_2^2,$$ $$f_{\\textbf L}^t = \\sum_{c = 1}^C \\sum_{\\textbf p} \\textbf W(\\textbf p) \\cdot || \\textbf L_c^t(\\textbf p) - \\textbf L_c^*(\\textbf p)||_2^2,$$ $$f = \\sum_{t = 1}^T (f_\\textbf S^t + f_\\textbf L^t).$$\n\\(\\textbf S_j^*\\): groundtruth part confidence map \\(\\textbf L_c^*\\): groundtruth part affinity vector field \\(\\textbf W\\): binary mask ‰∏î \\(\\textbf W(\\textbf p) = 0\\) Áï∂ annotation Âú®‰ΩçÁΩÆ \\(\\textbf p\\) ‰∏çÂ≠òÂú®ÔºåÈÄôÊòØÁî®‰æÜÈÅøÂÖçÂú® training ÁöÑÈÅéÁ®ã‰∏≠Ôºå Âç≥‰ΩøÊ≠£Á¢∫È†êÊ∏¨‰∫ÜÔºå‰ªçÊúâ 2.2 Confidence Maps for Part Detection # ‰∏ãÈÇäÁµ¶Âá∫Ê†πÊìö annotation Ë®àÁÆó groundtruth confidence maps \\(\\textbf S^*\\) ÁöÑ ÊñπÊ≥ïÔºåÊØèÂÄã confidence map ÈÉΩÊòØ‰∏ÄÂÄã 2D ÁöÑË°®Á§∫„ÄÇÁêÜÊÉ≥ÊÉÖÊ≥Å‰∏ãÔºå\nÁï∂ÂúñÁâá‰∏≠Âè™ÂåÖÂê´‰∏ÄÂÄã‰∫∫ÊôÇÔºöÂ¶ÇÊûú‰∏ÄÂÄã keypoint ÊòØÂèØË¶ãÁöÑË©±ÔºåÂ∞çÊáâÁöÑ confidence map ‰∏≠ Âè™Êúâ‰∏ÄÂÄãÂ≥∞ÂÄº„ÄÇ Áï∂ÂúñÁâá‰∏≠ÊúâÂ§öÂÄã‰∫∫ÊôÇÔºöÂ∞çÊñºÊØè‰∏ÄÂÄã‰∫∫ \\(k\\) ÁöÑÊØè‰∏ÄÂÄãÂèØË¶ã keypoint \\(j\\)ÔºåÂú®Â∞çÊáâ ÁöÑ confidence map ‰∏≠ÈÉΩÊúÉÊúâ‰∏ÄÂÄãÂ≥∞ÂÄº„ÄÇ Ë©≥Á¥∞ÊñπÊ≥ïÂ¶Ç‰∏ãÔºö\nÂÖàÊâæÂá∫ÊØèÂÄã‰∫∫ \\(k\\) ÁöÑÊüê‰∏ÄÈÉ®‰Ωç \\(j\\)\nÊØè‰∏ÄÂÄã‰∫∫ \\(k\\) ÁöÑÂñÆÂÄã confidence maps \\(\\textbf S_{j, k}^*\\) Âíå \\(\\textbf x_{j, k} \\in \\mathbb R^2\\) Ë°®Á§∫ÂúñÁâá‰∏≠‰∫∫ \\(k\\) ÁöÑ part \\(j\\) Â∞çÊáâÁöÑ groundtruth position Ë®àÁÆóÊñπÂºèÂ¶ÇÂºè (6) ÊâÄÁ§∫ÔºåÂÖ∂‰∏≠ \\(\\sigma\\) Áî®‰æÜÊéßÂà∂Â≥∞ÂÄºÂú® confidence map ‰∏≠ÁöÑ ÂÇ≥Êí≠ÁØÑÂúç„ÄÇ\nÔºàÈÄôË£°ÂèØ‰ª•ÁêÜËß£ÊàêÔºå\\(\\forall \\textbf p \\in \\mathbb R^2\\)Ôºå\\(\\textbf p\\) ÈªûË∂äÊé•Ëøë \\(\\textbf x_{j, k} \\in \\mathbb R^2\\)Ôºå\\(||\\textbf p - \\textbf x_{j, k}||\\_2^2\\) ÂÄºË∂®ËøëÊñº \\(0\\)Ôºå\\(\\textbf S_{j, k}^*(\\textbf p)\\) ‰πüÂ∞±Ë∂äÈù†ËøëÊ•µÂ§ßÂÄº \\(1\\)„ÄÇÔºâ\n$$\\textbf S_{j, k}^*(\\textbf p) = \\exp \\Big(- \\frac{||\\textbf p - \\textbf x_{j, k}||\\_2^2}{\\sigma^2}\\Big),$$\nÂÜçÊâæÂá∫ÊâÄÊúâ‰∫∫ÁöÑÈÉ®‰Ωç \\(j\\)ÔºåÈÄôË£°ÂèñÊúÄÂ§ßÂÄºËÄå‰∏çÊòØÂπ≥ÂùáÂÄºËÉΩÂ§†Êõ¥Ê∫ñÁ¢∫Âú∞Â∞áÂêå‰∏ÄÂÄã confidence map ‰∏≠ÁöÑÂ≥∞ÂÄº‰øùÂ≠ò‰∏ã‰æÜÔºåÂç≥ÔºöÂ∞çÊï¥ÂºµÂúñ \\(w \\times h\\) ÊØè‰∏ÄÂÄãÈªûÔºåÊâæ Ë©≤ÈªûÂú®ÊâÄÊúâ‰∫∫‰πã‰∏≠ÁöÑÊúÄÂ§ßÂÄºÔºÅ\n$$\\textbf S_j^*(\\textbf p) = \\max_k \\textbf S_{j, k}^*(\\textbf p).$$\n2.3 Part AfÔ¨Ånity Fields for Part Association # Áµ¶ÂÆö‰∏ÄÁµÑ keypointsÔºåÂ¶Ç Fig.5(a) ÊâÄÁ§∫ÔºåÊàëÂÄëÂ¶Ç‰ΩïÊääÂÆÉÂÄëÁµÑË£ùÊàêÔºåÊú™Áü•Êï∏Èáè‰∫∫ÁöÑÊï¥ÂÄãË∫´È´î ÁöÑ pose Âë¢Ôºü\nÊàëÂÄëÈúÄË¶Å‰∏ÄÂÄãÂ•ΩÊñπÊ≥ï‰æÜÁ¢∫ÂÆöÊØèÂ∞ç keypoints ‰πãÈñìÁöÑÈÄ£Êé•ÔºåÂç≥ÔºöÂÆÉÂÄëÂ±¨ÊñºÂêå‰∏ÄÂÄã‰∫∫„ÄÇ\n‰∏ÄÂÄãÂèØËÉΩÁöÑÊñπÊ≥ïÊòØÊâæÂà∞‰∏ÄÂÄã‰ΩçÊñºÊØè‰∏ÄÂ∞ç keypoints ‰πãÈñìÁöÑ‰∏ÄÂÄã‰∏≠ÈñìÈªûÔºåÂæåÊ™¢Êü•‰∏≠ÈñìÈªûÊòØÁúü Ê≠£ÁöÑ‰∏≠ÈñìÈªûÁöÑÊ©üÁéáÔºåÂ¶Ç Fig. 5(b) ÊâÄÁ§∫„ÄÇ‰ΩÜÊòØÁï∂‰∫∫ÂÄëÊì†Âú®‰∏ÄËµ∑ÊôÇÔºå‰∏≠ÈñìÈªûÂèØËÉΩÊòØÈåØË™§ÁöÑÈÄ£ Á∑öÔºåÂ¶Ç Fig. 5(b) ‰∏≠Á∂†Á∑öÊâÄÁ§∫„ÄÇÂá∫ÁèæÈÄôÁ®ÆÊÉÖÊ≥ÅÁöÑÂéüÂõ†ÊúâÂÖ©ÂÄãÔºö\nÈÄôÁ®ÆÊñπÂºèÂè™Á∑®Á¢º‰∫Ü‰ΩçÁΩÆË≥áË®äÔºåÊ≤íÊúâÊñπÂêë Ë∫´È´îÁöÑÊîØÊíêÂçÄÂüüÂ∑≤Á∂ìÁ∏ÆÂ∞èÂà∞‰∏ÄÂÄãÈªû‰∏ä„ÄÇ ÁÇ∫Ëß£Ê±∫ÈÄô‰∫õÈôêÂà∂ÔºåÊàëÂÄëÊèêÂá∫‰∫ÜÁ®±ÁÇ∫ PAF(part affinity fields) ÁöÑÁâπÂæµË°®Á§∫‰æÜ‰øùÂ≠òË∫´È´îÁöÑ ÊîØÊíêÂçÄÂüüÁöÑ‰ΩçÁΩÆ‰ø°ÊÅØÂíåÊñπÂêë‰ø°ÊÅØÔºåÂ¶Ç Fig. 5(c) ÊâÄÁ§∫„ÄÇÂ∞çÊñºÊØè‰∏ÄÊ¢ùËªÄÂππ‰æÜË™™Ôºåthe part affinity ÊòØ‰∏ÄÂÄã 2D ÁöÑÂêëÈáèÂçÄÂüü„ÄÇÂú®Â±¨Êñº‰∏ÄÂÄãËªÄÂππ‰∏äÁöÑÊØè‰∏ÄÂÉèÁ¥†ÈÉΩÂ∞çÊáâ‰∏ÄÂÄã 2D ÁöÑÂêëÈáèÔºå ÈÄôÂÄãÂêëÈáèË°®Á§∫ËªÄÂππ‰∏äÂæû‰∏ÄÂÄã keypoint Âà∞Âè¶‰∏ÄÂÄã keypoint ÁöÑÊñπÂêë„ÄÇ\nËÄÉÊÖÆ‰∏ãÂúñ‰∏≠Áµ¶Âá∫ÁöÑ‰∏ÄÂÄãËªÄÂππÔºàÊâãËáÇÔºâÔºå‰ª§ \\(\\textbf x_{j_1, k}\\) Âíå \\(\\textbf x_{j_2, k}\\) Ë°®Á§∫Âúñ‰∏≠ÁöÑÊüêÂÄã‰∫∫ \\(k\\) ÁöÑÂÖ©ÂÄã keypoints Â∞çÊáâÁöÑÁúüÂØ¶ÂÉèÁ¥†ÈªûÔºåÂ¶ÇÊûú ‰∏ÄÂÄãÂÉèÁ¥†Èªû \\(\\textbf p\\) ‰ΩçÊñºÈÄôÂÄãËªÄÂππ‰∏äÔºå\\(\\textbf L_{c, k}^*(\\textbf p)\\) Ë°®Á§∫‰∏ÄÂÄãÂæû keypoint \\(j_1\\) Âà∞ keypoints \\(j_2\\) ÁöÑÂñÆ‰ΩçÂêëÈáèÔºåÂ∞çÊñº‰∏çÂú®ËªÄÂππ‰∏ä ÁöÑÂÉèÁ¥†ÈªûÔºåÂ∞çÊáâÁöÑÂêëÈáèÂâáÊòØ \\(\\textbf 0\\)„ÄÇ\n‰∏ãÈù¢ÈÄôÂÄãÂÖ¨ÂºèÁµ¶Âá∫‰∫Ü the groundtruth part affinity vectorÔºåÂ∞çÊñºÂúñÁâá‰∏≠ÁöÑ‰∏ÄÂÄãÈªû \\(\\textbf p\\) ÂÖ∂ÂÄº \\(\\textbf L_{c, k}^*(\\textbf p)\\) ÁöÑÂÄºÂ¶Ç‰∏ãÔºö\n$$ \\textbf L_{c, k}^*(\\textbf p) = \\begin{cases} \\textbf v \\text{ if $\\textbf p$ on limb $c, k$}; \\\\ \\textbf 0 \\text{ otherwise.} \\end{cases} $$\nÂÖ∂‰∏≠Ôºå\n\\(\\textbf v = (\\textbf x_{j_2, k} - \\textbf x_{j_1, k}) / ||\\textbf x_{j_2, k} - \\textbf x_{j_1, k}||\\_2\\): ËªÄÂππÂ∞çÊáâÁöÑÂñÆ‰ΩçÊñπÂêëÂêëÈáè„ÄÇÂ±¨ÊñºÈÄôÂÄã ËªÄÂππ‰∏äÁöÑÂÉèÁ¥†ÈªûÊªøË∂≥‰∏ãÈù¢ÁöÑ‰∏çÁ≠âÂºèÔºö $$0 \\le \\textbf v \\cdot (\\textbf p - \\textbf x_{j_1, k}) \\le l_{c, k} \\text{ and } |\\textbf v_\\bot \\cdot (\\textbf p - \\textbf x_{j_1, k})| \\le \\sigma_l.$$\nÂÖ∂‰∏≠Ôºå\n\\(\\sigma_l\\): limb ÂØ¨Â∫¶ÔºàÊ≥®ÊÑèÔºö‰∏çÂêåÊñºËªÄÂππÔºâ ËªÄÂππÈï∑Â∫¶Ôºö\\(l_{c, k} = ||\\textbf x_{j_2, k} - \\textbf x_{j_1, k}||\\_2\\) \\(\\textbf v_\\bot\\): ÂûÇÁõ¥Êñº \\(\\textbf v\\) ÁöÑÂêëÈáèÊï¥ÂºµÂúñÁâáÁöÑ the groundtruth part affinity field ÂèñÂúñÁâá‰∏≠ÊâÄÊúâ‰∫∫Â∞çÊáâÁöÑ affinity field ÁöÑÂπ≥ÂùáÂÄºÔºåÂÖ∂‰∏≠ \\(n_c(\\textbf p)\\) ÊòØÂúñÁâá‰∏≠ \\(k\\) ÂÄã‰∫∫Âú®ÂÉèÁ¥†Èªû \\(\\textbf p\\) Â∞çÊáâÁöÑÈùûÈõ∂ ÂêëÈáèÁöÑÂÄãÊï∏ÔºåÂç≥ÔºöÊàëÂÄëÂè™ËÄÉÊÖÆ \\(\\forall \\textbf p \\in \\mathbb R^2\\)Ôºå\\(\\forall k\\) ÂÄã‰∫∫‰∏≠ÔºåÊúâÂêëÈáèÁöÑÂπ≥Âùá„ÄÇ $$\\textbf L_c^*(\\textbf p) = \\frac{1}{n_c(\\textbf p)} \\sum_k \\textbf L_{c, k}^*(\\textbf p).$$\nÂú®È†êÊ∏¨ÁöÑÊôÇÂÄôÔºåÊàëÂÄëÁî®ÂÄôÈÅ∏ keypoints ‰πãÈñìÁöÑ PAF ‰æÜË°°ÈáèÈÄôÂ∞ç keypoints ÊòØ‰∏çÊòØÂ±¨ÊñºÂêå ‰∏ÄÂÄã‰∫∫„ÄÇË©≥Á¥∞ÁöÑË™™ÔºåÂ∞çÊñºÂÖ©ÂÄãÂÄôÈÅ∏ keypoints Â∞çÊáâÁöÑÂÉèÁ¥†Èªû \\(\\textbf d_{j_1}\\) Âíå \\(\\textbf d_{j_2}\\)ÔºåÊàëÂÄëÂéªË®àÁÆó PAFÔºåÂ¶Ç‰∏ãÂºèÊâÄÁ§∫Ôºö\n$$E = \\int_{u = 0}^{u = 1} \\textbf L_c(\\textbf p(u)) \\cdot \\frac{\\textbf d_{j_2} - \\textbf d_{j_1}}{||\\textbf d_{j_2} - \\textbf d_{j_1}||\\_2}du,$$\nÂÖ∂‰∏≠ \\(\\textbf p(u)\\) Ë°®Á§∫ÂÖ©ÂÄãÂÉèÁ¥†Èªû \\(\\textbf d_{j_1}\\) Âíå \\(\\textbf d_{j_2}\\) ‰πãÈñìÁöÑÂÉèÁ¥†ÈªûÔºö\n$$\\textbf p(u) = (1 - u)\\textbf d_{j_1} + u \\textbf d_{j_2}.$$\n2.4 Multi-Person Parsing using PAFs # ËóâÁî± non-maximum suppressionÔºåÊàëÂÄëÂæûÈ†êÊ∏¨Âá∫ÁöÑ confidence maps ÂæóÂà∞‰∏ÄÁµÑÈõ¢Êï£ÁöÑ keypoints ÂÄôÈÅ∏‰ΩçÁΩÆ„ÄÇÂõ†ÁÇ∫ÂúñÁâá‰∏≠ÂèØËÉΩÊúâÂ§öÂÄã‰∫∫ÊàñËÄÖÂ≠òÂú® false positiveÔºåÊØèÂÄã keypoint ÂèØËÉΩÊúÉÊúâÂ§öÂÄãÂÄôÈÅ∏‰ΩçÁΩÆÔºåÂõ†Ê≠§‰πüÂ∞±ÁµÑÊàê‰∫ÜÂæàÂ§ßÊï∏ÈáèÁöÑ keypoints pairÔºåÂ¶Ç Fig. 6(b) ÊâÄÁ§∫ „ÄÇÊåâÁÖßÂºè (10)ÔºåÊàëÂÄëÁµ¶ÊØè‰∏ÄÂÄãÂÄôÈÅ∏ keypoints pair Ë®àÁÆó‰∏ÄÂÄãÂàÜÊï∏„ÄÇ\nÂæûÈÄô‰∫õ keypoint pair ‰∏≠ÊâæÂà∞ÊúÄ‰Ω≥ÁµêÊûúÔºåÊòØ‰∏ÄÂÄã NP-Hard ÂïèÈ°å„ÄÇ‰∏ãÈù¢Áµ¶Âá∫Êú¨ÊñáÁöÑÊñπÊ≥ïÔºö\nÂÅáË®≠Ê®°ÂûãÂæóÂà∞ÁöÑÊâÄÊúâÂÄôÈÅ∏ keypoints ÁµÑÊàêÈõÜÂêà \\(\\mathcal D_\\mathcal J = \\{\\textbf d_j^m: \\text{ for } j \\in \\{1 \\dots J\\}, m \\in \\{1 \\dots N_j\\}\\}\\),\nÂÖ∂‰∏≠Ôºå\n\\(N_j\\): keypoint \\(j\\) ÁöÑÂÄôÈÅ∏‰ΩçÁΩÆÊï∏Èáè \\(\\textbf d_j^m \\in \\mathbb R^2\\): keypoint \\(j\\) ÁöÑÁ¨¨ \\(m\\) ÂÄãÂÄôÈÅ∏‰Ωç ÁΩÆÁöÑÂÉèÁ¥†ÂùêÊ®ô„ÄÇ ÊàëÂÄëÈúÄË¶ÅÂÅöÁöÑÊòØÂ∞áÂ±¨ÊñºÂêå‰∏ÄÂÄã‰∫∫ÁöÑ keypoints ÈÄ£ÊàêËªÄÂππÔºàËÉ≥ËÜä„ÄÅËÖøÁ≠âÔºâÔºåÁÇ∫Ê≠§ÊàëÂÄëÂÆöÁæ©ËÆä Êï∏ \\(z_{j_1j_2}^{mn} \\in \\{0, 1\\}\\) Ë°®Á§∫ÂÄôÈÅ∏ keypoints \\(\\textbf d_{j_1}^m\\) Âíå \\(\\textbf d_{j_2}^n\\) ÊòØÂê¶ÂèØ‰ª•ÈÄ£Ëµ∑‰æÜ„ÄÇÂ¶ÇÊ≠§‰ª•‰æÜ‰æøÂæóÂà∞‰∫ÜÈõÜÂêà\n$$\\mathcal Z = \\{z_{j_1j_2}^{mn} \\in \\{0, 1\\}: \\text{ for } j_1, j_2 \\in \\{1 \\dots J\\}, m \\in \\{1 \\dots N_{j_1}\\}, n \\in \\{1 \\dots N_{j_2}\\}\\}.$$\nÁèæÂú®ÂñÆÁç®ËÄÉÊÖÆÁ¨¨ \\(c\\) ÂÄãËªÄÂππÔºà‰æãÂ¶ÇËÑñÂ≠êÔºâÔºåÂÖ∂Â∞çÊáâÁöÑÂÖ©ÂÄã keypoints ÊáâË©≤ÊòØ \\(j_1\\) Âíå \\(j_2\\)ÔºåÈÄôÂÖ©ÂÄã keypoints Â∞çÊáâÁöÑÂÄôÈÅ∏ÈõÜÂêàÂàÜÂà•ÊòØ \\(\\mathcal D_{j_1}\\) Âíå \\(\\mathcal D_{j_2}\\)ÔºåÂèØÈÄèÈÅéÁ∑öÊÄßÊñπÁ®ãÂºèÂ¶Ç‰∏ãÊâæÂá∫Ê≠£Á¢∫ keypointsÔºö\n$$\\max_{\\mathcal Z_c} E_c = \\max_{\\mathcal Z_c} \\sum_{m \\in \\mathcal D_{j_1}}\\sum_{n \\in \\mathcal D_{j_2}} E_{mn} \\cdot z_{j_1j_2}^{mn},$$ $$\\text{s.t. } \\forall m \\in \\mathcal D_{j_1}, \\sum_{n \\in \\mathcal D_{j_2}} z_{j_1j_2}^{mn} \\le 1,$$ $$\\forall n \\in \\mathcal D_{j_2}, \\sum_{m \\in \\mathcal D_{j_1}} z_{j_1j_2}^{mn} \\le 1$$\nÂÖ∂‰∏≠Ôºå\n\\(E_c\\): ËªÄÂππ \\(c\\) Â∞çÊáâÁöÑÊ¨äÂÄºÁ∏ΩÂíå \\(\\mathcal Z_c\\): ËªÄÂππ \\(c\\) Â∞çÊáâÁöÑ \\(\\mathcal Z\\) ÁöÑÂ≠êÈõÜ \\(E_{mn}\\): keypoint \\(d_{j_1}^m\\) Âíå keypoint \\(d_{j_2}^n\\) Â∞çÊáâÁöÑ part affinity Âºè (13) ÂíåÂºè (14) ÈôêÂà∂‰∫Ü‰ªªÊÑèÂÖ©ÂÄãÁõ∏ÂêåÈ°ûÂûãÁöÑËªÄÂππÔºà‰æãÂ¶ÇÂÖ©ÂÄãËÑñÂ≠êÔºâ‰∏çÊúÉÂÖ±‰∫´ÈóúÈçµÈªû„ÄÇÂïè È°åÊì¥Â±ïÂà∞ÊâÄÊúâ \\(C\\) ÂÄãËªÄÂππ‰∏äÔºåÊàëÂÄëÂÑ™ÂåñÁõÆÊ®ôÂ∞±ËÆäÊàê‰∫ÜÂÖ¨Âºè (15)„ÄÇ\n$$\\max_\\mathcal Z E = \\sum_{c = 1}^C \\max_{\\mathcal Z_c} E_c.$$\n3. Results # 3.1. Results on the MPII Multi-Person Dataset # 3.2. Results on the COCO Keypoints Challenge # 3.3. Runtime Analysis # 4. Discussion # ","date":"31 August 2018","externalUrl":null,"permalink":"/posts/paper/paper-realtime-pose-estimation/","section":"Posts","summary":"","title":"Ë´ñÊñáÁ≠ÜË®ò Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields","type":"posts"},{"content":"Âú®ÈÄôÁØáÊñáÁ´†‰∏≠ÔºåÊúÉÁ¥ÄÈåÑÂêÑÁ®Æ ES2015 ÁöÑÊ®ôÊ∫ñÔºÅ\nconst # Áî± var ÂÆ£ÂëäÁöÑËÆäÊï∏ÔºåÂèØÈáçÊñ∞Ë≥¶ÂÄºÔºö\nvar myName = \u0026#34;Jay\u0026#34;; myName = \u0026#34;Peng-Yu\u0026#34;; // no problem here! ËÄåÁî± const ÂÆ£ÂëäÁöÑËÆäÊï∏Ôºå‰∏çËÉΩË¢´ÈáçÊñ∞Ë≥¶ÂÄºÔºå‰πü‰∏çËÉΩË¢´ÈáçÊñ∞ÂÆ£ÂëäÔºö\nconst myName = \u0026#34;Jay\u0026#34;; myName = \u0026#34;Peng-Yu\u0026#34;; // TypeError const myName = \u0026#34;Peng-Yu\u0026#34;; // SyntaxError ‰ΩÜÊòØÂèØ‰ª•Êñ∞Â¢ûÂÖÉÁ¥†Ôºö\nconst numbers = [1, 2, 3, 4]; numbers.push(10); // 5 numbers; // [1, 2, 3, 4, 10] numbers = \u0026#34;no!\u0026#34;; // TypeError let # let myName = \u0026#34;Jay\u0026#34;; myName = \u0026#34;Peng-Yu\u0026#34;; // no problems here! let myName = \u0026#34;Peng-Yu\u0026#34;; // SyntaxError let Ëàá const ‰∏çÂêåÁöÑÊòØÔºåÂèØ‰ª•ÈáçÊñ∞Ë≥¶ËàáÊñ∞ÂÄºÔºå‰ΩÜ‰∏ÄÊ®£ÁÑ°Ê≥ïÈáçÊñ∞ÂÆ£Âëä„ÄÇ\nmethod let const reassign ‚úî ‚úñ redeclare ‚úñ ‚úñ let Êúâ scope ÈôêÂà∂Ôºö\nconst myName = \u0026#34;Jay\u0026#34;; if (myName === \u0026#34;Jay\u0026#34;) { let funFact = \u0026#34;Plays the piano\u0026#34;; } funFact; // ReferenceError Hoisting with let:\nfunction helloJay() { return jay; var jay = \u0026#34;ME!\u0026#34;; } helloJay(); // undefined function helloJay() { return jay; let jay = \u0026#34;ME!\u0026#34;; } helloJay(); // ReferenceError for (var i = 0; i \u0026lt; 5; ++i) { setTimeout(function () { console.log(i); }, 1000); } // 5 (five times) for (let i = 0; i \u0026lt; 5; ++i) { setTimeout(function () { console.log(i); }, 1000); } // 0 // 1 // 2 // 3 // 4 Template Strings # ES2015 Â∞çÊñºÂ≠ó‰∏≤ÁöÑËôïÁêÜ‰πüÊúâËºÉÂÑ™ÁöÑÊñπÂºèÔºåËàäÁöÑÂØ´Ê≥ïÊòìÂá∫ÈåØÔºåÊñ∞ÁöÑÊ®ôÊ∫ñÊ∏ÖÊ•öÊòé‰∫Ü\nconst firstName = \u0026#34;Jay\u0026#34;; const lastName = \u0026#34;Chen\u0026#34;; console.log(\u0026#34;Hello \u0026#34; + firstName + \u0026#34; \u0026#34; + lastName); // error prone! console.log(`Hello ${firstName} ${lastName}`); // much nicer! Â∞çÊñºÂ§öË°åÂ≠ó‰∏≤‰πüÊ≤íÂïèÈ°åÔºö\n` Hello How Nice Is This! `; // works well! Arrow Functions # Êé•‰∏ã‰æÜÂ∞±Ë¶Å‰ªãÁ¥π ES2015 ‰∏≠ÔºåÊàëË™çÁÇ∫ÊúÄËÆöÁöÑÁÆ≠È†≠ÂáΩÊï∏ÔºÅÂÆÉËÉΩÂ§ßÂâØÁöÑÁ∏ÆÁü≠Á®ãÂºèÁ¢ºË°åÊï∏Ôºå‰ΩÜ‰∏ÄÈñã ÂßãË¶ÅËä±ÈªûÊôÇÈñìÂéªÁøíÊÖ£„ÄÇ\n// ES5 const add = function (a, b) { return a + b; }; // Â∞á \u0026#39;function\u0026#39; keyword Âèñ‰ª£Êàê \u0026#39;=\u0026gt;\u0026#39; // ES2015 const add = (a, b) =\u0026gt; { return a + b; }; // One-line arrow functions const add = (a, b) =\u0026gt; a + b; ËÆìÊàëÂÄë‰æÜË©¶Ë©¶Áî®ÁÆ≠È†≠ÂáΩÊï∏ÔºåÈáçÊñ∞ÊîπÂØ´‰∏Ä‰∫õÁ®ãÂºèÁ¢ºÔºö\n// ES5 [1, 2, 3].map(function (val) { return val * 2; }); // [2, 4, 6] // ES2015 [1, 2, 3].map((val) =\u0026gt; val * 2); // [2, 4, 6] // ES5 function doubleAndFilter(arr) { return arr .map(function (val) { return val * 2; }) .filter(function (val) { return val % 3 === 0; }); } // ES2015 const doubleAndFilter = (arr) =\u0026gt; arr.map((val) =\u0026gt; val * 2).filter((num) =\u0026gt; num % 3 === 0); doubleAndFilter([5, 10, 15, 20]); // [30] ÁÆ≠È†≠ÂáΩÊï∏Ôºàarrow functionsÔºâÂíå‰∏ÄËà¨ functions ÁöÑÂ∑ÆÂà•Âú®Êñº‰ªñÂÄëÊ≤íÊúâËá™Â∑±ÁöÑ this ÈóúÈçµ Â≠ó„ÄÇ\nconst me = { firstName: \u0026#34;Jay\u0026#34;, sayHi: function () { setTimeout(function () { console.log(`Hello ${this.firstName}`); }, 1000); }, }; me.sayHi(); // \u0026#39;Hello undefined\u0026#39; const me = { firstName: \u0026#34;Jay\u0026#34;, sayHi: function () { setTimeout( function () { console.log(`Hello ${this.firstName}`); }.bind(this), 1000 ); }, }; me.sayHi(); // \u0026#39;Hello Jay\u0026#39; ÁÆ≠È†≠ÂáΩÂºèÂõ†ÁÇ∫Ê≤íÊúâËá™Â∑±ÁöÑ thisÔºåÊâÄ‰ª• this ÊúÉÁõ¥Êé•ÊåáÂêëÈõ¢‰ªñÊúÄËøëÁöÑÁâ©‰ª∂ÔºàmeÔºâ\nconst me = { firstName: \u0026#34;Jay\u0026#34;, // why can\u0026#39;t we use an arrow function here? sayHi: function () { setTimeout(() =\u0026gt; { console.log(`Hello ${this.firstName}`); }, 1000); }, }; me.sayHi(); // \u0026#39;Hello Jay\u0026#39; Ëã•ÊàëÂÄëÂ∞á function() ÊèõÊàê () =\u0026gt; ÊúÉÂ∞éËá¥ sayHi Ê≤íÊúâËá™Â∑±ÁöÑ thisÔºåÂ¶ÇÊ≠§‰∏Ä‰æÜ this Â∞±‰∏çÂú®ÊòØÊåáÂà∞ meÔºÅ\nÊé•‰∏ã‰æÜÂ∞±‰æÜÁúãÁúãÊõ¥Â§ö ES2015 ÊØî ES5 Êõ¥Ê£íÁöÑÂú∞ÊñπÔºÅ\nDefault Parameters # function add(a = 10, b = 20) { return a + b; } add(); // 30 add(20); // 40 for \u0026hellip; of # const arr = [1, 2, 3, 4, 5]; for (const val of arr) { console.log(val); } // 1 // 2 // 3 // 4 // 5 Rest # rest Á∏ΩÊòØÂõûÂÇ≥‰∏ÄÂÄãÈô£Âàó\nfunction printRest(a, b, ...c) { console.log(a); console.log(b); console.log(c); } printRest(1, 2, 3, 4, 5); // 1 // 2 // [3, 4, 5] const sumArguments = (...args) =\u0026gt; args.reduce((acc, next) =\u0026gt; acc + next); Spread # const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; const arr3 = [7, 8, 9]; const combined = [...arr1, ...arr2, ...arr3]; Spread instead of apply # const arr = [3, 2, 4, 1, 5]; Math.max(arr); // NaN // ES5 Math.max.apply(this, arr); // 5 // ES2015 Math.max(...arr); // 5 Object Shorthand Notation # const firstName = \u0026#34;Jay\u0026#34;; const lastName = \u0026#34;Chen\u0026#34;; // ES5 const me = { firstName: firstName, lastName: lastName, }; // ES2015 const me = { firstName, lastName, }; Object Methods # // ES5 const me = { sayHello: function () { return \u0026#34;Hello!\u0026#34;; }, }; // ES2015 - do NOT use arrow functions here! const me = { sayHello() { return \u0026#34;Hello!\u0026#34;; }, }; Computed Property Names # const firstName = \u0026#34;Jay\u0026#34;; // ES5 const me = {}; me[firstName] = \u0026#34;That\u0026#39;s me!\u0026#34;; // ES2015 const boy = { [firstName]: \u0026#34;That\u0026#39;s me!\u0026#34;, }; me.Jay; // \u0026#34;That\u0026#39;s me!\u0026#34; boy.Jay; // \u0026#34;That\u0026#39;s me!\u0026#34; Object Destructuring # const me = { firstName: \u0026#34;Jay\u0026#34;, lastName: \u0026#34;Chen\u0026#34;, }; // ES5 const firstName = me.firstName; const lastName = me.lastName; // ES2015 const { firstName, lastName } = me; firstName; // \u0026#39;Jay\u0026#39; lastName; // \u0026#39;Chen\u0026#39; Rename destructured variables # const { firstName: first, lastName: last } = me; first; // \u0026#39;Jay\u0026#39; last; // \u0026#39;Chen\u0026#39; Default values with an object # Âú® ES2015 ‰∏≠ÔºåËã•Ê≤íÊúâ‰ªª‰ΩïÂèÉÊï∏ÂÇ≥ÂÖ•ÔºåÈÇ£È∫º destructured object Â∞±ÊòØÈ†êË®≠ÂèÉÊï∏Ôºö\n// ES5 function createMyself(options) { var options = options || {}; const name = options.name || { first: \u0026#34;Jay\u0026#34;, last: \u0026#34;Chen\u0026#34; }; const isHilarious = options.isHilarious || false; return [name.first, name.last, isHilarious]; } // ES2015 function createMyself({ name = { first: \u0026#34;Jay\u0026#34;, last: \u0026#34;Chen\u0026#34; }, isHilarious = false, } = {}) { return [name.first, name.last, isHilarious]; } createMyself(); // [\u0026#39;Jay\u0026#39;, \u0026#39;Chen\u0026#39;, false] createMyself({ isHilarious: true }); // [\u0026#39;Jay\u0026#39;, \u0026#39;Chen\u0026#39;, true] createMyself({ name: { first: \u0026#34;Dog\u0026#34;, last: \u0026#34;Peng\u0026#34; } }); // [\u0026#39;Dog\u0026#39;, \u0026#39;Peng\u0026#39;, false] Object fields as parameters # // ES5 function displayInfo(obj) { return [obj.name, obj.favColor]; } // ES2015 - Very common in React! function displayInfo({ name, favColor }) { return [name, favColor]; } const me = { name: \u0026#34;Jay\u0026#34;, favColor: \u0026#34;White\u0026#34;, }; displayInfo(me); // [\u0026#39;Jay\u0026#39;, \u0026#39;White\u0026#39;] Array Destructuring # const arr = [1, 2, 3]; // ES5 const a = arr[0]; const b = arr[1]; const c = arr[2]; // ES2015 const [a, b, c] = arr; a; // 1 b; // 2 c; // 3 function returnNumbers(a, b) { return [a, b]; } // ES5 const first = returnNumbers(5, 10)[0]; const second = returnNumbers(5, 10)[1]; // ES2015 [first, second] = returnNumbers(5, 10); first; // 5 second; // 10 Swapping Values # // ES5 function swap(a, b) { const temp = a; a = b; b = temp; return [a, b]; } // ES2015 function swap(a, b) { return ([a, b] = [b, a]); } swap(10, 5); // [5,10] class # Âú® ES2015 ÂæåÔºåÁÇ∫Êñ∞ÁöÑ‰øùÁïôÂ≠ó ‰∏çËÉΩË¢´ÈáçÊñ∞ÂÆ£Âëä Ê≤íÊúâ hoist ‰ªç‰ΩøÁî® new ÈóúÈçµÂ≠ó // ES5 function Student(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } Student.prototype.sayHello = function () { return `Hello ${this.firstName} ${this.lastName}`; }; Student.isStudent = function (obj) { return obj.constructor === Student; }; // ES2015 class Student { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } sayHello() { return `Hello ${this.firstName} ${this.lastName}`; } static isStudent(obj) { return obj.constructor === Student; } } const jay = new Student(\u0026#34;Jay\u0026#34;, \u0026#34;Chen\u0026#34;); Inheritance # ‰∏ÄÂÄã class ËÉΩÂÇ≥ÈÄÅ methods Âíå properties Áµ¶ÂÖ∂ÂÆÉ class\n// ES5 function Person(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } Person.prototype.sayHello() { return `Hello ${this.firstName} ${this.lastName}`; } function Student(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } // Use Apply function Student() { Person.apply(this, arguments); } Student.prototype = Object.create(Person.prototype); Student.prototype.constructor = Student; super # // ES2015 class Person { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } sayHello() { return `Hello ${this.firstName} ${this.lastName}`; } } class Student extends Person { constructor(firstName, lastName) { // you must use super here! super(firstName, lastName); } } Map # Âú®ÂÖ∂ÂÆÉË™ûË®ÄÂ∏∏Ë¢´Á®±ÂÅö \u0026ldquo;hash map\u0026rdquo; ÂíåÁâ©‰ª∂ÔºàobjectÔºâÂæàÂÉèÔºå‰ΩÜ keys ÂèØ‰ª•ÊòØ‰ªª‰ΩïË≥áÊñôÂΩ¢Âà• ‰ΩøÁî® new ÈóúÈçµÂ≠ó const myMap = new Map(); myMap.set(1, \u0026#34;Jay\u0026#34;); myMap.set(false, \u0026#34;a boolean\u0026#34;); myMap.set(\u0026#34;nice\u0026#34;, \u0026#34;a string\u0026#34;); myMap.delete(\u0026#34;nice\u0026#34;); // true myMap.size; // 2 Key ÂèØ‰ª•ÊòØ‰ªª‰ΩïË≥áÊñôÂΩ¢Âà•ÔºÅ\nconst arrayKey = []; myMap.set(arrayKey, [1, 2, 3, 4, 5]); const objectKey = {}; myMap.set(objectKey, { a: 1 }); Extracting values # myMap.get(1); // \u0026#39;Jay\u0026#39; myMap.get(false); // \u0026#39;a boolean\u0026#39; myMap.get(arrayKey); // [1, 2, 3, 4, 5] myMap.get(objectKey); // { a: 1 } ÊàëÂÄëÂèØ‰ª•ÂæàËºïÈ¨ÜÁöÑÈÅçÊ≠∑Êï¥ÂÄã MapÔºÅ\nmyMap.forEach((v) =\u0026gt; console.log(v)); // Elie // a boolean // [1, 2, 3, 4, 5] // { a: 1 } Iterating over a Map # myMap.values(); // MapIterator of values myMap.keys(); // MapIterator of keys Accessing keys and values in a Map # ÊàëÂÄëÂèØ‰ª•ËóâÁî± .entries() Âíå destructuring ÂéªÂèñÂæó‰ªª‰ΩïÂÄºÔºÅ\nconst m = new Map(); m.set(1, \u0026#34;Jay\u0026#34;); m.set(2, \u0026#34;BB\u0026#34;); m.set(3, \u0026#34;Disney\u0026#34;); for (const [key, value] of m.entries()) { console.log(key, value); } // 1 \u0026#39;Jay\u0026#39; // 2 \u0026#39;BB\u0026#39; // 3 \u0026#39;Disney\u0026#39; WeakMap # Âíå Map ÂæàÂÉèÔºå‰ΩÜÊâÄÊúâ keys ÂøÖÈúÄÊòØ objects Âú® WeakMap ‰∏≠ÁöÑ values ÊúÉÂú®‰ªñÂÄë‰∏çÂú®Ë¢´ÈúÄË¶ÅÊôÇÂæûË®òÊÜ∂È´î‰∏≠Ê∏ÖÁ©∫ ÊØî Map Êõ¥ÊúâÊïàÁéáÔºå‰ΩÜÊòØÁÑ°Ê≥ïË¢´ÈÅçÊ≠∑ Set # ÊâÄÊúâÁöÑ values ÊòØÁç®‰∏ÄÁÑ°‰∫åÁöÑ value ÂèØ‰ª•ÊòØ‰ªª‰ΩïË≥áÊñôÂΩ¢Âà• ‰ΩøÁî® new ÈóúÈçµÂ≠ó const s = new Set(); const s2 = new Set([3, 1, 4, 1, 2, 1, 5]); // { 3, 1, 4, 2, 5 } s.add(10); // { 10 } s.add(20); // { 20, 10 } s.add(10); // { 20, 10 } s.size; // 2 s.has(10); // true s.delete(20); // true s.size; // 1 s2[Symbol.iterator]; // function() {}... WeakSet # Âíå Set ÂæàÂÉèÔºå‰ΩÜÊâÄÊúâ values ÂøÖÈúÄÊòØ objects Âú® WeakSet ‰∏≠ÁöÑ values ÊúÉÂú®‰ªñÂÄë‰∏çÂú®Ë¢´ÈúÄË¶ÅÊôÇÂæûË®òÊÜ∂È´î‰∏≠Ê∏ÖÁ©∫ ÊØî Set Êõ¥ÊúâÊïàÁéáÔºå‰ΩÜÊòØÁÑ°Ê≥ïË¢´ÈÅçÊ≠∑ Promise # Âè™Êúâ‰∏ÄÊ¨°Ê©üÊúÉÁöÑÊú™‰æÜ return value Áï∂ value Ë¢´ÂºÑÊ∏ÖÊ•öÊôÇÔºåPromise ÊúÉË¢´ resolved/fulfilled rejected ÂèØ‰ª•ÂèãÂñÑÂú∞ÈáçÊñ∞ÊîπÂØ´ callback Á®ãÂºèÁ¢º Create your own Promise # ‰ΩøÁî® new ÈóúÈçµÂ≠ó ÊØè‰∏ÄÂÄã Promise constructor Êé•Âèó‰∫Ü‰∏ÄÂÄãÊìÅÊúâÂÖ©ÂÄãÂèÉÊï∏Ôºàresolve Âíå rejectÔºâÁöÑ callback ÂáΩÂºè ÊØè‰∏ÄÂÄãÁî± Promise ÊâÄÂõûÂÇ≥ÁöÑÂÄºÊúÉÁî± .then (resolved) Âíå .catch (rejected) ‰æÜÂü∑ Ë°å„ÄÇ\nfunction displayAtRandomTime() { return new Promise(function (resolve, reject) { setTimeout(function () { if (Math.random() \u0026gt; 0.5) { resolve(\u0026#34;Yes!\u0026#34;); } else { reject(\u0026#34;No!\u0026#34;); } }, 1000); }); } displayAtRandomTime() .then(function (value) { console.log(value); }) .catch(function (error) { console.log(error); }); ÊàëÂÄëÂèØ‰ª•Â∞á Promises ‰∏≤Êé•Âú®‰∏ÄËµ∑ÔºåÂç≥ÂÆÉÂÄëÊòØ thenable ÁöÑ\nconst years = []; fetch(\u0026#34;https://omdbapi.com?t=titanic\u0026amp;apikey=thewdb\u0026#34;) .then((res) =\u0026gt; res.json()) .then(function (movie) { years.push(movie.Year); return fetch(\u0026#34;https://omdbapi.com?t=titanic\u0026amp;apikey=thewdb\u0026#34;).then((res) =\u0026gt; res.json() ); }) .then(function (movie) { years.push(movie.Year); console.log(years); }); console.log(\u0026#34;ALL DONE!\u0026#34;); // \u0026#34;ALL DONE!\u0026#34; // [\u0026#34;1997\u0026#34;, \u0026#34;1997\u0026#34;] Promise.all # Promise ‰∏çÊòØ sequentialÔºå‰ΩÜ Promise.all ÊúÉ waits ‰ªñÂÄë„ÄÇ function getMovie(title) { return fetch(`https://omdbapi.com?t=${title}\u0026amp;apikey=thewdb`).then((res) =\u0026gt; res.json() ); } const titanicPromise = getMovie(\u0026#34;titanic\u0026#34;); const shrekPromise = getMovie(\u0026#34;shrek\u0026#34;); const braveheartPromise = getMovie(\u0026#34;braveheart\u0026#34;); Promise.all([titanicPromise, shrekPromise, braveheartPromise]).then(function ( movies ) { return movies.forEach(function (movie) { console.log(movie.Year); }); }); // 1997 // 2001 // 1995 Generator # ÂèØ‰ª•Âú®‰ªª‰ΩïÊôÇÈñì pause Âü∑Ë°åÂíå resume ‰ΩøÁî® * Áï∂Ë¢´ÂëºÂè´ÊôÇÔºåÊúÉÂõûÂÇ≥‰∏ÄÂÄã generator object„ÄÅkeys of value Âíå done Value ÈÄèÈÅé yield Âæû paused ÂáΩÂºèÂõûÂÇ≥ Done ÂâáÊòØ‰∏ÄÂÄãÂ∏ÉÊûóÂÄºÔºåÁï∂ÂáΩÂºèÂÆåÊàêÊôÇÂõûÂÇ≥ true function* pauseAndReturnValues(num) { for (let i = 0; i \u0026lt; num; ++i) { yield i; } } const gen = pauseAndReturnValues(5); gen.next(); // { value: 0, done: false } gen.next(); // { value: 1, done: false } gen.next(); // { value: 2, done: false } gen.next(); // { value: 3, done: false } gen.next(); // { value: 4, done: false } gen.next(); // { value: undefined, done: true } Yield multiple values # function* printValues() { yield \u0026#34;First\u0026#34;; yield \u0026#34;Second\u0026#34;; yield \u0026#34;Third\u0026#34;; } const g = printValues(); g.next().value; // \u0026#34;First\u0026#34; g.next().value; // \u0026#34;Second\u0026#34; g.next().value; // \u0026#34;Third\u0026#34; Iterating over a generator # function* pauseAndReturnValues(num) { for (let i = 0; i \u0026lt; num; ++i) { yield i; } } for (const val of pauseAndReturnValues(3)) { console.log(val); } // 0 // 1 // 2 Async Generators # ÊàëÂÄëÂèØ‰ª•Âà©Áî® generators ÂéªÊö´ÂÅú asynchronous Á®ãÂºèÁ¢ºÔºÅ\nfunction* getMovieData(movieName) { console.log(\u0026#34;starting\u0026#34;); yield fetch(`https://omdbapi.com?t=${movieName}\u0026amp;apikey=thewdb`).then((res) =\u0026gt; res.json() ); console.log(\u0026#34;ending\u0026#34;); } const movieGetter = getMovieData(\u0026#34;titanic\u0026#34;); movieGetter.next().value.then((val) =\u0026gt; console.log(val)); Object.assign # ES2015 ÊòØ„ÄåÁúüÁöÑ„ÄçÊñ∞Â¢û‰∫Ü‰∏ÄÂÄã Object„ÄÇ\n// ES5 const o = { name: \u0026#34;Jay\u0026#34; }; const o2 = o; o2.name = \u0026#34;BB\u0026#34;; o.name; // \u0026#34;BB\u0026#34; // ES2015 const o = { name: \u0026#34;Jay\u0026#34; }; const o2 = Object.assign({}, o); o2.name = \u0026#34;BB\u0026#34;; o.name; // \u0026#34;Jay\u0026#34; ‰ΩÜ‰∏çÊòØÂÆåÊï¥ÁöÑË§áË£Ω‰∏Ä‰ªΩÊñ∞ÁöÑÔºå‰ªçÊúâ referenceÔºÅ\n// ES2015 const o = { names: [\u0026#34;Jay\u0026#34;, \u0026#34;BB\u0026#34;] }; const o2 = Object.assign({}, o); o2.names.push(\u0026#34;Disney\u0026#34;); o.names; // [\u0026#34;Jay\u0026#34;, \u0026#34;BB\u0026#34;, \u0026#34;Disney\u0026#34;]; Array.from # Â∞áÂÖ∂ÂÆÉË≥áÊñôÂûãÂà•ËΩâÂÖ• arrays\n// ES2015 const divs = document.getElementsByTagName(\u0026#34;div\u0026#34;); const converted = Array.from(divs); const firstSet = new Set([1, 2, 3, 4, 3, 2, 1]); // { 1, 2, 3, 4 } const arrayFromSet = Array.from(firstSet); // [1, 2, 3, 4] find # const names = [ { name: \u0026#34;Jay\u0026#34; }, { name: \u0026#34;BB\u0026#34; }, { name: \u0026#34;Disney\u0026#34; }, { name: \u0026#34;Benjamin\u0026#34; }, ]; names.find((val) =\u0026gt; val.name === \u0026#34;BB\u0026#34;); // { name: \u0026#34;BB\u0026#34; } findIndex # const names = [ { name: \u0026#34;Jay\u0026#34; }, { name: \u0026#34;BB\u0026#34; }, { name: \u0026#34;Disney\u0026#34; }, { name: \u0026#34;Benjamin\u0026#34; }, ]; names.findIndex((val) =\u0026gt; val.name === \u0026#34;BB\u0026#34;); // 1 includes # // ES5 \u0026#34;awesome\u0026#34;.indexOf(\u0026#34;some\u0026#34;); // 3 // ES2015 \u0026#34;awesome\u0026#34;.includes(\u0026#34;some\u0026#34;); // true Number.isFinite # // ES5 function seeIfNumber(val) { if (typeof val === \u0026#34;number\u0026#34; \u0026amp;\u0026amp; !isNaN(val)) { return \u0026#34;It is a number!\u0026#34;; } } // ES2015 function seeIfNumber(val) { if (Number.isFinite(val)) { return \u0026#34;It is a number!\u0026#34;; } } ","date":"7 August 2018","externalUrl":null,"permalink":"/posts/js/js-es2015/","section":"Posts","summary":"","title":"ES2015","type":"posts"},{"content":"Âú®Ê≠§ÈôÑ‰∏ä Elie Schoppik Ë¨õÂ∏´ÁöÑ slides\nÈô£ÂàóËø≠‰ª£ # Âú® JavaScript ‰∏≠Ôºåcallback ÊòØ‰∏ÄÁ®ÆÂ∏∏Ë¶ãÁöÑÂáΩÂºèÔºåÈÄôÁØáÊñáÁ´†ÊÉ≥Ë¶ÅÂ∞ç JS ‰∏≠ÂπæÁ®ÆÂ∏∏Ë¶ãËø≠‰ª£ ÔºàiterateÔºâÈô£ÂàóÁöÑÊñπÂºèÂÅöÂÄãÂàùÊ≠•ÁöÑ‰ªãÁ¥π„ÄÇ\n‰∏ªË¶ÅÂáΩÂºèÊúâ‰ª•‰∏ãÂπæÁ®ÆÔºå‰ΩøÁî®ÂÆÉÂÄëÂèØ‰ª•‰ΩøÁ®ãÂºèÁ¢ºËÆäÂæóÊõ¥Âä†Êï¥ÊΩî„ÄÅÊ∏ÖÊ•öÔºÅ\nforEach map filter some every reduce forEach # Âü∑Ë°åÊ≠•È©üÔºö\nËø≠‰ª£Êï¥ÂÄãÈô£Âàó Â∞çÊØè‰∏ÄÂÄãÂÄºÔºàvalueÔºâÂü∑Ë°å‰∏ÄÊ¨° callback ÂõûÂÇ≥ undefined ÈÅãË°åÊ©üÂà∂Ôºö\nfunction forEach(arr, callback) { for (let i = 0; i \u0026lt; arr.length; ++i) { callback(arr[i], i, arr); } } ‰ª•‰∏ãËÆìÊàëÂÄëÈÄèÈÅé‰æãÂ≠ê‰æÜÊ∑±ÂÖ•‰∫ÜËß£ forEach ÁöÑÂ•ßÂ¶ôÔºÅ\nWrite a function called doubleValues which accepts an array and returns a new array with all the values in the array passed to the function doubled.\nExamples:\ndoubleValues([1, 2, 3]); // [2, 4, 6] doubleValues([5, 1, 2, 3, 10]); // [10, 2, 4, 6, 20] Solution:\nfunction doubleValues(arr) { let newArr = []; arr.forEach((val) =\u0026gt; newArr.push(val * 2)); return newArr; } Write a function called onlyEvenValues which accepts an array and returns a new array with only the even values in the array passed to the function.\nExamples:\nonlyEvenValues([1, 2, 3]); // [2] onlyEvenValues([5, 1, 2, 3, 10]); // [2, 10] Solution:\nfunction onlyEvenValues(arr) { let newArr = []; arr.forEach((val) =\u0026gt; { if (val % 2 === 0) { newArr.push(val); } }); return newArr; } Write a function called showFirstAndLast which accepts an array of strings and returns a new array with only the first and last character of each string.\nExamples:\nshowFirstAndLast([\u0026#34;colt\u0026#34;, \u0026#34;matt\u0026#34;, \u0026#34;tim\u0026#34;, \u0026#34;udemy\u0026#34;]); // [\u0026#39;ct\u0026#39;, \u0026#39;mt\u0026#39;, \u0026#39;tm\u0026#39;, \u0026#39;uy\u0026#39;] showFirstAndLast([\u0026#34;hi\u0026#34;, \u0026#34;goodbye\u0026#34;, \u0026#34;smile\u0026#34;]); // [\u0026#39;hi\u0026#39;, \u0026#39;ge\u0026#39;, \u0026#39;se\u0026#39;] Solution:\nfunction showFirstAndLast(arr) { let newArr = []; arr.forEach((val) =\u0026gt; newArr.push(val[0] + val[val.length - 1])); return newArr; } Write a function called addKeyAndValue which accepts an array of objects, a key, and a value and returns the array passed to the function with the new key and value added for each object.\nExamples:\naddKeyAndValue( [{ name: \u0026#34;Elie\u0026#34; }, { name: \u0026#34;Colt\u0026#34; }], \u0026#34;title\u0026#34;, \u0026#34;instructor\u0026#34; ); // [{ name: \u0026#39;Elie\u0026#39;, title: \u0026#39;instructor\u0026#39; }, // { name: \u0026#39;Colt\u0026#39;, title: \u0026#39;instructor\u0026#39; }] Solution:\nfunction addKeyAndValue(arr, key, value) { arr.forEach((val) =\u0026gt; (val[key] = value)); return arr; } Write a function called vowelCount which accepts a string and returns an object with the keys as the vowel and the values as the number of times the vowel appears in the string. This function should be case insensitive so a lowercase letter and uppercase letter should count.\nExamples:\nvowelCount(\u0026#34;Elie\u0026#34;); // { e: 2, i: 1 } vowelCount(\u0026#34;Colt\u0026#34;); // { o: 1 } vowelCount(\u0026#34;hmmm\u0026#34;); // {}; vowelCount(\u0026#34;I Am awesome and so are you\u0026#34;); // { i: 1, a: 4, e: 3, o: 3, u: 1 } Solution:\nfunction vowelCount(str) { let obj = {}; let vowels = \u0026#34;aeiou\u0026#34;; str .toLowerCase() .split(\u0026#34;\u0026#34;) .forEach((val) =\u0026gt; { if (vowels.indexOf(val) !== -1) { if (obj[val]) { ++obj[val]; } else { obj[val] = 1; } } }); return obj; } map # Âü∑Ë°åÊ≠•È©üÔºö\nÂâµÂª∫‰∏ÄÂÄãÊñ∞ÁöÑÈô£ÂàóÔºànewArrÔºâ Ëø≠‰ª£ÂéüÊú¨ÁöÑÈô£ÂàóÔºàarrÔºâ Â∞çÊØè‰∏ÄÂÄãÂÄºÔºàvalueÔºâÂü∑Ë°å‰∏ÄÊ¨° callback Â∞á callback ÂáΩÂºèÂõûÂÇ≥ÁöÑÁµêÊûúÂä†ÂÖ•Ê≠•È©ü‰∏ÄÊâÄÂª∫Á´ãÁöÑÈô£ÂàóÔºànewArrÔºâ ÂõûÂÇ≥ newArr ÈÅãË°åÊ©üÂà∂Ôºö\nfunction map(arr, callback) { let newArr; for (let i = 0; i \u0026lt; arr.length; ++i) { newArr.push(callback(arr[i], i, arr)); } return newArr; } ÊàëÂÄëÂèØ‰ª•ÁôºÁèæÔºåÈÄèÈÅé mapÔºåÊàëÂÄë‰∏çÈúÄË¶ÅÂÜçËá™Ë°åÂª∫Á´ãÈô£ÂàóÔºåÈÄôÊúÉ‰ΩøÁöÑÁ®ãÂºèÁ¢ºËÆäÂæóÈùûÂ∏∏ÊΩîÁ∞°ÔºåÁî± ÂÖ∂ÊòØÊê≠ÈÖç 1-line arrow function ÊôÇÔºÅ\n‰∏ÄÊ®£ÈÄèÈÅé‰ª•‰∏ãÂπæÂÄã‰æãÂ≠êÔºåËÆìÂ§ßÂÆ∂Á¥∞Á¥∞ÂìÅÂòó map ÊØî forEach Âº∑Â§ßÁöÑÂú∞ÊñπÔºÅ\nWrite a function called doubleValues which accepts an array and returns a new array with all the values in the array passed to the function doubled.\nExamples:\ndoubleValues([1, 2, 3]); // [2, 4, 6] doubleValues([1, -2, -3]); // [2, -4, -6] Solution:\nfunction doubleValues(arr) { return arr.map((val) =\u0026gt; val * 2); } Write a function called valTimesIndex which accepts an array and returns a new array with each value multiplied by the index it is currently at in the array.\nExamples:\nvalTimesIndex([1, 2, 3]); // [0, 2, 6] valTimesIndex([1, -2, -3]); // [0, -2, -6] Solution:\nfunction valTimesIndex(arr) { return arr.map((val, i) =\u0026gt; val * i); } Write a function called extractKey which accepts an array of objects and some key and returns a new array with the value of that key in each object.\nExamples:\nextractKey([{ name: \u0026#34;Elie\u0026#34; }, { name: \u0026#34;Colt\u0026#34; }], \u0026#34;name\u0026#34;); // [\u0026#39;Elie\u0026#39;, \u0026#39;Colt\u0026#39;] Solution:\nfunction extractKey(arr, key) { return arr.map((val) =\u0026gt; val[key]); } Write a function called extractFullName which accepts an array of objects and returns a new array with the value of the key with a name of \u0026lsquo;first\u0026rsquo; and the value of a key with the name of \u0026rsquo;last\u0026rsquo; in each object, concatenated together with a space.\nExamples:\nextractFullName([ { first: \u0026#34;Elie\u0026#34;, last: \u0026#34;Schoppik\u0026#34; }, { first: \u0026#34;Colt\u0026#34;, last: \u0026#34;Steele\u0026#34; }, ]); // [\u0026#39;Elie Schoppik\u0026#39;, \u0026#39;Colt Steele\u0026#39;] Solution:\nfunction extractFullName(arr) { return arr.map((val) =\u0026gt; `${val.first} ${val.last}`); } filter # Âü∑Ë°åÊ≠•È©üÔºö\nÂâµÂª∫‰∏ÄÂÄãÊñ∞ÁöÑÈô£ÂàóÔºànewArrÔºâ Ëø≠‰ª£ÂéüÊú¨ÁöÑÈô£ÂàóÔºàarrÔºâ Â∞çÊØè‰∏ÄÂÄãÂÄºÔºàvalueÔºâÂü∑Ë°å‰∏ÄÊ¨° callback Ëã• callback ÂõûÂÇ≥ trueÔºåÂ∞á value Âä†ÂÖ•Ê≠•È©ü‰∏ÄÊâÄÂª∫Á´ãÁöÑÈô£ÂàóÔºànewArrÔºâ Ëã• callback ÂõûÂÇ≥ falseÔºåcontinue ÂõûÂÇ≥ newArr ÈÅãË°åÊ©üÂà∂Ôºö\nfunction filter(arr, callback) { let newArr; for (let i = 0; i \u0026lt; arr.length; ++i) { if (callback(arr[i], i, arr)) { newArr.push(arr[i]); } } return newArr; } ‰æãÂ≠êÔºö\nWrite a function called filterByValue which accepts an array of objects and a key and returns a new array with all the objects that contain that key.\nExamples:\nfilterByValue( [ { first: \u0026#34;Elie\u0026#34;, last: \u0026#34;Schoppik\u0026#34; }, { first: \u0026#34;Colt\u0026#34;, last: \u0026#34;Steele\u0026#34;, isCatOwner: true }, ], \u0026#34;isCatOwner\u0026#34; ); // [{ first: \u0026#39;Colt\u0026#39;, last: \u0026#39;Steele\u0026#39;, isCatOwner: true }] Solution:\nfunction filterByValue(arr, key) { return arr.filter((val) =\u0026gt; val[key]); } Write a function called find which accepts an array and a value and returns the first element in the array that has the same value as the second parameter or undefined if the value is not found in the array.\nExamples:\nfind([1, 2, 3, 4, 5], 3); // 3 find([1, 2, 3, 4, 5], 10); // undefined Solution:\nfunction find(arr, searchValue) { return arr.filter((val) =\u0026gt; val === searchValue)[0]; } Write a function called findInObj which accepts an array of objects, a key, and some value to search for and returns the first found value in the array.\nExamples:\nfindInObj( [ { first: \u0026#34;Elie\u0026#34;, last: \u0026#34;Schoppik\u0026#34; }, { first: \u0026#34;Tim\u0026#34;, last: \u0026#34;Garcia\u0026#34;, isCatOwner: true }, { first: \u0026#34;Colt\u0026#34;, last: \u0026#34;Steele\u0026#34;, isCatOwner: true }, ], \u0026#34;isCatOwner\u0026#34;, true ); // { first: \u0026#39;Tim\u0026#39;, last: \u0026#39;Garcia\u0026#39;, isCatOwner: true} Solution:\nfunction findInObj(arr, key, searchValue) { return arr.filter((val) =\u0026gt; val[key] === searchValue)[0]; } Write a function called removeVowels which accepts a string and returns a new string with all of the vowels (both uppercased and lowercased) removed. Every character in the new string should be lowercased.\nExamples:\nremoveVowels(\u0026#34;Elie\u0026#34;); // \u0026#39;l\u0026#39; removeVowels(\u0026#34;TIM\u0026#34;); // \u0026#39;tm\u0026#39; removeVowels(\u0026#34;ZZZZZZ\u0026#34;); // \u0026#39;zzzzzz\u0026#39; Solution:\nfunction removeVowels(str) { let vowels = \u0026#34;aeiou\u0026#34;; return str .toLowerCase() .split(\u0026#34;\u0026#34;) .filter((val) =\u0026gt; vowels.indexOf(val) === -1) .join(\u0026#34;\u0026#34;); } Write a function called doubleOddNumbers which accepts an array and returns a new array with all of the odd numbers doubled (HINT - you can use map and fitler to double and then filter the odd numbers).\nExamples:\ndoubleOddNumbers([1, 2, 3, 4, 5]); // [2, 6, 10] doubleOddNumbers([4, 4, 4, 4, 4]); // [] Solution:\nfunction doubleOddNumbers(arr) { return arr.filter((val) =\u0026gt; val % 2 === 1).map((val) =\u0026gt; val * 2); } some # Âü∑Ë°åÊ≠•È©üÔºö\nËø≠‰ª£ÂéüÊú¨ÁöÑÈô£ÂàóÔºàarrÔºâ Â∞çÊØè‰∏ÄÂÄãÂÄºÔºàvalueÔºâÂü∑Ë°å‰∏ÄÊ¨° callback Ëã•Ëá≥Â∞ëÊúâ‰∏ÄÂÄã callback ÂõûÂÇ≥ trueÔºåÂâáÂõûÂÇ≥ true Âê¶ÂâáÔºåÂõûÂÇ≥ false ÈÅãË°åÊ©üÂà∂Ôºö\nfunction some(arr, callback) { for (let i = 0; i \u0026lt; arr.length; ++i) { if (callback(arr[i], i, arr)) { return true; } } return false; } every # Âü∑Ë°åÊ≠•È©üÔºö\nËø≠‰ª£ÂéüÊú¨ÁöÑÈô£ÂàóÔºàarrÔºâ Â∞çÊØè‰∏ÄÂÄãÂÄºÔºàvalueÔºâÂü∑Ë°å‰∏ÄÊ¨° callback Ëã•Ëá≥Â∞ëÊúâ‰∏ÄÂÄã callback ÂõûÂÇ≥ falseÔºåÂâáÂõûÂÇ≥ fale Âê¶ÂâáÔºåÂõûÂÇ≥ true ÈÅãË°åÊ©üÂà∂Ôºö\nfunction every(arr, callback) { for (let i = 0; i \u0026lt; arr.length; ++i) { if (callback(arr[i], i, arr) === false) { return false; } } return true; } ‰ª•‰∏ãÊàëÂÄë‰∏ÄÊ®£ÈÄèÈÅé‰æãÂ≠ê‰æÜÁúãÂ¶Ç‰ΩïÂØ¶‰Ωú some Âíå everyÔºö\nWrite a function called hasOddNumber which accepts an array and returns true if the array contains at least one odd number, otherwise it returns false.\nExamples:\nhasOddNumber([1, 2, 2, 2, 2, 2, 4]); // true hasOddNumber([2, 2, 2, 2, 2, 4]); // false Solution:\nfunction hasOddNumber(arr) { return arr.some((val) =\u0026gt; val % 2 === 1); } Write a function called hasAZero which accepts a number and returns true if that number contains at least one zero. Otherwise, the function should return false.\nExamples:\nhasAZero(3332123213101232321); // true hasAZero(1212121); // false Solution:\nfunction hasAZero(num) { return num .toString() .split(\u0026#34;\u0026#34;) .some((val) =\u0026gt; val === \u0026#34;0\u0026#34;); } Write a function called hasOnlyOddNumbers which accepts an array and returns true if every single number in the array is odd. If any of the values in the array are not odd, the function should return false.\nExamples:\nhasOnlyOddNumbers([1, 3, 5, 7]); // false hasOnlyOddNumbers([1, 2, 3, 5, 7]); // false Solution:\nfunction hasOnlyOddNumbers(arr) { return arr.every((val) =\u0026gt; val % 2 === 1); } Write a function called hasNoDuplicates which accepts an array and returns true if there are no duplicate values (more than one element in the array that has the same value as another). If there are any duplicates, the function should return false.\nExamples:\nhasNoDuplicates([1, 2, 3, 1]); // false hasNoDuplicates([1, 2, 3]); // true Solution:\nfunction hasNoDuplicates(arr) { return arr.every((val) =\u0026gt; arr.indexOf(val) === arr.lastIndexOf(val)); } Write a function called hasCertainKey which accepts an array of objects and a key, and returns true if every single object in the array contains that key. Otherwise it should return false.\nExamples:\nconst arr = [ { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Elie\u0026#34;, last: \u0026#34;Schoppik\u0026#34; }, { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Tim\u0026#34;, last: \u0026#34;Garcia\u0026#34;, isCatOwner: true }, { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Matt\u0026#34;, last: \u0026#34;Lane\u0026#34; }, { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Colt\u0026#34;, last: \u0026#34;Steele\u0026#34;, isCatOwner: true }, ]; hasCertainKey(arr, \u0026#34;first\u0026#34;); // true hasCertainKey(arr, \u0026#34;isCatOwner\u0026#34;); // false Solution:\nfunction hasCertainKey(arr, key) { return arr.every((val) =\u0026gt; key in val); } Write a function called hasCertainValue which accepts an array of objects and a key, and a value, and returns true if every single object in the array contains that value for the specific key. Otherwise it should return false.\nExamples:\nlet arr = [ { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Elie\u0026#34;, last: \u0026#34;Schoppik\u0026#34; }, { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Tim\u0026#34;, last: \u0026#34;Garcia\u0026#34;, isCatOwner: true }, { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Matt\u0026#34;, last: \u0026#34;Lane\u0026#34; }, { title: \u0026#34;Instructor\u0026#34;, first: \u0026#34;Colt\u0026#34;, last: \u0026#34;Steele\u0026#34;, isCatOwner: true }, ]; hasCertainValue(arr, \u0026#34;title\u0026#34;, \u0026#34;Instructor\u0026#34;); // true hasCertainValue(arr, \u0026#34;first\u0026#34;, \u0026#34;Elie\u0026#34;); // false Solution:\nfunction hasCertainValue(arr, key, searchValue) { return arr.every((val) =\u0026gt; val[key] === searchValue); } reduce # Âü∑Ë°åÊ≠•È©ü\nÂèÉÊï∏Ôºö 1.ÔºàÂøÖË¶ÅÔºâcallback ÂáΩÂºè 1.ÔºàÂèØÊúâÂèØÁÑ°ÔºâÁ¨¨‰∫åÂÄãÂèÉÊï∏Ôºàoptional parameterÔºâ Ëø≠‰ª£ÂéüÊú¨ÁöÑÈô£ÂàóÔºàarrÔºâ Â∞çÊØè‰∏ÄÂÄãÂÄºÔºàvalueÔºâÂü∑Ë°å‰∏ÄÊ¨° callback Ëã•ÊúâÊèê‰æõ optional parameter ÁöÑË©±Ôºåcallback ÁöÑÁ¨¨‰∏ÄÂÄãÂèÉÊï∏‰æøÊòØË©≤ optional parameter Âê¶ÂâáÔºåÂâáÊòØ arr[0]Ôºå‰πüÂ∞±ÊòØÁ¨¨ 0 ÂÄã value ÈÄöÂ∏∏ÊàëÂÄëÁ®±Âëº callback ÁöÑÁ¨¨‰∏ÄÂÄãÂèÉÊï∏ÁÇ∫ \u0026lsquo;accumulator\u0026rsquo;ÔºåÂ∏∏Áî®Á∏ÆÂØ´ÁÇ∫ acc ÊØèÊ¨°Âæû callback ÂõûÂÇ≥ÁöÑÂÄºÔºåËÆäÊàêÁÇ∫Êñ∞ÁöÑ accumulatorÔºÅ Êú¨ÊñáÊúÄÂæå‰ªãÁ¥πÁöÑ reduce ÂíåÂâçÈù¢‰ªª‰Ωï‰∏ÄÂÄãÂáΩÂºèÂü∑Ë°åÊñπÂºèÊúâËëóÂæàÂ§ßÁöÑÂ∑ÆÁï∞ÔºåÈúÄË¶ÅÈÄèÈÅé‰∏çÂÅúÁöÑ Á∑¥ÁøíÊâçËÉΩÁÜüËÉΩÁîüÂ∑ßÔºåÂõ†ÁÇ∫Èõ£Â∫¶ËºÉÈ´òÔºåËÆìÊàëÂÄëÂÖàÁúãÂπæÂÄãÁØÑ‰æãÔºö\nÁÑ° optional parameterÔºåÊúÄÂæåÂõûÂÇ≥ÁµêÊûúÁÇ∫ 6„ÄÇ\nconst arr = [1, 2, 3]; arr.reduce((acc, next) =\u0026gt; acc + next); accumulator nextValue returned value 1 2 3 3 3 6 Êúâ optional parameterÔºåÊúÄÂæåÂõûÂÇ≥ÁµêÊûúÁÇ∫ 16„ÄÇ\nconst arr = [1, 2, 3]; arr.reduce((acc, next) =\u0026gt; acc + next, 10); accumulator nextValue returned value 10 1 11 11 2 13 13 3 16 ÂæûÁØÑ‰æã‰∏≠ÂèØ‰ª•ÁôºÁèæÔºåÈÄèÈÅé reduce ‰æÜÂä†Á∏ΩÊï¥ÂÄãÈô£ÂàóÊòØÈùûÂ∏∏Êñπ‰æøÁöÑ„ÄÇ\n‰ª•‰∏ãÂÜçÂ§öÁúãÂπæÈ°åÁ∑¥ÁøíÈ°åÂêßÔºÅ\nWrite a function called extractValue which accepts an array of objects and a key and returns a new array with the value of each object at the key.\nExamples:\nconst arr = [{ name: \u0026#34;Elie\u0026#34; }, { name: \u0026#34;Colt\u0026#34; }]; extractValue(arr, \u0026#34;name\u0026#34;); // [\u0026#39;Elie\u0026#39;, \u0026#39;Colt\u0026#39;] Solution:\nfunction extractValue(arr, key) { return arr.reduce((acc, next) =\u0026gt; { acc.push(next[key]); return acc; }, []); } Write a function called vowelCount which accepts a string and returns an object with the keys as the vowel and the values as the number of times the vowel appears in the string. This function should be case insensitive so a lowercase letter and uppercase letter should count\nExamples:\nvowelCount(\u0026#34;Elie\u0026#34;); // { e: 2, i: 1 } vowelCount(\u0026#34;Colt\u0026#34;); // { o: 1 } vowelCount(\u0026#34;hmmm\u0026#34;); // {}; vowelCount(\u0026#34;I Am awesome and so are you\u0026#34;); // { i: 1, a: 4, e: 3, o: 3, u: 1 } Solution:\nfunction vowelCount(str) { const vowels = \u0026#34;aeiou\u0026#34;; return str .toLowerCase() .split(\u0026#34;\u0026#34;) .reduce((acc, next) =\u0026gt; { if (vowels.indexOf(next) !== -1) { if (acc[next]) { ++acc[next]; } else { acc[next] = 1; } } return acc; }, {}); } Write a function called addKeyAndValue which accepts an array of objects, a key, and a value and returns the array passed to the function with the new key and value added for each object.\nExamples:\naddKeyAndValue( [{ name: \u0026#34;Elie\u0026#34; }, { name: \u0026#34;Colt\u0026#34; }], \u0026#34;title\u0026#34;, \u0026#34;instructor\u0026#34; ); // [{ name: \u0026#39;Elie\u0026#39;, title: \u0026#39;instructor\u0026#39; }, // { name: \u0026#39;Colt\u0026#39;, title: \u0026#39;instructor\u0026#39; }] Solution:\nfunction addKeyAndValue(arr, key, value) { return arr.reduce((acc, next, i) =\u0026gt; { acc[i][key] = value; return acc; }, arr); } Write a function called partition which accepts an array and a callback and returns an array with two arrays inside of it. The partition function should run the callback function on each value in the array and if the result of the callback function at that specific value is true, the value should be placed in the first subarray. If the result of the callback function at that specific value is false, the value should be placed in the second subarray.\nExamples:\nfunction isEven(val) { return val % 2 === 0; } const arr = [1, 2, 3, 4, 5, 6, 7, 8]; partition(arr, isEven); // [[2, 4, 6, 8], [1, 3, 5, 7]]; function isLongerThanThreeCharacters(val) { return val.length \u0026gt; 3; } const names = [\u0026#34;Elie\u0026#34;, \u0026#34;Colt\u0026#34;, \u0026#34;Tim\u0026#34;, \u0026#34;Matt\u0026#34;]; partition(names, isLongerThanThreeCharacters); // [[\u0026#39;Elie\u0026#39;, \u0026#39;Colt\u0026#39;, \u0026#39;Matt\u0026#39;], [\u0026#39;Tim\u0026#39;]] Solution:\nfunction partition(arr, callback) { return arr.reduce( (acc, next, i) =\u0026gt; { if (callback(next)) { acc[0].push(next); } else { acc[1].push(next); } return acc; }, [[], []] ); } ‰ª•‰∏äÂ∞±ÊòØÂπæÂÄãÈáçË¶ÅÂ∏∏Ë¶ãÁöÑ Array MethodsÔºÅ\n","date":"20 July 2018","externalUrl":null,"permalink":"/posts/js/js-advanced-array-methods/","section":"Posts","summary":"","title":"Advanced Array Methods","type":"posts"},{"content":"Âú®Ê≠§ÈôÑ‰∏ä Elie Schoppik Ë¨õÂ∏´ÁöÑ slides\nÁÇ∫‰ªÄÈ∫ºË¶ÅÁî® JasmineÔºü # Jasming Êèê‰æõ‰∫ÜÂêÑÂºèÂêÑÊ®£‰∏çÂêåÁöÑÊ∏¨Ë©¶ÊñπÂºè Âú®ÂêÑÁ®Æ JavaScript Áí∞Â¢É‰∏ãÈÉΩËÉΩÈ†ÜÂà©ÈÅãË°åÔºÅ Getting Started # Êñ∞Â¢û html Ê™î„ÄÇ ÈÄ£Áµê CSS„ÄÅJavaScript Ê™î„ÄÇ ÈñãÂßãÂØ´Ê∏¨Ë©¶Á®ãÂºèÁ¢ºÔºÅ \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Jasmine Tests\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.6.2/jasmine.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.6.2/jasmine.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.6.2/jasmine-html.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.6.2/boot.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ‰∏Ä‰∫õ keywords # describe - \u0026ldquo;let me describt __ to you.\u0026rdquo; it - \u0026ldquo;let me tell you about __.\u0026rdquo; expect - \u0026ldquo;here\u0026rsquo;s what I expect.\u0026rdquo; Ê¶ÇÂøµÂåñ # describe('Earth') it('is round') expect(earth.isRound.toBe(true)) it('is the third planet from the sun') expect(earth.numberFromSun).toBe(3) ÂØ´ÊàêÁ®ãÂºèÁ¢ºÁöÑË©± # Âú®ÈÄôË£°ÔºåÊàë‰∏ÄÂæã‰ΩøÁî® ES2015 ÁöÑ arrow function ‰æÜ‰ΩøÁ®ãÂºèÁ¢ºÊõ¥Âä†Á∞°ÊΩîÔºÅ\nlet earth = { isRound: true, numberFromSun: 3, }; describe(\u0026#34;Earth\u0026#34;, () =\u0026gt; { it(\u0026#34;is round\u0026#34;, () =\u0026gt; expect(earth.isRound).toBe(true)); it(\u0026#34;is the third planet from the sun\u0026#34;, () =\u0026gt; expect(earth.numberFromSun).toBe(3)); }); Matchers # Jasmine Êèê‰æõ‰∫ÜÂæàÂ§öÁ®Æ matchersÔºå Âú®ÈÄôË£°ÂèØ‰ª•ÁúãÂà∞ÂÆòÊñπË©≥Á¥∞ÁöÑ‰ªãÁ¥π\ntoBe / not.toBe toBeCloseTo toBeDefined toBeFalsey / toBeTruthy toBeGreaterThan / toBeLessThan toContain toEqual jasmine.any() beforeEach Âíå afterEach # beforeEach ÊúÉÂú®ÊØèÊ¨° it callback ÂâçÂÖàÂü∑Ë°åÔºåÂ¶ÇÊ≠§ÂèØ‰ª•Â§ßÁ¨¶Èôç‰ΩéÁ®ãÂºèÁ¢ºÁöÑÈáçË§áÊÄß Ëàâ‰æã‰æÜË™™Ôºö\ndescribe(\u0026#34;Arrays\u0026#34;, () =\u0026gt; { let arr; beforeEach(() =\u0026gt; (arr = [1, 3, 5])); // run before each \u0026#39;it\u0026#39; callback it(\u0026#34;adds elements to an array\u0026#34;, () =\u0026gt; { arr.push(7); expect(arr).toEqual([1, 3, 5, 7]); }); it(\u0026#34;returns the new length of the array\u0026#34;, () =\u0026gt; expect(arr.push(7)).toBe(4)); it(\u0026#34;adds anything into the array\u0026#34;, () =\u0026gt; expect(arr.push({})).toBe(4)); }); È°û‰ººÁöÑÊ¶ÇÂøµÔºåafterEach ÂâáÊòØÂú®ÊØèÊ¨° it callback ÂæåÂü∑Ë°å ‰∏ÄÊ®£‰æÜÁúãÂÄã‰æãÂ≠êÔºö\ndescribe(\u0026#34;Counting\u0026#34;, () =\u0026gt; { let count = 0; beforeEach(() =\u0026gt; count++); afterEach(() =\u0026gt; (count = 0)); // run after each \u0026#39;it\u0026#39; callback it(\u0026#34;has a counter that increments\u0026#34;, () =\u0026gt; expect(count).toBe(1)); it(\u0026#34;gets reset\u0026#34;, () =\u0026gt; expect(count).toBe(1)); }); beforeAll / afterAll let arr = []; beforeAll(() =\u0026gt; (arr = [1, 3, 5])); describe(\u0026#34;Counting\u0026#34;, () =\u0026gt; { it(\u0026#34;starts with an array\u0026#34;, () =\u0026gt; { arr.push(4); expect(1).toBe(1); }); it(\u0026#34;keeps mutating that array\u0026#34;, () =\u0026gt; { console.log(arr); // [1, 2, 3, 4] arr.push(5); expect(1).toBe(1); }); }); describe(\u0026#34;Again\u0026#34;, () =\u0026gt; { it(\u0026#34;keeps mutating the array...again\u0026#34;, () =\u0026gt; { console.log(arr); // [1, 2, 3, 4, 5] expect(1).toBe(1); }); }); ","date":"17 July 2018","externalUrl":null,"permalink":"/posts/tech/testing-with-jasmine/","section":"Posts","summary":"","title":"Testing with Jasmine","type":"posts"},{"content":" ÂâçË®Ä # Âõ†ÁÇ∫ÊúãÂèãÊé®Ëñ¶ÔºåÂâçÈô£Â≠êÈñãÂßãËΩâÁßª‰ΩøÁî® oh-my-zshÔºåËµ∑ÂàùË¶∫ÂæóÁî®‰∫ÜÂæà‰πÖÁöÑ bash Â∑≤Á∂ìÂ§†Â•ΩÁî®‰∫ÜÔºåÁúüÁöÑÊúâÈúÄË¶ÅËΩâÁßªÂà∞ zsh ‰∏äÂóéÔºü‰ΩÜÁ∂ìÈÅé‰ΩøÁî®‰∏ÄÂÄãÊúàÁöÑÂøÉÂæóÔºåÊàëËÉΩÂëäË®¥ÊÇ® Ôºåzsh \u0026gt; bash„ÄÇ\nÊú¨Ë∫´ÊòØ‰ΩøÁî® macOSÔºå‰∏çÁ¢∫ÂÆö‰ΩøÁî® Windows ÁöÑÊúãÂèãÊòØÂê¶ËÉΩÂ§†Â¶ÇÊ≥ïÁ†≤Ë£ΩÔºåzsh Áõ∏ÊØî bash ÊúâË®± Â§öÁöÑÂÑ™ÈªûÔºåÂÉèÊòØÔºö\n‰∏çÂçÄÂàÜÂ§ßÂ∞èÂØ´ÔºàÊñπ‰æø tab Ë£úÈΩäË∑ØÂæëÂêçÔºâ ËÉΩÂ§†‰∏äËâ≤ÔºåÊúâÂ§öÁ®Æ‰∏ªÈ°å ËÉΩÂ§†È°ØÁ§∫ git branch ÂàÜÊîØÁãÄÊÖã Êé•‰∏ã‰æÜÂ∞±‰æÜË™™ zsh ÁöÑÂÆâË£ùÊñπÊ≥ïÔºö\nÂÆâË£ù zsh ÂÆâË£ù oh-my-zsh ÂÆâË£ù zsh-completions ‰øÆÊîπË®≠ÂÆö ÂÆâË£ùÊµÅÁ®ã # ÂÆâË£ù zsh # brew install zsh ‰∏¶‰∏îÂ∞áÈ†êË®≠ÁöÑ bash ‰øÆÊîπÁÇ∫ zshÔºö\nchsh -s /usr/local/bin/zsh # change shell to zsh Ëã•Êó•ÂæåË¶ÅÊèõÂõûÂéüÂª†È†êË®≠ÁöÑ bashÔºö\nchsh -s /bin/bash # change shell to default bash ÂÆâË£ù oh-my-zsh # git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh È†êË®≠Ë∑ØÂæëÊòØÂú® ~/.oh-my-zshÔºåËã•ÊÉ≥Ë£ùÂú®Âà•ËôïË¶Å‰øÆÊîπ ~/.zshrc„ÄÇ\nzsh ÁöÑË®≠ÂÆöÊ™îÊîæÂú® ~/.zshrc Â∞±ÂÉè bash ÁöÑË®≠ÂÆöÊ™îÊîæÂú® ~/.bashrc ‰∏ÄÊ®£ÔºåËÄåÈÄôÂÄãÊ™îÊ°à ÈúÄË¶ÅÊàëÂÄëËá™Â∑±Áî¢ÁîüÔºåÈÄôË£°Âª∫Ë≠∞‰ΩøÁî® oh-my-zsh ÁöÑÊ®°ÁâàÊØîËºÉÁ∞°ÂñÆÔºö\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc ÂÆâË£ù zsh-completions # brew install zsh-completions ÂÜçÈÄôË£°ÈÇÑË¶ÅË®òÂæóÊâìÈñã ~/.zshrc ‰æÜÂä†ÂÖ• zsh-completions ÁöÑË£úÂÖ®ÂäüËÉΩÔºö\ncode ~/.zshrc # open ~/.zshrc by VSC Âä†ÂÖ•‰∏ÄË°å zsh-completions Â∞çÊáâÁöÑË∑ØÂæëÔºö\n# zsh-completions fpath=(/usr/local/share/zsh-completions $fpath) ÊúÄÂæå rebuild zsh ÁöÑ .zcompdump\nrm -f ~/.zcompdump; compinit ‰øÆÊîπË®≠ÂÆö # Âü∫Êú¨‰∏äÂà∞ÈÄôÊ≠•Ôºåzsh Ë©≤ÊúâÁöÑÂäüËÉΩÈÉΩÂ∑≤Á∂ìÊúâ‰∫ÜÔºå‰ΩÜÊàëÂÄë‰ªçÁÑ∂ÂèØ‰ª•ÂÅö‰∏Ä‰∫õË®≠ÂÆöËÆìÂÆÉÊõ¥Â•ΩÁî®ÔºÅ\nÂàáÊèõ‰∏ªÈ°å # ‰∏ªÈ°åÂÄëÂú® ~/.oh-my-zsh/themes ‰∏≠ÔºåÂàáÊèõ‰∏ªÈ°åÁöÑÊñπÂºèÊòØ‰øÆÊîπ ~/.zshrc ÁöÑ ZSH_THEMEÔºåÈ†êË®≠ÊòØ robbyrussellÔºåÂÉèÊàëÂ∞±ÊîπÊàê agnoster\n# THEME Config -ZSH_THEME=\u0026#34;robbyrussell\u0026#34; +ZSH_THEME=\u0026#34;agnoster\u0026#34; ÈáçÊñ∞ÁôªÂÖ•ÁúãÁúãÔºåzsh ÁöÑ‰∏ªÈ°åÊáâË©≤Â∑≤Ë¢´Êõ¥ÊèõÔºÅ\nagnoster ÈÄôÂÄã‰∏ªÈ°åÈúÄË¶ÅÂ∞á Terminal ÁöÑÂ≠óÈ´îÊèõÊàê Monoco for PowerlineÔºåÂéüÂª†ÊòØÊ≤íÊúâÁöÑÔºå ‰ªñÂèØ‰ª•È°ØÁ§∫ git ÁãÄÊÖãÂèäÊúâÁæéÈ∫óÁöÑÈ°èËâ≤‰∏ªÈ°å„ÄÇ\nÂïüÁî®Êèí‰ª∂ # Êèí‰ª∂ÂÄëÂú® ~/.oh-my-zsh/plugins ‰∏≠ÔºåÂïüÁî®ÊñπÂºèÂíå‰∏ªÈ°åÈ°û‰ººÔºå‰øÆÊîπ ~/.zshrc ÁöÑ pluginsÔºå‰æãÂ¶ÇË¶ÅÂïüÁî® brewÔºåÂè™Ë¶Å‰øÆÊîπÈ†êË®≠Âè™Êúâ git ÊàêÔºö\n-plugins=(git) +plugins=(git brew) ÂÖ∂ÂÆÉ # zsh ‰∏ÄÊ®£ÂÖ∑ÂÇô alias ÁöÑÂäüËÉΩÔºåÂè™Ë¶ÅÂú® ~/.zshrc ‰∏≠Âä†ÂÖ•Ôºö\nalias xx=\u0026#34;path_name\u0026#34; ÂÉèÊàëÂ∏∏ÈÄ≤‰∏ÄÂÄãÂæàÈï∑ÁöÑË≥áÊñôÂ§æÔºåÂ∞±ÊúÉÂä†ÂÖ•\nalias cdtb=\u0026#34;cd ~/Library/Mobile\\ Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/textbook\u0026#34; ‰ª•‰∏äÂ∞±ÊòØ zsh Â§ßËá¥‰∏äÁöÑ‰ªãÁ¥π‰∫ÜÔºÅ\n","date":"30 June 2018","externalUrl":null,"permalink":"/posts/tech/bash-to-zsh/","section":"Posts","summary":"","title":"bash -\u003e zsh","type":"posts"},{"content":"","date":"30 June 2018","externalUrl":null,"permalink":"/tags/zsh/","section":"Tags","summary":"","title":"Zsh","type":"tags"},{"content":"","date":"17 February 2018","externalUrl":null,"permalink":"/tags/latex/","section":"Tags","summary":"","title":"LaTeX","type":"tags"},{"content":" ÂâçË®Ä # ‰ΩøÁî® LaTeX ÈÄôÊ¨æÊéíÁâàÂ∑•ÂÖ∑‰πüÊúâ 1 Âπ¥Â§ö‰∫ÜÔºåÊúâÈëëÊñºÂú® Êü•Ë™ûÊ≥ïÊôÇÂ∏∏ÈáçË§áÊü•Ë©¢ÈÄ†ÊàêÊïàÁéá‰∏ãÈôçÔºåÂä†‰∏äÊúãÂèãÁöÑÂª∫Ë≠∞ÔºåÊñºÊòØÂ∞±‰æÜÊï¥ÁêÜ‰ªΩÂ∏∏Áî®ÁöÑ LaTeX Ë™ûÊ≥ï ÂêßÔºÅ\nÂü∫Êú¨ # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX a_1 \\(a_1\\) x^{2018} \\(x^{2018}\\) e^{-\\alpha t} \\(e^{-\\alpha t}\\) a^3_{ij} \\(a^3_{ij}\\) e^{x^2} \\ne {e^x}^2 \\(e^{x^2} \\ne {e^x}^2\\) 94 \\times 87 = 8178 \\(94 \\times 87 = 8178\\) Ê†πËôü # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX \\sqrt x \\(\\sqrt x\\) \\sqrt{x^2 + \\sqrt y} \\(\\sqrt{x^2 + \\sqrt y}\\) \\sqrt[3]{2} \\(\\sqrt[3]{2}\\) \\surd[x^2 + y^2] \\(\\surd[x^2 + y^2]\\) Á∑ö„ÄÅÂêëÈáè # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX \\overline{m + n} \\(\\overline{m + n}\\) \\underline{m + n} \\(\\underline{m + n}\\) \\vec a \\(\\vec a\\) \\overrightarrow{AB} \\(\\overrightarrow{AB}\\) ÂÖ∂ÂÆÉ # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX \\underbrace{a + b + \\cdots + z}_{26} \\(\\underbrace{a + b + \\cdots + z}_{26}\\) \\int_0^{\\frac{\\pi}{2}} \\cos\\theta d\\theta \\(\\int_0^{\\frac{\\pi}{2}} \\cos\\theta d\\theta\\) \\frac{x^2}{1 + x + \\cdots + x^n} \\(\\frac{x^2}{1 + x + \\cdots + x^n}\\) x^{\\frac{2}{k + 1}} \\(x^{\\frac{2}{k + 1}}\\) \\sum_{i = 1}^{n} \\(\\sum_{i = 1}^{n}\\) \\prod_\\epsilon \\(\\prod_\\epsilon\\) Êï∏Â≠∏Á¨¶Ëôü # Êï∏Â≠∏Ê®°Âºè‰∏äÊ®ô # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX \\hat a \\(\\hat a\\) \\tilde a \\(\\tilde a\\) \\widehat a \\(\\widehat a\\) \\widetilde a \\(\\widetilde a\\) \\acute a \\(\\acute a\\) \\grave a \\(\\grave a\\) \\dot a \\(\\dot a\\) \\ddot a \\(\\ddot a\\) \\check a \\(\\check a\\) \\breve a \\(\\breve a\\) \\bar a \\(\\bar a\\) \\vec a \\(\\vec a\\) Â∞èÂØ´Â∏åËáòÂ≠óÊØç # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX \\alpha \\(\\alpha\\) \\xi \\(\\xi\\) \\beta \\(\\beta\\) o \\(o\\) \\gamma \\(\\gamma\\) \\pi \\(\\pi\\) \\delta \\(\\delta\\) \\varpi \\(\\varpi\\) \\epsilon \\(\\epsilon\\) \\rho \\(\\rho\\) \\varepsilon \\(\\varepsilon\\) \\varrho \\(\\varrho\\) \\zeta \\(\\zeta\\) \\sigma \\(\\sigma\\) \\eta \\(\\eta\\) \\varsigma \\(\\varsigma\\) \\theta \\(\\theta\\) \\tau \\(\\tau\\) \\vartheta \\(\\vartheta\\) \\upsilon \\(\\upsilon\\) \\iota \\(\\iota\\) \\phi \\(\\phi\\) \\kappa \\(\\kappa\\) \\varphi \\(\\varphi\\) \\lambda \\(\\lambda\\) \\chi \\(\\chi\\) \\mu \\(\\mu\\) \\psi \\(\\psi\\) \\nu \\(\\nu\\) \\omega \\(\\omega\\) Â§ßÂØ´Â∏åËáòÂ≠óÊØç # Á®ãÂºèÁ¢º LaTeX Á®ãÂºèÁ¢º LaTeX \\Gamma \\(\\Gamma\\) \\Sigma \\(\\Sigma\\) \\Delta \\(\\Delta\\) \\Upsilon \\(\\Upsilon\\) \\Theta \\(\\Theta\\) \\Phi \\(\\Phi\\) \\Lambda \\(\\Lambda\\) \\Psi \\(\\Psi\\) \\Xi \\(\\Xi\\) \\Omega \\(\\Omega\\) \\Pi \\(\\Pi\\) ","date":"17 February 2018","externalUrl":null,"permalink":"/posts/tech/latex-syntax/","section":"Posts","summary":"","title":"LaTeX Ë™ûÊ≥ïÊï¥ÁêÜ","type":"posts"},{"content":" ÂâçË®Ä # Âú®‰ΩøÁî® Git ÊôÇÔºåÊàëÂÄëÂèØËÉΩÊúÉÊúâ‰∫õ„Äå‰∏çÈÇ£È∫ºÊï¥ÈΩä„ÄçÁöÑÊèê‰∫§Ë®òÈåÑÔºàcommit historyÔºâÔºåÈÄôÊôÇÂâµ Âª∫‰∏ÄÂÄãÊñ∞ÁöÑÂÄâÂ∫´ÔºàrepositoryÔºâÔºå‰∏¶‰∏îÂ∞áÂéüÊúâË≥áÊñôÊï¥‰ªΩÁßªÊ§çÈÅéÂéªÊòØÂÄãÊúâÊïàÁöÑËß£Ê±∫ÊñπÂºèÔºå‰ΩÜ‰ºº ‰πé‰∏çÂ§™ËÅ∞ÊòéÔºåÊñºÊòØÊàëÈñãÂßãÂ∞ãÊâæÊòØÂê¶ÊúâÊõ¥ÊúâÊïàÁéáÁöÑÊñπÊ≥ïÔºåÂ•ΩÂú® Stack Overflow ‰∏äÈÄôÁØáÊñáÁ´†Áµ¶ Âá∫‰∫Ü‰∏ÄÂÄãÂèØÁî®ÁöÑËß£Á≠î„ÄÇ\nÂà™Èô§Êèê‰∫§Ë®òÈåÑ # Ëã•Áõ¥Êé•Âà™Èô§ .git Ë≥áÊñôÂ§æÁöÑË©±ÔºåÂèØËÉΩÊúÉÂ∞éËá¥‰Ω† git ÂÄâÂ∫´Âá∫ÁèæÂïèÈ°å„ÄÇÂ¶ÇÊûúÊÉ≥Ë¶ÅÂà™Èô§ÊâÄÊúâÁöÑ Êèê‰∫§Ë®òÈåÑÔºå‰∏î‰øùÁïôÁõÆÂâçÁ®ãÂºèÁ¢ºÁöÑÁãÄÊÖãÔºå‰ª•‰∏ãÁöÑÊ≠•È©üÊòØÂÆâÂÖ®‰∏îÂèØË°åÁöÑÔºö\n# create a temporary branch git checkout --orphan TEMPORARY_BRANCH # add all files git add -A # commit the changes git commit -am \u0026#34;Reset Commit History\u0026#34; # delete the \u0026#34;main\u0026#34; branch git branch -D main # rename the current branch to \u0026#34;main\u0026#34; git branch -m main # forcely update your \u0026#34;main\u0026#34; branch git push -f origin main Â¶ÇÊûúÊÉ≥Ë¶ÅÂà™Èô§ÁöÑÊòØÂàÜÊîØÔºåÈÇ£È∫ºÂ∞á‰∏äËø∞Êåá‰ª§‰∏≠ÁöÑ main ÊèõÊàêÈ†êÂà™Èô§ÂàÜÊîØÁöÑÂêçÂ≠óÂç≥ÂèØ„ÄÇ\n","date":"16 February 2018","externalUrl":null,"permalink":"/posts/tech/delete-git-history/","section":"Posts","summary":"","title":"Âà™Èô§ Git Êèê‰∫§Ë®òÈåÑ","type":"posts"},{"content":"","date":"14 February 2018","externalUrl":null,"permalink":"/tags/hexo/","section":"Tags","summary":"","title":"Hexo","type":"tags"},{"content":" ÂâçË®Ä # ËøëÊó•ÊúâÊÑüÊ≤íÊúâËä±‰∫õÂøÉÊÄùÂéªÊï¥ÁêÜÂπ≥ÊôÇÁöÑ‰∏Ä‰∫õÊÄùÁ∑í„ÄÅÊú≠Ë®òÁ≠âÁ≠âÔºåÊñºÊòØÊ±∫ÂÆöË¶ÅÈñãÂßãËëóÊâãÂØ´ÈÉ®ËêΩÊ†º„ÄÇ Âú®Á∂≤Ë∑Ø‰∏äÊü•‰∫ÜË®±Â§öË≥áÊñôÂæåÔºåÊ±∫ÂÆö‰ΩøÁî® Hexo ÊâÄÊèê‰æõÁöÑÊúçÂãôÔºåË£°Èù¢‰πüÊúâ Ë®±Â§ö‰∏ªÈ°åÂèØ‰æõÊåëÈÅ∏ÔºåËÄåÊàë‰ΩøÁî®ÁöÑÈÄôÂÄãÊòØ NexTÔºå‰∏ÄÊ¨æÁî±‰∏≠Âúã‰∫∫ÊâÄË®≠Ë®àÔºåÈùûÂ∏∏ Á≤æÁ∑ªÂÖ∏ÈõÖÁöÑ‰∏ªÈ°å„ÄÇ\n‰ΩøÁî® Hexo ‰æÜÂª∫Á´ãÂÄã‰∫∫Á∂≤Á´ô # Á∂≤Ë™å‰∏≠ÁöÑÁ¨¨‰∏ÄÁØáÊñáÁ´†ÔºåÊàëÊÉ≥Ë¶ÅË´áË´áÊàëÂú®‰ΩøÁî® Hexo Âª∫Á´ãÂÄã‰∫∫Á∂≤Á´ôÊôÇ‰∏¶ ‰∏îÁôºÂ∏ÉÂà∞ GitHub Pages ÊôÇÊâÄÈÅáÂà∞ÁöÑÂïèÈ°åÔºå‰ª•ÂèäÊàëÊòØÊÄéÈ∫ºËß£ Ê±∫ÁöÑ„ÄÇ\nÁí∞Â¢ÉÈúÄÊ±Ç # Ë¶ÅÈñãÂßã‰ΩøÁî® HexoÔºåÂøÖÈúÄÂÖàÁ¢∫‰øù‰Ω†ÁöÑÈõªËÖ¶Êúâ‰ª•‰∏ãÁöÑÊèí‰ª∂Ôºö\nGit Node.js ÂÆâË£ù Hexo # ÊàëÂÄëÂèØ‰ª•ËóâÁî± Node.js ËºïÈ¨ÜÁöÑÂÆâË£ù HexoÔºö\nnpm install hexo-cli -g ÂàùÂßãÂåñÂÄâÂ∫´ÔºàrepositoryÔºâ # ‰Ω†ÂøÖÈúÄÂÖàÂú®‰Ω†ÁöÑ github Â∏≥Êà∂Â∫ï‰∏ãÂª∫Á´ã‰∏ÄÂÄãÊñ∞ÁöÑÂÄâÂ∫´ÔºåÂêçÂ≠óÂøÖÈúÄÊòØ \u0026lt;username\u0026gt;.github.io ÊàñÊòØ \u0026lt;username\u0026gt;.github.io/\u0026lt;project\u0026gt;ÔºåÂê¶Ââá‰Ω†Â∞áÁÑ°Ê≥ïÊàêÂäüÁôº ‰ΩàÊñáÁ´†„ÄÇ\nÂàùÂßãÂåñ Hexo Ë≥áÊñôÂ§æ # ÂÜç‰æÜÔºåËóâÁî±‰ª•‰∏ãÊåá‰ª§ÂàùÂßãÂåñ Hexo Ë≥áÊñôÂ§æÔºö\nhexo init \u0026lt;project\u0026gt; # create a Hexo project cd \u0026lt;project\u0026gt; # change directory npm install # update something \u0026lt;project\u0026gt; ÁöÑÂêçÁ®±ÊúâÂÖ©ÂÄãÈÅ∏ÊìáÔºö\nÂíå GitHub ‰∏äÁöÑÂêçÁ®±Ôºàwalkccc.github.ioÔºâ‰∏ÄÊ®£ ‰ªªÊÑèÂêçÁ®± ÂÆâË£ù‰ΩàÁΩ≤Âô® # ‰∏çÂÉèÂÖ∂ÂÆÉÈùúÊÖãÈ†ÅÈù¢ÁîüÁî¢Âô®ÔºåHexo Êèê‰æõ‰∫ÜÂÆòÊñπÁöÑ‰ΩàÁΩ≤Âô®ÔºàdeployerÔºâÔºå ÊàëÂÄëÂèØÁî±‰∏ãÂàóÊåá‰ª§ÂÆâË£ù‰πãÔºö\nnpm install hexo-deployer-git --save ÂÆâË£ùÁæéÈ∫óÁöÑ‰∏ªÈ°å # ÊàëÂà™Èô§‰∫Ü Hexo È†êË®≠ÁöÑ‰∏ªÈ°å landscapeÔºå‰∏¶‰∏îÂÆâË£ù NexT ‰∏ªÈ°å„ÄÇ\n# delete the default theme rm -rf themes/landscape # clone the theme next git clone https://github.com/theme-next/hexo-theme-next themes/next # delete the .git files in the subdirectory to prevent unwanted conflicts rm -rf themes/next/.git* ÈÄ£ÁµêÊú¨Ê©üË≥áÊñôÂ§æËàá GitHub ‰∏äÁöÑÂÄâÂ∫´ # Ë∑üËëó GitHub ‰∏äÊñ∞Âª∫Êñ∞ÂÄâÂ∫´ÁöÑÂ∞éË¶ΩÔºàÈÄôË£°ÊúÉÂÅö‰∏Ä‰∫õ‰øÆÊîπÔºâÔºö\ngit init git add . git commit -m \u0026#39;init\u0026#39; git remote add origin https://github.com/\u0026lt;username\u0026gt;/\u0026lt;project\u0026gt;.git git push -u master ‰øÆÊîπË®≠ÂÆö # Âú®Ë≥áÊñôÂ§æÁöÑÊ†πÁõÆÈåÑÔºåÊâìÈñã /_config.yml ‰∏¶‰∏î‰øÆÊîπÂ¶Ç‰ª•‰∏ãÔºàÂú®ÈÄôË£°ÊàëÁî®ÊàëÁöÑÂ∏≥Ëôü‰æÜÂÅöÁ§∫ÁØÑ Ôºâ\ntitle: Jay\u0026#39;s Blog author: Jay Chen url: http://walkccc.github.io/blog root: /blog/ theme: next deploy: type: git repo: https://github.com/walkccc/blog.git branch: gh-pages Á¢∫‰øù‰Ω†ÁöÑ branch Â±¨ÊÄßÂ°´ÂØ´ÁöÑÊòØ masterÔºàÈùûÂ∏∏ÈáçË¶ÅÔºÅÔºâGitHub ‰∏çÂÖÅË®±‰ΩøÁî®ÂàÜÊîØÔºàÂ¶Ç Ôºögh-pagesÔºâÁôºÂ∏ÉÁ∂≤È†ÅÂú® \u0026lt;username\u0026gt;.github.ioÔºà‰ΩÜÂ¶ÇÊûú‰Ω†ÊòØÁôºÂ∏ÉÂú®‰æãÂ¶Ç Ôºö\u0026lt;username\u0026gt;.github.io/blog ‰∏ã‰æøÂèØ‰ª•ÔºâÔºåÂÖÑÂºüÊàëÂ∞±ÊòØ‰∏çÁü•ÈÅìÈÄôÈªûÔºåÊâÄ‰ª•Âú®ÈÄôËÄóË≤ª‰∫ÜË®± ‰πÖÊôÇÈñì ‚ãØ‚ãØ Âõß„ÄÇ\nÊ∫ñÂÇô‰ΩàÁΩ≤Á∂≤È†ÅÔºÅ # hexo clean # hexo clean the folder first (highly recommended) hexo generate # generate the \u0026#34;public\u0026#34; files (Alias: hexo g) hexo deploy # deploy it! (Alias: hexo d) ÂæåÈù¢ÂÖ©Ë°åÁîüÊàêÔºàgenerateÔºâÂíå‰ΩàÁΩ≤ÔºàdeployÔºâÁöÑÊåá‰ª§‰πüÂèØÂØ´Êàê‰∏ÄË°åÔºö\nhexo deploy -g Êõ¥Â§öÁõ∏ÈóúÁöÑÊåá‰ª§ÂèØ‰ª•\nhexo --help ÊñáÁ´†ÊâÄ‰ΩøÁî®ÁöÑ .md Ê™î‰ΩçÁΩÆÊòØÂú® /source/_posts ‰∏≠ÔºåÊéíÂ∫èÁöÑÊñπÂºèÊúÉÊ†πÊìö date ‰æÜÊ±∫ÂÆö „ÄÇÁ®çÂÄôÁâáÂàªÔºå‰Ω†ÁöÑÁ∂≤È†ÅÂ∞áÊúÉË¢´Áôº‰ΩàÂú®Ôºöhttps://\u0026lt;username\u0026gt;.github.io/ ÊàñÊòØ https://\u0026lt;username\u0026gt;.github.io/\u0026lt;project\u0026gt; ‰∏äÔºÅ\nÊÅ≠Âñú‰Ω†Ôºå‰ΩÜÂÖàÂà•ÊÄ•ÔºåËÆìÊàëÂÄë‰æÜÂÅöÈªûÂÑ™Âåñ„ÄÇ\nÂ¢ûÂä†Êï∏Â≠∏ÂºèÊîØÊè¥ # NexT ‰∏ªÈ°åÂæàË≤ºÂøÉÔºåÈ†êË®≠Ë£°Â∞±ËÉΩÊîØÊè¥Êï∏Â≠∏Âºè‰∫ÜÔºå‰ΩÜÈÇÑÊòØÈúÄË¶Å‰ΩøÁî®ËÄÖÂÅö‰∏Ä‰∫õË™øÊï¥ÔºåÂú® /themes/next/_config.yml ‰∏≠ enable ‰Ω†ÁöÑ math Ë®≠ÂÆöÁÇ∫ trueÔºå‰∏¶‰øÆÊîπ CDN ‰ΩçÁΩÆÔºö\nmath: enable: true cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML Êúâ‰∏ÄÈªûË¶ÅÁâπÂà•Ê≥®ÊÑèÁöÑÊòØ per_page Â±¨ÊÄßÂú®ÈÄôÊàëÊòØÁ∂≠ÊåÅÂéüÊú¨ÁöÑ trueÔºåÈÄôÊ®£ÁöÑË©±ÊàëÂè™Âú®Êàë ÊÉ≥Ë¶ÅÂä†ÂÖ•Êï∏Â≠∏ÂºèÁöÑÈ†ÅÈù¢ÊâçËºâÂÖ• javascriptÔºå‰æãÂ¶ÇÂÉèÈÄôÈ†ÅÁöÑÊ®ôÈ°åÂ∞±ÊúÉÈï∑ÁöÑÂÉèÔºö\n--- title: ‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ date: 2018-02-14 mathjax: true --- ‰æÜË©¶Ë©¶Á∞°ÂñÆÁöÑÂπæË°åÊï∏Â≠∏ÂºèÔºö\n$$\\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$$\n$$ \\begin{aligned} \\min\\{c, a, t\\} \u0026amp; \\mbox{ if \\(y \u0026lt; 0\\)} \\\\ \\max\\{d, o, g\\} \u0026amp; \\mbox{ if \\(y \\ge 0\\)} \\end{aligned} $$\nÂú®ÈÄôÊàëÁôºÁèæ‰∫ÜÂú®ÊèõË°åÊôÇÔºå\\\\, {} Á≠âË∑≥ËÑ´Â≠óÂÖÉÔºàescape characterÔºâÔºåÊúÉÂíå html Ë™ûÊ≥ï Áõ∏Ë°ùÔºåÊâÄ‰ª•ÊàëÂÄëË¶ÅÂÅöÈªûËôïÁêÜ„ÄÇ\nÊï∏Â≠∏ÂºèÊ∏≤ÊüìË∑≥ËÑ´Â≠óÂÖÉËôïÁêÜ # Hexo È†êË®≠‰ΩøÁî® hexo-renderer-marked ÂºïÊìéÈÄ≤Ë°åÊ∏≤ÊüìÔºå‰ΩÜÂ∞çÊñºÂ∫ïÁ∑ö„ÄÅÂèçÊñúÁ∑ö„ÄÅ‰∏≠Êã¨ËôüÂÆö Áæ©‰∫ÜËΩâÁæ©ÔºåÂÆπÊòìËàá MathJax Êï∏Â≠∏ÂÖ¨ÂºèÊ∏≤ÊüìÊôÇÊâÄËôïÁêÜÁöÑÂ≠óÁ¨¶ÈÄ†ÊàêË°ùÁ™ÅÔºåÂª∫Ë≠∞ÂèØ‰ª•ËÆäÊõ¥Ê∏≤ÊüìÂºï ÊìéÁÇ∫‰∏ãÂàóÈÅ∏È†Ö‰∏≠ÂÖ∂‰∏≠‰∏ÄÂÄãÔºö\nhexo-renderer-kramed hexo-renderer-pandoc npm uninstall hexo-renderer-marked --save # uninstall the hexo-renderer-marked npm install hexo-renderer-kramed --save # install the hexo-renderer-kramed Èô§Ê≠§‰πãÂ§ñÔºåÈÇÑÈúÄË¶ÅÊîπËÆäË°åÂÖßÂÖ¨ÂºèÁöÑËΩâÁæ©Ë®≠ÂÆö„ÄÇ‰øÆÊîπ ./node_modules/kramed/lib/rules/inline.jsÔºö\n// escape part - escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_\u0026gt;])/, + escape: /^\\\\([`*\\[\\]()#$+\\-.!_\u0026gt;])/, // em part - em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, + em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,` Ë®òÂæóË¶Å\nhexo clean Âê¶ÂâáÊï∏Â≠∏ÂºèÈÇÑÊòØÊúÉÁÑ°Ê≥ïÊ∏≤Êüì„ÄÇ\nÂÇô‰ªΩÊú¨Ê©ü‰∏äÁöÑË≥áÊñôÂ§æ # Âú®ÊàëÂäü‰ΩàÁΩ≤ÊàëÂÄëÁöÑÁ∂≤È†ÅÂæåÔºåGitHub ‰∏äÊúâÁöÑÂè™ÊúâÁ∂≤È†ÅÊâÄÈúÄË¶ÅÁöÑÊ™îÊ°àÔºå‰ΩÜÂ¶ÇÊûúÂì™Â§©Êèõ‰∫ÜÈõªËÖ¶Ôºå ÊÉ≥Ë¶ÅÂú®Âà•Âè∞ÈõªËÖ¶‰∏ä‰øÆÊîπÔºå‰∫ãÊÉÖÂ∞±ÊúÉËÆäÂæóÈùûÂ∏∏È∫ªÁÖ©„ÄÇ\nÊàëÂÄëÂèØ‰ª•ÈÅãÁî® GitHub ÁöÑÂàÜÊîØÔºàbranchÔºâÂäüËÉΩ‰æÜÂÇô‰ªΩÊ†πÁõÆÈåÑË≥áÊñôÂ§æ„ÄÇ\nÂèØ‰ª•Âú® GitHub ‰∏äÂ∞àÈ†Å‰∏äÊñ∞Â¢û‰∏ÄÂÄãÂè´ sources ÁöÑÂàÜÊîØ \b ÊàñÊòØÂú®Ê†πÁõÆÈåÑÈÄèÈÅé command line Êåá‰ª§Ôºö git checkout -b sources # create the branch on your local machine and switch in this branch git push origin sources # push the new branch: sources on github git add . # add all files in root folder git commit -m \u0026#39;first backup sources\u0026#39; git push --set-upstream origin sources Â§ßÂäüÂëäÊàêÔºåÈñãÂßãÂØ´ÈÉ®ËêΩÊ†ºÂêßÔºÅ\n","date":"14 February 2018","externalUrl":null,"permalink":"/posts/tech/hexo-building/","section":"Posts","summary":"","title":"Hexo Building","type":"posts"},{"content":"","date":"14 February 2018","externalUrl":null,"permalink":"/tags/static-site-generator/","section":"Tags","summary":"","title":"Static Site Generator","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]